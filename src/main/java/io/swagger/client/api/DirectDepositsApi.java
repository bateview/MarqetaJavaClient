/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.DepositAccount;
import io.swagger.client.model.DepositAccountUpdateRequest;
import io.swagger.client.model.DepositDepositResponse;
import io.swagger.client.model.DirectDepositListResponse;
import io.swagger.client.model.DirectDepositTransitionListResponse;
import io.swagger.client.model.DirectDepositTransitionRequest;
import io.swagger.client.model.DirectDepositTransitionResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DirectDepositsApi {
    private ApiClient apiClient;

    public DirectDepositsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DirectDepositsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getDirectdeposits
     * @param count Number of direct deposits to retrieve (optional, default to 5)
     * @param startIndex Start index (optional, default to 0)
     * @param reversedAfterGracePeriod Reversed after grace period (optional)
     * @param userToken User token (optional)
     * @param businessToken Business token (optional)
     * @param directDepositState Direct deposit state (optional)
     * @param startSettlementDate Start settlement date (optional)
     * @param endSettlementDate End settlement date (optional)
     * @param sortBy Sort order (optional, default to -lastModifiedTime)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDirectdepositsCall(Integer count, Integer startIndex, Boolean reversedAfterGracePeriod, String userToken, String businessToken, String directDepositState, String startSettlementDate, String endSettlementDate, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/directdeposits";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("count", count));
        if (startIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_index", startIndex));
        if (reversedAfterGracePeriod != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("reversed_after_grace_period", reversedAfterGracePeriod));
        if (userToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("user_token", userToken));
        if (businessToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("business_token", businessToken));
        if (directDepositState != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("direct_deposit_state", directDepositState));
        if (startSettlementDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_settlement_date", startSettlementDate));
        if (endSettlementDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_settlement_date", endSettlementDate));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDirectdepositsValidateBeforeCall(Integer count, Integer startIndex, Boolean reversedAfterGracePeriod, String userToken, String businessToken, String directDepositState, String startSettlementDate, String endSettlementDate, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getDirectdepositsCall(count, startIndex, reversedAfterGracePeriod, userToken, businessToken, directDepositState, startSettlementDate, endSettlementDate, sortBy, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lists all direct deposits
     * 
     * @param count Number of direct deposits to retrieve (optional, default to 5)
     * @param startIndex Start index (optional, default to 0)
     * @param reversedAfterGracePeriod Reversed after grace period (optional)
     * @param userToken User token (optional)
     * @param businessToken Business token (optional)
     * @param directDepositState Direct deposit state (optional)
     * @param startSettlementDate Start settlement date (optional)
     * @param endSettlementDate End settlement date (optional)
     * @param sortBy Sort order (optional, default to -lastModifiedTime)
     * @return DirectDepositListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DirectDepositListResponse getDirectdeposits(Integer count, Integer startIndex, Boolean reversedAfterGracePeriod, String userToken, String businessToken, String directDepositState, String startSettlementDate, String endSettlementDate, String sortBy) throws ApiException {
        ApiResponse<DirectDepositListResponse> resp = getDirectdepositsWithHttpInfo(count, startIndex, reversedAfterGracePeriod, userToken, businessToken, directDepositState, startSettlementDate, endSettlementDate, sortBy);
        return resp.getData();
    }

    /**
     * Lists all direct deposits
     * 
     * @param count Number of direct deposits to retrieve (optional, default to 5)
     * @param startIndex Start index (optional, default to 0)
     * @param reversedAfterGracePeriod Reversed after grace period (optional)
     * @param userToken User token (optional)
     * @param businessToken Business token (optional)
     * @param directDepositState Direct deposit state (optional)
     * @param startSettlementDate Start settlement date (optional)
     * @param endSettlementDate End settlement date (optional)
     * @param sortBy Sort order (optional, default to -lastModifiedTime)
     * @return ApiResponse&lt;DirectDepositListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DirectDepositListResponse> getDirectdepositsWithHttpInfo(Integer count, Integer startIndex, Boolean reversedAfterGracePeriod, String userToken, String businessToken, String directDepositState, String startSettlementDate, String endSettlementDate, String sortBy) throws ApiException {
        com.squareup.okhttp.Call call = getDirectdepositsValidateBeforeCall(count, startIndex, reversedAfterGracePeriod, userToken, businessToken, directDepositState, startSettlementDate, endSettlementDate, sortBy, null, null);
        Type localVarReturnType = new TypeToken<DirectDepositListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists all direct deposits (asynchronously)
     * 
     * @param count Number of direct deposits to retrieve (optional, default to 5)
     * @param startIndex Start index (optional, default to 0)
     * @param reversedAfterGracePeriod Reversed after grace period (optional)
     * @param userToken User token (optional)
     * @param businessToken Business token (optional)
     * @param directDepositState Direct deposit state (optional)
     * @param startSettlementDate Start settlement date (optional)
     * @param endSettlementDate End settlement date (optional)
     * @param sortBy Sort order (optional, default to -lastModifiedTime)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDirectdepositsAsync(Integer count, Integer startIndex, Boolean reversedAfterGracePeriod, String userToken, String businessToken, String directDepositState, String startSettlementDate, String endSettlementDate, String sortBy, final ApiCallback<DirectDepositListResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDirectdepositsValidateBeforeCall(count, startIndex, reversedAfterGracePeriod, userToken, businessToken, directDepositState, startSettlementDate, endSettlementDate, sortBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DirectDepositListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDirectdepositsAccountsUserorbusinesstoken
     * @param userOrBusinessToken  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDirectdepositsAccountsUserorbusinesstokenCall(String userOrBusinessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/directdeposits/accounts/{user_or_business_token}"
            .replaceAll("\\{" + "user_or_business_token" + "\\}", apiClient.escapeString(userOrBusinessToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDirectdepositsAccountsUserorbusinesstokenValidateBeforeCall(String userOrBusinessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userOrBusinessToken' is set
        if (userOrBusinessToken == null) {
            throw new ApiException("Missing the required parameter 'userOrBusinessToken' when calling getDirectdepositsAccountsUserorbusinesstoken(Async)");
        }
        

        com.squareup.okhttp.Call call = getDirectdepositsAccountsUserorbusinesstokenCall(userOrBusinessToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns an account and routing number which can be used for direct deposit
     * 
     * @param userOrBusinessToken  (required)
     * @return DepositAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DepositAccount getDirectdepositsAccountsUserorbusinesstoken(String userOrBusinessToken) throws ApiException {
        ApiResponse<DepositAccount> resp = getDirectdepositsAccountsUserorbusinesstokenWithHttpInfo(userOrBusinessToken);
        return resp.getData();
    }

    /**
     * Returns an account and routing number which can be used for direct deposit
     * 
     * @param userOrBusinessToken  (required)
     * @return ApiResponse&lt;DepositAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DepositAccount> getDirectdepositsAccountsUserorbusinesstokenWithHttpInfo(String userOrBusinessToken) throws ApiException {
        com.squareup.okhttp.Call call = getDirectdepositsAccountsUserorbusinesstokenValidateBeforeCall(userOrBusinessToken, null, null);
        Type localVarReturnType = new TypeToken<DepositAccount>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns an account and routing number which can be used for direct deposit (asynchronously)
     * 
     * @param userOrBusinessToken  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDirectdepositsAccountsUserorbusinesstokenAsync(String userOrBusinessToken, final ApiCallback<DepositAccount> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDirectdepositsAccountsUserorbusinesstokenValidateBeforeCall(userOrBusinessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DepositAccount>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDirectdepositsToken
     * @param token  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDirectdepositsTokenCall(String token, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/directdeposits/{token}"
            .replaceAll("\\{" + "token" + "\\}", apiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDirectdepositsTokenValidateBeforeCall(String token, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getDirectdepositsToken(Async)");
        }
        

        com.squareup.okhttp.Call call = getDirectdepositsTokenCall(token, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns a direct deposit entry
     * 
     * @param token  (required)
     * @return DepositDepositResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DepositDepositResponse getDirectdepositsToken(String token) throws ApiException {
        ApiResponse<DepositDepositResponse> resp = getDirectdepositsTokenWithHttpInfo(token);
        return resp.getData();
    }

    /**
     * Returns a direct deposit entry
     * 
     * @param token  (required)
     * @return ApiResponse&lt;DepositDepositResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DepositDepositResponse> getDirectdepositsTokenWithHttpInfo(String token) throws ApiException {
        com.squareup.okhttp.Call call = getDirectdepositsTokenValidateBeforeCall(token, null, null);
        Type localVarReturnType = new TypeToken<DepositDepositResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a direct deposit entry (asynchronously)
     * 
     * @param token  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDirectdepositsTokenAsync(String token, final ApiCallback<DepositDepositResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDirectdepositsTokenValidateBeforeCall(token, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DepositDepositResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDirectdepositsTransitions
     * @param count Number of direct deposit transitions to retrieve (optional, default to 5)
     * @param userToken User token (optional)
     * @param businessToken Business token (optional)
     * @param directDepositToken Direct deposit token (optional)
     * @param startIndex Start index (optional, default to 0)
     * @param sortBy Sort order (optional, default to -createdTime)
     * @param states Comma-delimited list of direct deposit states to display e.g. PENDING | REVERSED | APPLIED | REJECTED  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDirectdepositsTransitionsCall(Integer count, String userToken, String businessToken, String directDepositToken, Integer startIndex, String sortBy, String states, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/directdeposits/transitions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("count", count));
        if (userToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("user_token", userToken));
        if (businessToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("business_token", businessToken));
        if (directDepositToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("direct_deposit_token", directDepositToken));
        if (startIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_index", startIndex));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));
        if (states != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("states", states));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDirectdepositsTransitionsValidateBeforeCall(Integer count, String userToken, String businessToken, String directDepositToken, Integer startIndex, String sortBy, String states, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getDirectdepositsTransitionsCall(count, userToken, businessToken, directDepositToken, startIndex, sortBy, states, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns a list of direct deposit transitions
     * 
     * @param count Number of direct deposit transitions to retrieve (optional, default to 5)
     * @param userToken User token (optional)
     * @param businessToken Business token (optional)
     * @param directDepositToken Direct deposit token (optional)
     * @param startIndex Start index (optional, default to 0)
     * @param sortBy Sort order (optional, default to -createdTime)
     * @param states Comma-delimited list of direct deposit states to display e.g. PENDING | REVERSED | APPLIED | REJECTED  (optional)
     * @return DirectDepositTransitionListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DirectDepositTransitionListResponse getDirectdepositsTransitions(Integer count, String userToken, String businessToken, String directDepositToken, Integer startIndex, String sortBy, String states) throws ApiException {
        ApiResponse<DirectDepositTransitionListResponse> resp = getDirectdepositsTransitionsWithHttpInfo(count, userToken, businessToken, directDepositToken, startIndex, sortBy, states);
        return resp.getData();
    }

    /**
     * Returns a list of direct deposit transitions
     * 
     * @param count Number of direct deposit transitions to retrieve (optional, default to 5)
     * @param userToken User token (optional)
     * @param businessToken Business token (optional)
     * @param directDepositToken Direct deposit token (optional)
     * @param startIndex Start index (optional, default to 0)
     * @param sortBy Sort order (optional, default to -createdTime)
     * @param states Comma-delimited list of direct deposit states to display e.g. PENDING | REVERSED | APPLIED | REJECTED  (optional)
     * @return ApiResponse&lt;DirectDepositTransitionListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DirectDepositTransitionListResponse> getDirectdepositsTransitionsWithHttpInfo(Integer count, String userToken, String businessToken, String directDepositToken, Integer startIndex, String sortBy, String states) throws ApiException {
        com.squareup.okhttp.Call call = getDirectdepositsTransitionsValidateBeforeCall(count, userToken, businessToken, directDepositToken, startIndex, sortBy, states, null, null);
        Type localVarReturnType = new TypeToken<DirectDepositTransitionListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a list of direct deposit transitions (asynchronously)
     * 
     * @param count Number of direct deposit transitions to retrieve (optional, default to 5)
     * @param userToken User token (optional)
     * @param businessToken Business token (optional)
     * @param directDepositToken Direct deposit token (optional)
     * @param startIndex Start index (optional, default to 0)
     * @param sortBy Sort order (optional, default to -createdTime)
     * @param states Comma-delimited list of direct deposit states to display e.g. PENDING | REVERSED | APPLIED | REJECTED  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDirectdepositsTransitionsAsync(Integer count, String userToken, String businessToken, String directDepositToken, Integer startIndex, String sortBy, String states, final ApiCallback<DirectDepositTransitionListResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDirectdepositsTransitionsValidateBeforeCall(count, userToken, businessToken, directDepositToken, startIndex, sortBy, states, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DirectDepositTransitionListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDirectdepositsTransitionsToken
     * @param token  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDirectdepositsTransitionsTokenCall(String token, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/directdeposits/transitions/{token}"
            .replaceAll("\\{" + "token" + "\\}", apiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDirectdepositsTransitionsTokenValidateBeforeCall(String token, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getDirectdepositsTransitionsToken(Async)");
        }
        

        com.squareup.okhttp.Call call = getDirectdepositsTransitionsTokenCall(token, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns a direct deposit transition
     * 
     * @param token  (required)
     * @return DirectDepositTransitionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DirectDepositTransitionResponse getDirectdepositsTransitionsToken(String token) throws ApiException {
        ApiResponse<DirectDepositTransitionResponse> resp = getDirectdepositsTransitionsTokenWithHttpInfo(token);
        return resp.getData();
    }

    /**
     * Returns a direct deposit transition
     * 
     * @param token  (required)
     * @return ApiResponse&lt;DirectDepositTransitionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DirectDepositTransitionResponse> getDirectdepositsTransitionsTokenWithHttpInfo(String token) throws ApiException {
        com.squareup.okhttp.Call call = getDirectdepositsTransitionsTokenValidateBeforeCall(token, null, null);
        Type localVarReturnType = new TypeToken<DirectDepositTransitionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a direct deposit transition (asynchronously)
     * 
     * @param token  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDirectdepositsTransitionsTokenAsync(String token, final ApiCallback<DirectDepositTransitionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDirectdepositsTransitionsTokenValidateBeforeCall(token, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DirectDepositTransitionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postDirectdepositsTransitions
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postDirectdepositsTransitionsCall(DirectDepositTransitionRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/directdeposits/transitions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postDirectdepositsTransitionsValidateBeforeCall(DirectDepositTransitionRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = postDirectdepositsTransitionsCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates a direct deposit transition
     * 
     * @param body  (optional)
     * @return DirectDepositTransitionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DirectDepositTransitionResponse postDirectdepositsTransitions(DirectDepositTransitionRequest body) throws ApiException {
        ApiResponse<DirectDepositTransitionResponse> resp = postDirectdepositsTransitionsWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Creates a direct deposit transition
     * 
     * @param body  (optional)
     * @return ApiResponse&lt;DirectDepositTransitionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DirectDepositTransitionResponse> postDirectdepositsTransitionsWithHttpInfo(DirectDepositTransitionRequest body) throws ApiException {
        com.squareup.okhttp.Call call = postDirectdepositsTransitionsValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<DirectDepositTransitionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a direct deposit transition (asynchronously)
     * 
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postDirectdepositsTransitionsAsync(DirectDepositTransitionRequest body, final ApiCallback<DirectDepositTransitionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postDirectdepositsTransitionsValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DirectDepositTransitionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putDirectdepositsAccountsUserorbusinesstoken
     * @param userOrBusinessToken User or business token (required)
     * @param body Deposit account update request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putDirectdepositsAccountsUserorbusinesstokenCall(String userOrBusinessToken, DepositAccountUpdateRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/directdeposits/accounts/{user_or_business_token}"
            .replaceAll("\\{" + "user_or_business_token" + "\\}", apiClient.escapeString(userOrBusinessToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putDirectdepositsAccountsUserorbusinesstokenValidateBeforeCall(String userOrBusinessToken, DepositAccountUpdateRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userOrBusinessToken' is set
        if (userOrBusinessToken == null) {
            throw new ApiException("Missing the required parameter 'userOrBusinessToken' when calling putDirectdepositsAccountsUserorbusinesstoken(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putDirectdepositsAccountsUserorbusinesstoken(Async)");
        }
        

        com.squareup.okhttp.Call call = putDirectdepositsAccountsUserorbusinesstokenCall(userOrBusinessToken, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates a specific direct deposit account
     * 
     * @param userOrBusinessToken User or business token (required)
     * @param body Deposit account update request (required)
     * @return DepositAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DepositAccount putDirectdepositsAccountsUserorbusinesstoken(String userOrBusinessToken, DepositAccountUpdateRequest body) throws ApiException {
        ApiResponse<DepositAccount> resp = putDirectdepositsAccountsUserorbusinesstokenWithHttpInfo(userOrBusinessToken, body);
        return resp.getData();
    }

    /**
     * Updates a specific direct deposit account
     * 
     * @param userOrBusinessToken User or business token (required)
     * @param body Deposit account update request (required)
     * @return ApiResponse&lt;DepositAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DepositAccount> putDirectdepositsAccountsUserorbusinesstokenWithHttpInfo(String userOrBusinessToken, DepositAccountUpdateRequest body) throws ApiException {
        com.squareup.okhttp.Call call = putDirectdepositsAccountsUserorbusinesstokenValidateBeforeCall(userOrBusinessToken, body, null, null);
        Type localVarReturnType = new TypeToken<DepositAccount>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a specific direct deposit account (asynchronously)
     * 
     * @param userOrBusinessToken User or business token (required)
     * @param body Deposit account update request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putDirectdepositsAccountsUserorbusinesstokenAsync(String userOrBusinessToken, DepositAccountUpdateRequest body, final ApiCallback<DepositAccount> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putDirectdepositsAccountsUserorbusinesstokenValidateBeforeCall(userOrBusinessToken, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DepositAccount>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
