/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.BusinessCardHolderListResponse;
import io.swagger.client.model.BusinessCardHolderResponse;
import io.swagger.client.model.BusinessCardHolderUpdate;
import io.swagger.client.model.BusinessCardholder;
import io.swagger.client.model.CardHolderNoteListResponse;
import io.swagger.client.model.CardholderNoteRequestModel;
import io.swagger.client.model.CardholderNoteResponseModel;
import io.swagger.client.model.CardholderNoteUpdateRequestModel;
import io.swagger.client.model.DDARequest;
import io.swagger.client.model.SsnResponseModel;
import io.swagger.client.model.UserCardHolderListResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BusinessesApi {
    private ApiClient apiClient;

    public BusinessesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BusinessesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getBusinesses
     * @param count Number of users to retrieve (optional, default to 5)
     * @param startIndex Start index (optional, default to 0)
     * @param businessNameDba Business name DBA (optional)
     * @param businessNameLegal Business name legal (optional)
     * @param searchType Search type (optional)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @param sortBy Sort order (optional, default to -lastModifiedTime)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBusinessesCall(Integer count, Integer startIndex, String businessNameDba, String businessNameLegal, String searchType, String fields, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/businesses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("count", count));
        if (startIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_index", startIndex));
        if (businessNameDba != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("business_name_dba", businessNameDba));
        if (businessNameLegal != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("business_name_legal", businessNameLegal));
        if (searchType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("search_type", searchType));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBusinessesValidateBeforeCall(Integer count, Integer startIndex, String businessNameDba, String businessNameLegal, String searchType, String fields, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getBusinessesCall(count, startIndex, businessNameDba, businessNameLegal, searchType, fields, sortBy, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lists all businesses
     * 
     * @param count Number of users to retrieve (optional, default to 5)
     * @param startIndex Start index (optional, default to 0)
     * @param businessNameDba Business name DBA (optional)
     * @param businessNameLegal Business name legal (optional)
     * @param searchType Search type (optional)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @param sortBy Sort order (optional, default to -lastModifiedTime)
     * @return BusinessCardHolderListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BusinessCardHolderListResponse getBusinesses(Integer count, Integer startIndex, String businessNameDba, String businessNameLegal, String searchType, String fields, String sortBy) throws ApiException {
        ApiResponse<BusinessCardHolderListResponse> resp = getBusinessesWithHttpInfo(count, startIndex, businessNameDba, businessNameLegal, searchType, fields, sortBy);
        return resp.getData();
    }

    /**
     * Lists all businesses
     * 
     * @param count Number of users to retrieve (optional, default to 5)
     * @param startIndex Start index (optional, default to 0)
     * @param businessNameDba Business name DBA (optional)
     * @param businessNameLegal Business name legal (optional)
     * @param searchType Search type (optional)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @param sortBy Sort order (optional, default to -lastModifiedTime)
     * @return ApiResponse&lt;BusinessCardHolderListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BusinessCardHolderListResponse> getBusinessesWithHttpInfo(Integer count, Integer startIndex, String businessNameDba, String businessNameLegal, String searchType, String fields, String sortBy) throws ApiException {
        com.squareup.okhttp.Call call = getBusinessesValidateBeforeCall(count, startIndex, businessNameDba, businessNameLegal, searchType, fields, sortBy, null, null);
        Type localVarReturnType = new TypeToken<BusinessCardHolderListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists all businesses (asynchronously)
     * 
     * @param count Number of users to retrieve (optional, default to 5)
     * @param startIndex Start index (optional, default to 0)
     * @param businessNameDba Business name DBA (optional)
     * @param businessNameLegal Business name legal (optional)
     * @param searchType Search type (optional)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @param sortBy Sort order (optional, default to -lastModifiedTime)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBusinessesAsync(Integer count, Integer startIndex, String businessNameDba, String businessNameLegal, String searchType, String fields, String sortBy, final ApiCallback<BusinessCardHolderListResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBusinessesValidateBeforeCall(count, startIndex, businessNameDba, businessNameLegal, searchType, fields, sortBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BusinessCardHolderListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBusinessesParenttokenChildren
     * @param parentToken Token of parent business (required)
     * @param count Number of users to retrieve (optional, default to 5)
     * @param startIndex Start index (optional, default to 0)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @param sortBy Sort order (optional, default to -lastModifiedTime)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBusinessesParenttokenChildrenCall(String parentToken, Integer count, Integer startIndex, String fields, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/businesses/{parent_token}/children"
            .replaceAll("\\{" + "parent_token" + "\\}", apiClient.escapeString(parentToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("count", count));
        if (startIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_index", startIndex));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBusinessesParenttokenChildrenValidateBeforeCall(String parentToken, Integer count, Integer startIndex, String fields, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'parentToken' is set
        if (parentToken == null) {
            throw new ApiException("Missing the required parameter 'parentToken' when calling getBusinessesParenttokenChildren(Async)");
        }
        

        com.squareup.okhttp.Call call = getBusinessesParenttokenChildrenCall(parentToken, count, startIndex, fields, sortBy, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lists all children of a parent business
     * 
     * @param parentToken Token of parent business (required)
     * @param count Number of users to retrieve (optional, default to 5)
     * @param startIndex Start index (optional, default to 0)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @param sortBy Sort order (optional, default to -lastModifiedTime)
     * @return UserCardHolderListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserCardHolderListResponse getBusinessesParenttokenChildren(String parentToken, Integer count, Integer startIndex, String fields, String sortBy) throws ApiException {
        ApiResponse<UserCardHolderListResponse> resp = getBusinessesParenttokenChildrenWithHttpInfo(parentToken, count, startIndex, fields, sortBy);
        return resp.getData();
    }

    /**
     * Lists all children of a parent business
     * 
     * @param parentToken Token of parent business (required)
     * @param count Number of users to retrieve (optional, default to 5)
     * @param startIndex Start index (optional, default to 0)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @param sortBy Sort order (optional, default to -lastModifiedTime)
     * @return ApiResponse&lt;UserCardHolderListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserCardHolderListResponse> getBusinessesParenttokenChildrenWithHttpInfo(String parentToken, Integer count, Integer startIndex, String fields, String sortBy) throws ApiException {
        com.squareup.okhttp.Call call = getBusinessesParenttokenChildrenValidateBeforeCall(parentToken, count, startIndex, fields, sortBy, null, null);
        Type localVarReturnType = new TypeToken<UserCardHolderListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists all children of a parent business (asynchronously)
     * 
     * @param parentToken Token of parent business (required)
     * @param count Number of users to retrieve (optional, default to 5)
     * @param startIndex Start index (optional, default to 0)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @param sortBy Sort order (optional, default to -lastModifiedTime)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBusinessesParenttokenChildrenAsync(String parentToken, Integer count, Integer startIndex, String fields, String sortBy, final ApiCallback<UserCardHolderListResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBusinessesParenttokenChildrenValidateBeforeCall(parentToken, count, startIndex, fields, sortBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserCardHolderListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBusinessesToken
     * @param token Business token (required)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBusinessesTokenCall(String token, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/businesses/{token}"
            .replaceAll("\\{" + "token" + "\\}", apiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBusinessesTokenValidateBeforeCall(String token, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getBusinessesToken(Async)");
        }
        

        com.squareup.okhttp.Call call = getBusinessesTokenCall(token, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns a specific business
     * 
     * @param token Business token (required)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @return BusinessCardHolderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BusinessCardHolderResponse getBusinessesToken(String token, String fields) throws ApiException {
        ApiResponse<BusinessCardHolderResponse> resp = getBusinessesTokenWithHttpInfo(token, fields);
        return resp.getData();
    }

    /**
     * Returns a specific business
     * 
     * @param token Business token (required)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @return ApiResponse&lt;BusinessCardHolderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BusinessCardHolderResponse> getBusinessesTokenWithHttpInfo(String token, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getBusinessesTokenValidateBeforeCall(token, fields, null, null);
        Type localVarReturnType = new TypeToken<BusinessCardHolderResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a specific business (asynchronously)
     * 
     * @param token Business token (required)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBusinessesTokenAsync(String token, String fields, final ApiCallback<BusinessCardHolderResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBusinessesTokenValidateBeforeCall(token, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BusinessCardHolderResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBusinessesTokenNotes
     * @param token Business token (required)
     * @param startIndex Start index (optional, default to 0)
     * @param count Number of notes to retrieve (optional, default to 5)
     * @param createdBy Created by (optional)
     * @param createdByUserRole Comma-delimited list of created by user roles (optional)
     * @param includePrivate Include private notes and private fields in note response (optional)
     * @param searchType Search type (optional)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @param sortBy Sort order (optional, default to -lastModifiedTime)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBusinessesTokenNotesCall(String token, Integer startIndex, Integer count, String createdBy, String createdByUserRole, Boolean includePrivate, String searchType, String fields, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/businesses/{token}/notes"
            .replaceAll("\\{" + "token" + "\\}", apiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_index", startIndex));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("count", count));
        if (createdBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("created_by", createdBy));
        if (createdByUserRole != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("created_by_user_role", createdByUserRole));
        if (includePrivate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("include_private", includePrivate));
        if (searchType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("search_type", searchType));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBusinessesTokenNotesValidateBeforeCall(String token, Integer startIndex, Integer count, String createdBy, String createdByUserRole, Boolean includePrivate, String searchType, String fields, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getBusinessesTokenNotes(Async)");
        }
        

        com.squareup.okhttp.Call call = getBusinessesTokenNotesCall(token, startIndex, count, createdBy, createdByUserRole, includePrivate, searchType, fields, sortBy, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lists business notes
     * 
     * @param token Business token (required)
     * @param startIndex Start index (optional, default to 0)
     * @param count Number of notes to retrieve (optional, default to 5)
     * @param createdBy Created by (optional)
     * @param createdByUserRole Comma-delimited list of created by user roles (optional)
     * @param includePrivate Include private notes and private fields in note response (optional)
     * @param searchType Search type (optional)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @param sortBy Sort order (optional, default to -lastModifiedTime)
     * @return CardHolderNoteListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CardHolderNoteListResponse getBusinessesTokenNotes(String token, Integer startIndex, Integer count, String createdBy, String createdByUserRole, Boolean includePrivate, String searchType, String fields, String sortBy) throws ApiException {
        ApiResponse<CardHolderNoteListResponse> resp = getBusinessesTokenNotesWithHttpInfo(token, startIndex, count, createdBy, createdByUserRole, includePrivate, searchType, fields, sortBy);
        return resp.getData();
    }

    /**
     * Lists business notes
     * 
     * @param token Business token (required)
     * @param startIndex Start index (optional, default to 0)
     * @param count Number of notes to retrieve (optional, default to 5)
     * @param createdBy Created by (optional)
     * @param createdByUserRole Comma-delimited list of created by user roles (optional)
     * @param includePrivate Include private notes and private fields in note response (optional)
     * @param searchType Search type (optional)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @param sortBy Sort order (optional, default to -lastModifiedTime)
     * @return ApiResponse&lt;CardHolderNoteListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CardHolderNoteListResponse> getBusinessesTokenNotesWithHttpInfo(String token, Integer startIndex, Integer count, String createdBy, String createdByUserRole, Boolean includePrivate, String searchType, String fields, String sortBy) throws ApiException {
        com.squareup.okhttp.Call call = getBusinessesTokenNotesValidateBeforeCall(token, startIndex, count, createdBy, createdByUserRole, includePrivate, searchType, fields, sortBy, null, null);
        Type localVarReturnType = new TypeToken<CardHolderNoteListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists business notes (asynchronously)
     * 
     * @param token Business token (required)
     * @param startIndex Start index (optional, default to 0)
     * @param count Number of notes to retrieve (optional, default to 5)
     * @param createdBy Created by (optional)
     * @param createdByUserRole Comma-delimited list of created by user roles (optional)
     * @param includePrivate Include private notes and private fields in note response (optional)
     * @param searchType Search type (optional)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @param sortBy Sort order (optional, default to -lastModifiedTime)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBusinessesTokenNotesAsync(String token, Integer startIndex, Integer count, String createdBy, String createdByUserRole, Boolean includePrivate, String searchType, String fields, String sortBy, final ApiCallback<CardHolderNoteListResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBusinessesTokenNotesValidateBeforeCall(token, startIndex, count, createdBy, createdByUserRole, includePrivate, searchType, fields, sortBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CardHolderNoteListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBusinessesTokenSsn
     * @param token Business token (required)
     * @param fullSsn  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBusinessesTokenSsnCall(String token, Boolean fullSsn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/businesses/{token}/ssn"
            .replaceAll("\\{" + "token" + "\\}", apiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fullSsn != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("full_ssn", fullSsn));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBusinessesTokenSsnValidateBeforeCall(String token, Boolean fullSsn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getBusinessesTokenSsn(Async)");
        }
        

        com.squareup.okhttp.Call call = getBusinessesTokenSsnCall(token, fullSsn, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns a specific business proprietor&#39;s SSN
     * 
     * @param token Business token (required)
     * @param fullSsn  (optional)
     * @return SsnResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SsnResponseModel getBusinessesTokenSsn(String token, Boolean fullSsn) throws ApiException {
        ApiResponse<SsnResponseModel> resp = getBusinessesTokenSsnWithHttpInfo(token, fullSsn);
        return resp.getData();
    }

    /**
     * Returns a specific business proprietor&#39;s SSN
     * 
     * @param token Business token (required)
     * @param fullSsn  (optional)
     * @return ApiResponse&lt;SsnResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SsnResponseModel> getBusinessesTokenSsnWithHttpInfo(String token, Boolean fullSsn) throws ApiException {
        com.squareup.okhttp.Call call = getBusinessesTokenSsnValidateBeforeCall(token, fullSsn, null, null);
        Type localVarReturnType = new TypeToken<SsnResponseModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a specific business proprietor&#39;s SSN (asynchronously)
     * 
     * @param token Business token (required)
     * @param fullSsn  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBusinessesTokenSsnAsync(String token, Boolean fullSsn, final ApiCallback<SsnResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBusinessesTokenSsnValidateBeforeCall(token, fullSsn, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SsnResponseModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postBusinesses
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postBusinessesCall(BusinessCardholder body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/businesses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postBusinessesValidateBeforeCall(BusinessCardholder body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = postBusinessesCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates a business
     * 
     * @param body  (optional)
     * @return BusinessCardHolderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BusinessCardHolderResponse postBusinesses(BusinessCardholder body) throws ApiException {
        ApiResponse<BusinessCardHolderResponse> resp = postBusinessesWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Creates a business
     * 
     * @param body  (optional)
     * @return ApiResponse&lt;BusinessCardHolderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BusinessCardHolderResponse> postBusinessesWithHttpInfo(BusinessCardholder body) throws ApiException {
        com.squareup.okhttp.Call call = postBusinessesValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<BusinessCardHolderResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a business (asynchronously)
     * 
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postBusinessesAsync(BusinessCardholder body, final ApiCallback<BusinessCardHolderResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postBusinessesValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BusinessCardHolderResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postBusinessesLookup
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postBusinessesLookupCall(DDARequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/businesses/lookup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postBusinessesLookupValidateBeforeCall(DDARequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = postBusinessesLookupCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns a specific business
     * 
     * @param body  (optional)
     * @return BusinessCardholder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BusinessCardholder postBusinessesLookup(DDARequest body) throws ApiException {
        ApiResponse<BusinessCardholder> resp = postBusinessesLookupWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Returns a specific business
     * 
     * @param body  (optional)
     * @return ApiResponse&lt;BusinessCardholder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BusinessCardholder> postBusinessesLookupWithHttpInfo(DDARequest body) throws ApiException {
        com.squareup.okhttp.Call call = postBusinessesLookupValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<BusinessCardholder>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a specific business (asynchronously)
     * 
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postBusinessesLookupAsync(DDARequest body, final ApiCallback<BusinessCardholder> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postBusinessesLookupValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BusinessCardholder>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postBusinessesTokenNotes
     * @param token Business token (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postBusinessesTokenNotesCall(String token, CardholderNoteRequestModel body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/businesses/{token}/notes"
            .replaceAll("\\{" + "token" + "\\}", apiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postBusinessesTokenNotesValidateBeforeCall(String token, CardholderNoteRequestModel body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling postBusinessesTokenNotes(Async)");
        }
        

        com.squareup.okhttp.Call call = postBusinessesTokenNotesCall(token, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates a note for a business
     * 
     * @param token Business token (required)
     * @param body  (optional)
     * @return CardholderNoteResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CardholderNoteResponseModel postBusinessesTokenNotes(String token, CardholderNoteRequestModel body) throws ApiException {
        ApiResponse<CardholderNoteResponseModel> resp = postBusinessesTokenNotesWithHttpInfo(token, body);
        return resp.getData();
    }

    /**
     * Creates a note for a business
     * 
     * @param token Business token (required)
     * @param body  (optional)
     * @return ApiResponse&lt;CardholderNoteResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CardholderNoteResponseModel> postBusinessesTokenNotesWithHttpInfo(String token, CardholderNoteRequestModel body) throws ApiException {
        com.squareup.okhttp.Call call = postBusinessesTokenNotesValidateBeforeCall(token, body, null, null);
        Type localVarReturnType = new TypeToken<CardholderNoteResponseModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a note for a business (asynchronously)
     * 
     * @param token Business token (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postBusinessesTokenNotesAsync(String token, CardholderNoteRequestModel body, final ApiCallback<CardholderNoteResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postBusinessesTokenNotesValidateBeforeCall(token, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CardholderNoteResponseModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putBusinessesToken
     * @param token Business token (required)
     * @param body Business object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putBusinessesTokenCall(String token, BusinessCardHolderUpdate body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/businesses/{token}"
            .replaceAll("\\{" + "token" + "\\}", apiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putBusinessesTokenValidateBeforeCall(String token, BusinessCardHolderUpdate body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling putBusinessesToken(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putBusinessesToken(Async)");
        }
        

        com.squareup.okhttp.Call call = putBusinessesTokenCall(token, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates a specific business
     * 
     * @param token Business token (required)
     * @param body Business object (required)
     * @return BusinessCardholder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BusinessCardholder putBusinessesToken(String token, BusinessCardHolderUpdate body) throws ApiException {
        ApiResponse<BusinessCardholder> resp = putBusinessesTokenWithHttpInfo(token, body);
        return resp.getData();
    }

    /**
     * Updates a specific business
     * 
     * @param token Business token (required)
     * @param body Business object (required)
     * @return ApiResponse&lt;BusinessCardholder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BusinessCardholder> putBusinessesTokenWithHttpInfo(String token, BusinessCardHolderUpdate body) throws ApiException {
        com.squareup.okhttp.Call call = putBusinessesTokenValidateBeforeCall(token, body, null, null);
        Type localVarReturnType = new TypeToken<BusinessCardholder>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a specific business (asynchronously)
     * 
     * @param token Business token (required)
     * @param body Business object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putBusinessesTokenAsync(String token, BusinessCardHolderUpdate body, final ApiCallback<BusinessCardholder> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putBusinessesTokenValidateBeforeCall(token, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BusinessCardholder>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putBusinessesTokenNotesNotestoken
     * @param token Business token (required)
     * @param notesToken Notes token (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putBusinessesTokenNotesNotestokenCall(String token, String notesToken, CardholderNoteUpdateRequestModel body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/businesses/{token}/notes/{notes_token}"
            .replaceAll("\\{" + "token" + "\\}", apiClient.escapeString(token.toString()))
            .replaceAll("\\{" + "notes_token" + "\\}", apiClient.escapeString(notesToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putBusinessesTokenNotesNotestokenValidateBeforeCall(String token, String notesToken, CardholderNoteUpdateRequestModel body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling putBusinessesTokenNotesNotestoken(Async)");
        }
        
        // verify the required parameter 'notesToken' is set
        if (notesToken == null) {
            throw new ApiException("Missing the required parameter 'notesToken' when calling putBusinessesTokenNotesNotestoken(Async)");
        }
        

        com.squareup.okhttp.Call call = putBusinessesTokenNotesNotestokenCall(token, notesToken, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates a specific note for a business
     * 
     * @param token Business token (required)
     * @param notesToken Notes token (required)
     * @param body  (optional)
     * @return CardholderNoteResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CardholderNoteResponseModel putBusinessesTokenNotesNotestoken(String token, String notesToken, CardholderNoteUpdateRequestModel body) throws ApiException {
        ApiResponse<CardholderNoteResponseModel> resp = putBusinessesTokenNotesNotestokenWithHttpInfo(token, notesToken, body);
        return resp.getData();
    }

    /**
     * Updates a specific note for a business
     * 
     * @param token Business token (required)
     * @param notesToken Notes token (required)
     * @param body  (optional)
     * @return ApiResponse&lt;CardholderNoteResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CardholderNoteResponseModel> putBusinessesTokenNotesNotestokenWithHttpInfo(String token, String notesToken, CardholderNoteUpdateRequestModel body) throws ApiException {
        com.squareup.okhttp.Call call = putBusinessesTokenNotesNotestokenValidateBeforeCall(token, notesToken, body, null, null);
        Type localVarReturnType = new TypeToken<CardholderNoteResponseModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a specific note for a business (asynchronously)
     * 
     * @param token Business token (required)
     * @param notesToken Notes token (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putBusinessesTokenNotesNotestokenAsync(String token, String notesToken, CardholderNoteUpdateRequestModel body, final ApiCallback<CardholderNoteResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putBusinessesTokenNotesNotestokenValidateBeforeCall(token, notesToken, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CardholderNoteResponseModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
