/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.TransactionModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TransactionsApi {
    private ApiClient apiClient;

    public TransactionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TransactionsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getTransactions
     * @param count Number of transactions to retrieve (optional, default to 10)
     * @param startIndex Start index (optional, default to 0)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @param sortBy Sort order (optional, default to -user_transaction_time)
     * @param startDate Start date (yyyy-MM-dd | yyyy-MM-ddTHH:mm:ss.SS) (optional)
     * @param endDate End date (yyyy-MM-dd | yyyy-MM-ddTHH:mm:ss.SS) (optional)
     * @param type Comma-delimited list of transaction types to include (optional)
     * @param userToken User token (optional)
     * @param businessToken Business token (optional)
     * @param actingUserToken Acting user token (optional)
     * @param cardToken Card token (optional)
     * @param merchantToken Merchant token (optional)
     * @param campaignToken Campaign token (optional)
     * @param state Comma-delimited list of transaction states to display e.g. PENDING | CLEARED | COMPLETION | DECLINED | ERROR | ALL (optional, default to PENDING,COMPLETION)
     * @param version  (optional)
     * @param verbose  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTransactionsCall(Integer count, Integer startIndex, String fields, String sortBy, String startDate, String endDate, String type, String userToken, String businessToken, String actingUserToken, String cardToken, String merchantToken, String campaignToken, String state, String version, Boolean verbose, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("count", count));
        if (startIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_index", startIndex));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (userToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("user_token", userToken));
        if (businessToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("business_token", businessToken));
        if (actingUserToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("acting_user_token", actingUserToken));
        if (cardToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("card_token", cardToken));
        if (merchantToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("merchant_token", merchantToken));
        if (campaignToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("campaign_token", campaignToken));
        if (state != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("state", state));
        if (version != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("version", version));
        if (verbose != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("verbose", verbose));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTransactionsValidateBeforeCall(Integer count, Integer startIndex, String fields, String sortBy, String startDate, String endDate, String type, String userToken, String businessToken, String actingUserToken, String cardToken, String merchantToken, String campaignToken, String state, String version, Boolean verbose, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getTransactionsCall(count, startIndex, fields, sortBy, startDate, endDate, type, userToken, businessToken, actingUserToken, cardToken, merchantToken, campaignToken, state, version, verbose, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns transactions
     * 
     * @param count Number of transactions to retrieve (optional, default to 10)
     * @param startIndex Start index (optional, default to 0)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @param sortBy Sort order (optional, default to -user_transaction_time)
     * @param startDate Start date (yyyy-MM-dd | yyyy-MM-ddTHH:mm:ss.SS) (optional)
     * @param endDate End date (yyyy-MM-dd | yyyy-MM-ddTHH:mm:ss.SS) (optional)
     * @param type Comma-delimited list of transaction types to include (optional)
     * @param userToken User token (optional)
     * @param businessToken Business token (optional)
     * @param actingUserToken Acting user token (optional)
     * @param cardToken Card token (optional)
     * @param merchantToken Merchant token (optional)
     * @param campaignToken Campaign token (optional)
     * @param state Comma-delimited list of transaction states to display e.g. PENDING | CLEARED | COMPLETION | DECLINED | ERROR | ALL (optional, default to PENDING,COMPLETION)
     * @param version  (optional)
     * @param verbose  (optional)
     * @return TransactionModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransactionModel getTransactions(Integer count, Integer startIndex, String fields, String sortBy, String startDate, String endDate, String type, String userToken, String businessToken, String actingUserToken, String cardToken, String merchantToken, String campaignToken, String state, String version, Boolean verbose) throws ApiException {
        ApiResponse<TransactionModel> resp = getTransactionsWithHttpInfo(count, startIndex, fields, sortBy, startDate, endDate, type, userToken, businessToken, actingUserToken, cardToken, merchantToken, campaignToken, state, version, verbose);
        return resp.getData();
    }

    /**
     * Returns transactions
     * 
     * @param count Number of transactions to retrieve (optional, default to 10)
     * @param startIndex Start index (optional, default to 0)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @param sortBy Sort order (optional, default to -user_transaction_time)
     * @param startDate Start date (yyyy-MM-dd | yyyy-MM-ddTHH:mm:ss.SS) (optional)
     * @param endDate End date (yyyy-MM-dd | yyyy-MM-ddTHH:mm:ss.SS) (optional)
     * @param type Comma-delimited list of transaction types to include (optional)
     * @param userToken User token (optional)
     * @param businessToken Business token (optional)
     * @param actingUserToken Acting user token (optional)
     * @param cardToken Card token (optional)
     * @param merchantToken Merchant token (optional)
     * @param campaignToken Campaign token (optional)
     * @param state Comma-delimited list of transaction states to display e.g. PENDING | CLEARED | COMPLETION | DECLINED | ERROR | ALL (optional, default to PENDING,COMPLETION)
     * @param version  (optional)
     * @param verbose  (optional)
     * @return ApiResponse&lt;TransactionModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransactionModel> getTransactionsWithHttpInfo(Integer count, Integer startIndex, String fields, String sortBy, String startDate, String endDate, String type, String userToken, String businessToken, String actingUserToken, String cardToken, String merchantToken, String campaignToken, String state, String version, Boolean verbose) throws ApiException {
        com.squareup.okhttp.Call call = getTransactionsValidateBeforeCall(count, startIndex, fields, sortBy, startDate, endDate, type, userToken, businessToken, actingUserToken, cardToken, merchantToken, campaignToken, state, version, verbose, null, null);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns transactions (asynchronously)
     * 
     * @param count Number of transactions to retrieve (optional, default to 10)
     * @param startIndex Start index (optional, default to 0)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @param sortBy Sort order (optional, default to -user_transaction_time)
     * @param startDate Start date (yyyy-MM-dd | yyyy-MM-ddTHH:mm:ss.SS) (optional)
     * @param endDate End date (yyyy-MM-dd | yyyy-MM-ddTHH:mm:ss.SS) (optional)
     * @param type Comma-delimited list of transaction types to include (optional)
     * @param userToken User token (optional)
     * @param businessToken Business token (optional)
     * @param actingUserToken Acting user token (optional)
     * @param cardToken Card token (optional)
     * @param merchantToken Merchant token (optional)
     * @param campaignToken Campaign token (optional)
     * @param state Comma-delimited list of transaction states to display e.g. PENDING | CLEARED | COMPLETION | DECLINED | ERROR | ALL (optional, default to PENDING,COMPLETION)
     * @param version  (optional)
     * @param verbose  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTransactionsAsync(Integer count, Integer startIndex, String fields, String sortBy, String startDate, String endDate, String type, String userToken, String businessToken, String actingUserToken, String cardToken, String merchantToken, String campaignToken, String state, String version, Boolean verbose, final ApiCallback<TransactionModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTransactionsValidateBeforeCall(count, startIndex, fields, sortBy, startDate, endDate, type, userToken, businessToken, actingUserToken, cardToken, merchantToken, campaignToken, state, version, verbose, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTransactionsFundingsourceFundingsourcetoken
     * @param fundingSourceToken Funding account token (required)
     * @param count Number of transactions to retrieve (optional, default to 10)
     * @param startIndex Start index (optional, default to 0)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @param sortBy Sort order (optional, default to -user_transaction_time)
     * @param startDate Start date (yyyy-MM-dd) (optional)
     * @param endDate End date (yyyy-MM-dd) (optional)
     * @param type Comma-delimited list of transaction types to include (optional)
     * @param polarity Type of transactions to retrieve: CREDIT or DEBIT (optional)
     * @param version  (optional)
     * @param verbose  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTransactionsFundingsourceFundingsourcetokenCall(String fundingSourceToken, Integer count, Integer startIndex, String fields, String sortBy, String startDate, String endDate, String type, String polarity, String version, Boolean verbose, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transactions/fundingsource/{funding_source_token}"
            .replaceAll("\\{" + "funding_source_token" + "\\}", apiClient.escapeString(fundingSourceToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("count", count));
        if (startIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_index", startIndex));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (polarity != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("polarity", polarity));
        if (version != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("version", version));
        if (verbose != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("verbose", verbose));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTransactionsFundingsourceFundingsourcetokenValidateBeforeCall(String fundingSourceToken, Integer count, Integer startIndex, String fields, String sortBy, String startDate, String endDate, String type, String polarity, String version, Boolean verbose, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fundingSourceToken' is set
        if (fundingSourceToken == null) {
            throw new ApiException("Missing the required parameter 'fundingSourceToken' when calling getTransactionsFundingsourceFundingsourcetoken(Async)");
        }
        

        com.squareup.okhttp.Call call = getTransactionsFundingsourceFundingsourcetokenCall(fundingSourceToken, count, startIndex, fields, sortBy, startDate, endDate, type, polarity, version, verbose, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns transactions for a specific funding account
     * 
     * @param fundingSourceToken Funding account token (required)
     * @param count Number of transactions to retrieve (optional, default to 10)
     * @param startIndex Start index (optional, default to 0)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @param sortBy Sort order (optional, default to -user_transaction_time)
     * @param startDate Start date (yyyy-MM-dd) (optional)
     * @param endDate End date (yyyy-MM-dd) (optional)
     * @param type Comma-delimited list of transaction types to include (optional)
     * @param polarity Type of transactions to retrieve: CREDIT or DEBIT (optional)
     * @param version  (optional)
     * @param verbose  (optional)
     * @return TransactionModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransactionModel getTransactionsFundingsourceFundingsourcetoken(String fundingSourceToken, Integer count, Integer startIndex, String fields, String sortBy, String startDate, String endDate, String type, String polarity, String version, Boolean verbose) throws ApiException {
        ApiResponse<TransactionModel> resp = getTransactionsFundingsourceFundingsourcetokenWithHttpInfo(fundingSourceToken, count, startIndex, fields, sortBy, startDate, endDate, type, polarity, version, verbose);
        return resp.getData();
    }

    /**
     * Returns transactions for a specific funding account
     * 
     * @param fundingSourceToken Funding account token (required)
     * @param count Number of transactions to retrieve (optional, default to 10)
     * @param startIndex Start index (optional, default to 0)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @param sortBy Sort order (optional, default to -user_transaction_time)
     * @param startDate Start date (yyyy-MM-dd) (optional)
     * @param endDate End date (yyyy-MM-dd) (optional)
     * @param type Comma-delimited list of transaction types to include (optional)
     * @param polarity Type of transactions to retrieve: CREDIT or DEBIT (optional)
     * @param version  (optional)
     * @param verbose  (optional)
     * @return ApiResponse&lt;TransactionModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransactionModel> getTransactionsFundingsourceFundingsourcetokenWithHttpInfo(String fundingSourceToken, Integer count, Integer startIndex, String fields, String sortBy, String startDate, String endDate, String type, String polarity, String version, Boolean verbose) throws ApiException {
        com.squareup.okhttp.Call call = getTransactionsFundingsourceFundingsourcetokenValidateBeforeCall(fundingSourceToken, count, startIndex, fields, sortBy, startDate, endDate, type, polarity, version, verbose, null, null);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns transactions for a specific funding account (asynchronously)
     * 
     * @param fundingSourceToken Funding account token (required)
     * @param count Number of transactions to retrieve (optional, default to 10)
     * @param startIndex Start index (optional, default to 0)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @param sortBy Sort order (optional, default to -user_transaction_time)
     * @param startDate Start date (yyyy-MM-dd) (optional)
     * @param endDate End date (yyyy-MM-dd) (optional)
     * @param type Comma-delimited list of transaction types to include (optional)
     * @param polarity Type of transactions to retrieve: CREDIT or DEBIT (optional)
     * @param version  (optional)
     * @param verbose  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTransactionsFundingsourceFundingsourcetokenAsync(String fundingSourceToken, Integer count, Integer startIndex, String fields, String sortBy, String startDate, String endDate, String type, String polarity, String version, Boolean verbose, final ApiCallback<TransactionModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTransactionsFundingsourceFundingsourcetokenValidateBeforeCall(fundingSourceToken, count, startIndex, fields, sortBy, startDate, endDate, type, polarity, version, verbose, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTransactionsToken
     * @param token Transaction token (required)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @param version  (optional)
     * @param verbose  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTransactionsTokenCall(String token, String fields, String version, Boolean verbose, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transactions/{token}"
            .replaceAll("\\{" + "token" + "\\}", apiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));
        if (version != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("version", version));
        if (verbose != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("verbose", verbose));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTransactionsTokenValidateBeforeCall(String token, String fields, String version, Boolean verbose, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getTransactionsToken(Async)");
        }
        

        com.squareup.okhttp.Call call = getTransactionsTokenCall(token, fields, version, verbose, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns a transaction
     * 
     * @param token Transaction token (required)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @param version  (optional)
     * @param verbose  (optional)
     * @return TransactionModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransactionModel getTransactionsToken(String token, String fields, String version, Boolean verbose) throws ApiException {
        ApiResponse<TransactionModel> resp = getTransactionsTokenWithHttpInfo(token, fields, version, verbose);
        return resp.getData();
    }

    /**
     * Returns a transaction
     * 
     * @param token Transaction token (required)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @param version  (optional)
     * @param verbose  (optional)
     * @return ApiResponse&lt;TransactionModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransactionModel> getTransactionsTokenWithHttpInfo(String token, String fields, String version, Boolean verbose) throws ApiException {
        com.squareup.okhttp.Call call = getTransactionsTokenValidateBeforeCall(token, fields, version, verbose, null, null);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a transaction (asynchronously)
     * 
     * @param token Transaction token (required)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @param version  (optional)
     * @param verbose  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTransactionsTokenAsync(String token, String fields, String version, Boolean verbose, final ApiCallback<TransactionModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTransactionsTokenValidateBeforeCall(token, fields, version, verbose, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTransactionsTokenRelated
     * @param token Transaction token (required)
     * @param count Number of transactions to retrieve (optional, default to 10)
     * @param startIndex Start index (optional, default to 0)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @param sortBy Sort order (optional, default to -user_transaction_time)
     * @param startDate Start date (yyyy-MM-dd | yyyy-MM-ddTHH:mm:ss.SS) (optional)
     * @param endDate End date (yyyy-MM-dd | yyyy-MM-ddTHH:mm:ss.SS) (optional)
     * @param type Comma-delimited list of transaction types to include (optional)
     * @param state Comma-delimited list of transaction states to display e.g. PENDING | CLEARED | COMPLETION | ALL (optional, default to ALL)
     * @param version  (optional)
     * @param verbose  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTransactionsTokenRelatedCall(String token, Integer count, Integer startIndex, String fields, String sortBy, String startDate, String endDate, String type, String state, String version, Boolean verbose, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transactions/{token}/related"
            .replaceAll("\\{" + "token" + "\\}", apiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("count", count));
        if (startIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_index", startIndex));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (state != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("state", state));
        if (version != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("version", version));
        if (verbose != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("verbose", verbose));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTransactionsTokenRelatedValidateBeforeCall(String token, Integer count, Integer startIndex, String fields, String sortBy, String startDate, String endDate, String type, String state, String version, Boolean verbose, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getTransactionsTokenRelated(Async)");
        }
        

        com.squareup.okhttp.Call call = getTransactionsTokenRelatedCall(token, count, startIndex, fields, sortBy, startDate, endDate, type, state, version, verbose, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns related transactions
     * 
     * @param token Transaction token (required)
     * @param count Number of transactions to retrieve (optional, default to 10)
     * @param startIndex Start index (optional, default to 0)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @param sortBy Sort order (optional, default to -user_transaction_time)
     * @param startDate Start date (yyyy-MM-dd | yyyy-MM-ddTHH:mm:ss.SS) (optional)
     * @param endDate End date (yyyy-MM-dd | yyyy-MM-ddTHH:mm:ss.SS) (optional)
     * @param type Comma-delimited list of transaction types to include (optional)
     * @param state Comma-delimited list of transaction states to display e.g. PENDING | CLEARED | COMPLETION | ALL (optional, default to ALL)
     * @param version  (optional)
     * @param verbose  (optional)
     * @return TransactionModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransactionModel getTransactionsTokenRelated(String token, Integer count, Integer startIndex, String fields, String sortBy, String startDate, String endDate, String type, String state, String version, Boolean verbose) throws ApiException {
        ApiResponse<TransactionModel> resp = getTransactionsTokenRelatedWithHttpInfo(token, count, startIndex, fields, sortBy, startDate, endDate, type, state, version, verbose);
        return resp.getData();
    }

    /**
     * Returns related transactions
     * 
     * @param token Transaction token (required)
     * @param count Number of transactions to retrieve (optional, default to 10)
     * @param startIndex Start index (optional, default to 0)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @param sortBy Sort order (optional, default to -user_transaction_time)
     * @param startDate Start date (yyyy-MM-dd | yyyy-MM-ddTHH:mm:ss.SS) (optional)
     * @param endDate End date (yyyy-MM-dd | yyyy-MM-ddTHH:mm:ss.SS) (optional)
     * @param type Comma-delimited list of transaction types to include (optional)
     * @param state Comma-delimited list of transaction states to display e.g. PENDING | CLEARED | COMPLETION | ALL (optional, default to ALL)
     * @param version  (optional)
     * @param verbose  (optional)
     * @return ApiResponse&lt;TransactionModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransactionModel> getTransactionsTokenRelatedWithHttpInfo(String token, Integer count, Integer startIndex, String fields, String sortBy, String startDate, String endDate, String type, String state, String version, Boolean verbose) throws ApiException {
        com.squareup.okhttp.Call call = getTransactionsTokenRelatedValidateBeforeCall(token, count, startIndex, fields, sortBy, startDate, endDate, type, state, version, verbose, null, null);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns related transactions (asynchronously)
     * 
     * @param token Transaction token (required)
     * @param count Number of transactions to retrieve (optional, default to 10)
     * @param startIndex Start index (optional, default to 0)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @param sortBy Sort order (optional, default to -user_transaction_time)
     * @param startDate Start date (yyyy-MM-dd | yyyy-MM-ddTHH:mm:ss.SS) (optional)
     * @param endDate End date (yyyy-MM-dd | yyyy-MM-ddTHH:mm:ss.SS) (optional)
     * @param type Comma-delimited list of transaction types to include (optional)
     * @param state Comma-delimited list of transaction states to display e.g. PENDING | CLEARED | COMPLETION | ALL (optional, default to ALL)
     * @param version  (optional)
     * @param verbose  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTransactionsTokenRelatedAsync(String token, Integer count, Integer startIndex, String fields, String sortBy, String startDate, String endDate, String type, String state, String version, Boolean verbose, final ApiCallback<TransactionModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTransactionsTokenRelatedValidateBeforeCall(token, count, startIndex, fields, sortBy, startDate, endDate, type, state, version, verbose, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TransactionModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
