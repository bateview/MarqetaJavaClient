/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.VelocityControlBalanceResponse;
import io.swagger.client.model.VelocityControlListResponse;
import io.swagger.client.model.VelocityControlRequest;
import io.swagger.client.model.VelocityControlResponse;
import io.swagger.client.model.VelocityControlUpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VelocityControlsApi {
    private ApiClient apiClient;

    public VelocityControlsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VelocityControlsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getVelocitycontrols
     * @param cardProduct Card product token. Use \&quot;null\&quot; to get velocity controls that are not associated with any card product. (optional)
     * @param user User token. Use \&quot;null\&quot; to get velocity controls that are not associated with any user. (optional)
     * @param count Number of items to retrieve. Count can be between 1 - 10 items. (optional, default to 5)
     * @param startIndex Indicates from what row to start returning data. (optional, default to 0)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @param sortBy Field by which to sort the returned items. Use any field in the model, or system fields lastModifiedTime or createdTime. (optional, default to -lastModifiedTime)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVelocitycontrolsCall(String cardProduct, String user, Integer count, Integer startIndex, String fields, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/velocitycontrols";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cardProduct != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("card_product", cardProduct));
        if (user != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("user", user));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("count", count));
        if (startIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_index", startIndex));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVelocitycontrolsValidateBeforeCall(String cardProduct, String user, Integer count, Integer startIndex, String fields, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getVelocitycontrolsCall(cardProduct, user, count, startIndex, fields, sortBy, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Queries velocity controls
     * 
     * @param cardProduct Card product token. Use \&quot;null\&quot; to get velocity controls that are not associated with any card product. (optional)
     * @param user User token. Use \&quot;null\&quot; to get velocity controls that are not associated with any user. (optional)
     * @param count Number of items to retrieve. Count can be between 1 - 10 items. (optional, default to 5)
     * @param startIndex Indicates from what row to start returning data. (optional, default to 0)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @param sortBy Field by which to sort the returned items. Use any field in the model, or system fields lastModifiedTime or createdTime. (optional, default to -lastModifiedTime)
     * @return VelocityControlListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VelocityControlListResponse getVelocitycontrols(String cardProduct, String user, Integer count, Integer startIndex, String fields, String sortBy) throws ApiException {
        ApiResponse<VelocityControlListResponse> resp = getVelocitycontrolsWithHttpInfo(cardProduct, user, count, startIndex, fields, sortBy);
        return resp.getData();
    }

    /**
     * Queries velocity controls
     * 
     * @param cardProduct Card product token. Use \&quot;null\&quot; to get velocity controls that are not associated with any card product. (optional)
     * @param user User token. Use \&quot;null\&quot; to get velocity controls that are not associated with any user. (optional)
     * @param count Number of items to retrieve. Count can be between 1 - 10 items. (optional, default to 5)
     * @param startIndex Indicates from what row to start returning data. (optional, default to 0)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @param sortBy Field by which to sort the returned items. Use any field in the model, or system fields lastModifiedTime or createdTime. (optional, default to -lastModifiedTime)
     * @return ApiResponse&lt;VelocityControlListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VelocityControlListResponse> getVelocitycontrolsWithHttpInfo(String cardProduct, String user, Integer count, Integer startIndex, String fields, String sortBy) throws ApiException {
        com.squareup.okhttp.Call call = getVelocitycontrolsValidateBeforeCall(cardProduct, user, count, startIndex, fields, sortBy, null, null);
        Type localVarReturnType = new TypeToken<VelocityControlListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Queries velocity controls (asynchronously)
     * 
     * @param cardProduct Card product token. Use \&quot;null\&quot; to get velocity controls that are not associated with any card product. (optional)
     * @param user User token. Use \&quot;null\&quot; to get velocity controls that are not associated with any user. (optional)
     * @param count Number of items to retrieve. Count can be between 1 - 10 items. (optional, default to 5)
     * @param startIndex Indicates from what row to start returning data. (optional, default to 0)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @param sortBy Field by which to sort the returned items. Use any field in the model, or system fields lastModifiedTime or createdTime. (optional, default to -lastModifiedTime)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVelocitycontrolsAsync(String cardProduct, String user, Integer count, Integer startIndex, String fields, String sortBy, final ApiCallback<VelocityControlListResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVelocitycontrolsValidateBeforeCall(cardProduct, user, count, startIndex, fields, sortBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VelocityControlListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getVelocitycontrolsToken
     * @param token Velocity control token (required)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVelocitycontrolsTokenCall(String token, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/velocitycontrols/{token}"
            .replaceAll("\\{" + "token" + "\\}", apiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVelocitycontrolsTokenValidateBeforeCall(String token, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getVelocitycontrolsToken(Async)");
        }
        

        com.squareup.okhttp.Call call = getVelocitycontrolsTokenCall(token, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns a specific velocity control
     * 
     * @param token Velocity control token (required)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @return VelocityControlResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VelocityControlResponse getVelocitycontrolsToken(String token, String fields) throws ApiException {
        ApiResponse<VelocityControlResponse> resp = getVelocitycontrolsTokenWithHttpInfo(token, fields);
        return resp.getData();
    }

    /**
     * Returns a specific velocity control
     * 
     * @param token Velocity control token (required)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @return ApiResponse&lt;VelocityControlResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VelocityControlResponse> getVelocitycontrolsTokenWithHttpInfo(String token, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getVelocitycontrolsTokenValidateBeforeCall(token, fields, null, null);
        Type localVarReturnType = new TypeToken<VelocityControlResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a specific velocity control (asynchronously)
     * 
     * @param token Velocity control token (required)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVelocitycontrolsTokenAsync(String token, String fields, final ApiCallback<VelocityControlResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVelocitycontrolsTokenValidateBeforeCall(token, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VelocityControlResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getVelocitycontrolsUserUsertokenAvailable
     * @param userToken User token (required)
     * @param count Number of items to retrieve. Count can be between 1 - 10 items. (optional, default to 5)
     * @param startIndex Indicates from what row to start returning data. (optional, default to 0)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @param sortBy Field by which to sort the returned items. Use any field in the model, or system fields lastModifiedTime or createdTime. (optional, default to -lastModifiedTime)
     * @param forceDto  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVelocitycontrolsUserUsertokenAvailableCall(String userToken, Integer count, Integer startIndex, String fields, String sortBy, String forceDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/velocitycontrols/user/{user_token}/available"
            .replaceAll("\\{" + "user_token" + "\\}", apiClient.escapeString(userToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("count", count));
        if (startIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_index", startIndex));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));
        if (forceDto != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force_dto", forceDto));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVelocitycontrolsUserUsertokenAvailableValidateBeforeCall(String userToken, Integer count, Integer startIndex, String fields, String sortBy, String forceDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userToken' is set
        if (userToken == null) {
            throw new ApiException("Missing the required parameter 'userToken' when calling getVelocitycontrolsUserUsertokenAvailable(Async)");
        }
        

        com.squareup.okhttp.Call call = getVelocitycontrolsUserUsertokenAvailableCall(userToken, count, startIndex, fields, sortBy, forceDto, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Queries a user&#39;s velocity control balances
     * 
     * @param userToken User token (required)
     * @param count Number of items to retrieve. Count can be between 1 - 10 items. (optional, default to 5)
     * @param startIndex Indicates from what row to start returning data. (optional, default to 0)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @param sortBy Field by which to sort the returned items. Use any field in the model, or system fields lastModifiedTime or createdTime. (optional, default to -lastModifiedTime)
     * @param forceDto  (optional)
     * @return VelocityControlBalanceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VelocityControlBalanceResponse getVelocitycontrolsUserUsertokenAvailable(String userToken, Integer count, Integer startIndex, String fields, String sortBy, String forceDto) throws ApiException {
        ApiResponse<VelocityControlBalanceResponse> resp = getVelocitycontrolsUserUsertokenAvailableWithHttpInfo(userToken, count, startIndex, fields, sortBy, forceDto);
        return resp.getData();
    }

    /**
     * Queries a user&#39;s velocity control balances
     * 
     * @param userToken User token (required)
     * @param count Number of items to retrieve. Count can be between 1 - 10 items. (optional, default to 5)
     * @param startIndex Indicates from what row to start returning data. (optional, default to 0)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @param sortBy Field by which to sort the returned items. Use any field in the model, or system fields lastModifiedTime or createdTime. (optional, default to -lastModifiedTime)
     * @param forceDto  (optional)
     * @return ApiResponse&lt;VelocityControlBalanceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VelocityControlBalanceResponse> getVelocitycontrolsUserUsertokenAvailableWithHttpInfo(String userToken, Integer count, Integer startIndex, String fields, String sortBy, String forceDto) throws ApiException {
        com.squareup.okhttp.Call call = getVelocitycontrolsUserUsertokenAvailableValidateBeforeCall(userToken, count, startIndex, fields, sortBy, forceDto, null, null);
        Type localVarReturnType = new TypeToken<VelocityControlBalanceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Queries a user&#39;s velocity control balances (asynchronously)
     * 
     * @param userToken User token (required)
     * @param count Number of items to retrieve. Count can be between 1 - 10 items. (optional, default to 5)
     * @param startIndex Indicates from what row to start returning data. (optional, default to 0)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @param sortBy Field by which to sort the returned items. Use any field in the model, or system fields lastModifiedTime or createdTime. (optional, default to -lastModifiedTime)
     * @param forceDto  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVelocitycontrolsUserUsertokenAvailableAsync(String userToken, Integer count, Integer startIndex, String fields, String sortBy, String forceDto, final ApiCallback<VelocityControlBalanceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVelocitycontrolsUserUsertokenAvailableValidateBeforeCall(userToken, count, startIndex, fields, sortBy, forceDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VelocityControlBalanceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postVelocitycontrols
     * @param body Velocity control object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postVelocitycontrolsCall(VelocityControlRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/velocitycontrols";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postVelocitycontrolsValidateBeforeCall(VelocityControlRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postVelocitycontrols(Async)");
        }
        

        com.squareup.okhttp.Call call = postVelocitycontrolsCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates a velocity control
     * 
     * @param body Velocity control object (required)
     * @return VelocityControlResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VelocityControlResponse postVelocitycontrols(VelocityControlRequest body) throws ApiException {
        ApiResponse<VelocityControlResponse> resp = postVelocitycontrolsWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Creates a velocity control
     * 
     * @param body Velocity control object (required)
     * @return ApiResponse&lt;VelocityControlResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VelocityControlResponse> postVelocitycontrolsWithHttpInfo(VelocityControlRequest body) throws ApiException {
        com.squareup.okhttp.Call call = postVelocitycontrolsValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<VelocityControlResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a velocity control (asynchronously)
     * 
     * @param body Velocity control object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postVelocitycontrolsAsync(VelocityControlRequest body, final ApiCallback<VelocityControlResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postVelocitycontrolsValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VelocityControlResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putVelocitycontrolsToken
     * @param token Velocity control token (required)
     * @param body Velocity control object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putVelocitycontrolsTokenCall(String token, VelocityControlUpdateRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/velocitycontrols/{token}"
            .replaceAll("\\{" + "token" + "\\}", apiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putVelocitycontrolsTokenValidateBeforeCall(String token, VelocityControlUpdateRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling putVelocitycontrolsToken(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putVelocitycontrolsToken(Async)");
        }
        

        com.squareup.okhttp.Call call = putVelocitycontrolsTokenCall(token, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates a specific velocity control
     * 
     * @param token Velocity control token (required)
     * @param body Velocity control object (required)
     * @return VelocityControlResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VelocityControlResponse putVelocitycontrolsToken(String token, VelocityControlUpdateRequest body) throws ApiException {
        ApiResponse<VelocityControlResponse> resp = putVelocitycontrolsTokenWithHttpInfo(token, body);
        return resp.getData();
    }

    /**
     * Updates a specific velocity control
     * 
     * @param token Velocity control token (required)
     * @param body Velocity control object (required)
     * @return ApiResponse&lt;VelocityControlResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VelocityControlResponse> putVelocitycontrolsTokenWithHttpInfo(String token, VelocityControlUpdateRequest body) throws ApiException {
        com.squareup.okhttp.Call call = putVelocitycontrolsTokenValidateBeforeCall(token, body, null, null);
        Type localVarReturnType = new TypeToken<VelocityControlResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a specific velocity control (asynchronously)
     * 
     * @param token Velocity control token (required)
     * @param body Velocity control object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putVelocitycontrolsTokenAsync(String token, VelocityControlUpdateRequest body, final ApiCallback<VelocityControlResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putVelocitycontrolsTokenValidateBeforeCall(token, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VelocityControlResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
