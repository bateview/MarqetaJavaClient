/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.MCCGroupListResponse;
import io.swagger.client.model.MccGroupModel;
import io.swagger.client.model.MccGroupUpdateModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MccGroupsApi {
    private ApiClient apiClient;

    public MccGroupsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MccGroupsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getMccgroups
     * @param mcc MCC (optional)
     * @param count Number of items to retrieve. Count can be between 1 - 10 items. (optional, default to 10)
     * @param startIndex Indicates from what row to start returning data. (optional, default to 0)
     * @param sortBy Field by which to sort the returned items. Use any field in the model, or system fields lastModifiedTime or createdTime. (optional, default to -lastModifiedTime)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMccgroupsCall(String mcc, Integer count, Integer startIndex, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mccgroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (mcc != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mcc", mcc));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("count", count));
        if (startIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_index", startIndex));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMccgroupsValidateBeforeCall(String mcc, Integer count, Integer startIndex, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getMccgroupsCall(mcc, count, startIndex, sortBy, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lists all MCC groups
     * 
     * @param mcc MCC (optional)
     * @param count Number of items to retrieve. Count can be between 1 - 10 items. (optional, default to 10)
     * @param startIndex Indicates from what row to start returning data. (optional, default to 0)
     * @param sortBy Field by which to sort the returned items. Use any field in the model, or system fields lastModifiedTime or createdTime. (optional, default to -lastModifiedTime)
     * @return MCCGroupListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MCCGroupListResponse getMccgroups(String mcc, Integer count, Integer startIndex, String sortBy) throws ApiException {
        ApiResponse<MCCGroupListResponse> resp = getMccgroupsWithHttpInfo(mcc, count, startIndex, sortBy);
        return resp.getData();
    }

    /**
     * Lists all MCC groups
     * 
     * @param mcc MCC (optional)
     * @param count Number of items to retrieve. Count can be between 1 - 10 items. (optional, default to 10)
     * @param startIndex Indicates from what row to start returning data. (optional, default to 0)
     * @param sortBy Field by which to sort the returned items. Use any field in the model, or system fields lastModifiedTime or createdTime. (optional, default to -lastModifiedTime)
     * @return ApiResponse&lt;MCCGroupListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MCCGroupListResponse> getMccgroupsWithHttpInfo(String mcc, Integer count, Integer startIndex, String sortBy) throws ApiException {
        com.squareup.okhttp.Call call = getMccgroupsValidateBeforeCall(mcc, count, startIndex, sortBy, null, null);
        Type localVarReturnType = new TypeToken<MCCGroupListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists all MCC groups (asynchronously)
     * 
     * @param mcc MCC (optional)
     * @param count Number of items to retrieve. Count can be between 1 - 10 items. (optional, default to 10)
     * @param startIndex Indicates from what row to start returning data. (optional, default to 0)
     * @param sortBy Field by which to sort the returned items. Use any field in the model, or system fields lastModifiedTime or createdTime. (optional, default to -lastModifiedTime)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMccgroupsAsync(String mcc, Integer count, Integer startIndex, String sortBy, final ApiCallback<MCCGroupListResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMccgroupsValidateBeforeCall(mcc, count, startIndex, sortBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MCCGroupListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMccgroupsToken
     * @param token MCC group token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMccgroupsTokenCall(String token, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mccgroups/{token}"
            .replaceAll("\\{" + "token" + "\\}", apiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMccgroupsTokenValidateBeforeCall(String token, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getMccgroupsToken(Async)");
        }
        

        com.squareup.okhttp.Call call = getMccgroupsTokenCall(token, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns a specific MCC group
     * 
     * @param token MCC group token (required)
     * @return MccGroupModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MccGroupModel getMccgroupsToken(String token) throws ApiException {
        ApiResponse<MccGroupModel> resp = getMccgroupsTokenWithHttpInfo(token);
        return resp.getData();
    }

    /**
     * Returns a specific MCC group
     * 
     * @param token MCC group token (required)
     * @return ApiResponse&lt;MccGroupModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MccGroupModel> getMccgroupsTokenWithHttpInfo(String token) throws ApiException {
        com.squareup.okhttp.Call call = getMccgroupsTokenValidateBeforeCall(token, null, null);
        Type localVarReturnType = new TypeToken<MccGroupModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a specific MCC group (asynchronously)
     * 
     * @param token MCC group token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMccgroupsTokenAsync(String token, final ApiCallback<MccGroupModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMccgroupsTokenValidateBeforeCall(token, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MccGroupModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postMccgroups
     * @param body MCC group (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postMccgroupsCall(MccGroupModel body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/mccgroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postMccgroupsValidateBeforeCall(MccGroupModel body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postMccgroups(Async)");
        }
        

        com.squareup.okhttp.Call call = postMccgroupsCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates an MCC group
     * 
     * @param body MCC group (required)
     * @return MccGroupModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MccGroupModel postMccgroups(MccGroupModel body) throws ApiException {
        ApiResponse<MccGroupModel> resp = postMccgroupsWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Creates an MCC group
     * 
     * @param body MCC group (required)
     * @return ApiResponse&lt;MccGroupModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MccGroupModel> postMccgroupsWithHttpInfo(MccGroupModel body) throws ApiException {
        com.squareup.okhttp.Call call = postMccgroupsValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<MccGroupModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates an MCC group (asynchronously)
     * 
     * @param body MCC group (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postMccgroupsAsync(MccGroupModel body, final ApiCallback<MccGroupModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postMccgroupsValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MccGroupModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putMccgroupsToken
     * @param body MCC group (required)
     * @param token  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putMccgroupsTokenCall(MccGroupUpdateModel body, String token, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/mccgroups/{token}"
            .replaceAll("\\{" + "token" + "\\}", apiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putMccgroupsTokenValidateBeforeCall(MccGroupUpdateModel body, String token, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putMccgroupsToken(Async)");
        }
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling putMccgroupsToken(Async)");
        }
        

        com.squareup.okhttp.Call call = putMccgroupsTokenCall(body, token, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates an MCC group
     * 
     * @param body MCC group (required)
     * @param token  (required)
     * @return MccGroupUpdateModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MccGroupUpdateModel putMccgroupsToken(MccGroupUpdateModel body, String token) throws ApiException {
        ApiResponse<MccGroupUpdateModel> resp = putMccgroupsTokenWithHttpInfo(body, token);
        return resp.getData();
    }

    /**
     * Updates an MCC group
     * 
     * @param body MCC group (required)
     * @param token  (required)
     * @return ApiResponse&lt;MccGroupUpdateModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MccGroupUpdateModel> putMccgroupsTokenWithHttpInfo(MccGroupUpdateModel body, String token) throws ApiException {
        com.squareup.okhttp.Call call = putMccgroupsTokenValidateBeforeCall(body, token, null, null);
        Type localVarReturnType = new TypeToken<MccGroupUpdateModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates an MCC group (asynchronously)
     * 
     * @param body MCC group (required)
     * @param token  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putMccgroupsTokenAsync(MccGroupUpdateModel body, String token, final ApiCallback<MccGroupUpdateModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putMccgroupsTokenValidateBeforeCall(body, token, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MccGroupUpdateModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
