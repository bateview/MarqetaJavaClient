/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AchModel;
import io.swagger.client.model.AchResponseModel;
import io.swagger.client.model.AchVerificationModel;
import io.swagger.client.model.BaseAchRequestModel;
import io.swagger.client.model.BaseAchResponseModel;
import io.swagger.client.model.CardHolderAddressModel;
import io.swagger.client.model.CardHolderAddressUpdateModel;
import io.swagger.client.model.CardholderAddressListResponse;
import io.swagger.client.model.CardholderAddressResponse;
import io.swagger.client.model.FundingAccountListResponse;
import io.swagger.client.model.GatewayProgramCustomHeaderUpdateRequest;
import io.swagger.client.model.GatewayProgramFundingSourceRequest;
import io.swagger.client.model.GatewayProgramFundingSourceResponse;
import io.swagger.client.model.GatewayProgramFundingSourceUpdateRequest;
import io.swagger.client.model.PaymentCardResponseModel;
import io.swagger.client.model.ProgramFundingSourceRequest;
import io.swagger.client.model.ProgramFundingSourceResponse;
import io.swagger.client.model.ProgramFundingSourceUpdateRequest;
import io.swagger.client.model.TokenRequest;
import io.swagger.client.model.TokenUpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FundingSourcesApi {
    private ApiClient apiClient;

    public FundingSourcesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FundingSourcesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getAllACHFundingSources
     * @param count Number of items to retrieve. Count can be between 1 - 10 items. (optional, default to 5)
     * @param startIndex Indicates from what row to start returning data. (optional, default to 0)
     * @param fields Comma delimited list of fields to return (e.g. field_1,field_2,..) (optional)
     * @param sortBy Sort order (optional, default to -lastModifiedTime)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllACHFundingSourcesCall(Integer count, Integer startIndex, String fields, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fundingsources/program/ach";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("count", count));
        if (startIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_index", startIndex));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllACHFundingSourcesValidateBeforeCall(Integer count, Integer startIndex, String fields, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAllACHFundingSourcesCall(count, startIndex, fields, sortBy, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns a list of Program ACH funding sources
     * 
     * @param count Number of items to retrieve. Count can be between 1 - 10 items. (optional, default to 5)
     * @param startIndex Indicates from what row to start returning data. (optional, default to 0)
     * @param fields Comma delimited list of fields to return (e.g. field_1,field_2,..) (optional)
     * @param sortBy Sort order (optional, default to -lastModifiedTime)
     * @return BaseAchResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseAchResponseModel getAllACHFundingSources(Integer count, Integer startIndex, String fields, String sortBy) throws ApiException {
        ApiResponse<BaseAchResponseModel> resp = getAllACHFundingSourcesWithHttpInfo(count, startIndex, fields, sortBy);
        return resp.getData();
    }

    /**
     * Returns a list of Program ACH funding sources
     * 
     * @param count Number of items to retrieve. Count can be between 1 - 10 items. (optional, default to 5)
     * @param startIndex Indicates from what row to start returning data. (optional, default to 0)
     * @param fields Comma delimited list of fields to return (e.g. field_1,field_2,..) (optional)
     * @param sortBy Sort order (optional, default to -lastModifiedTime)
     * @return ApiResponse&lt;BaseAchResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseAchResponseModel> getAllACHFundingSourcesWithHttpInfo(Integer count, Integer startIndex, String fields, String sortBy) throws ApiException {
        com.squareup.okhttp.Call call = getAllACHFundingSourcesValidateBeforeCall(count, startIndex, fields, sortBy, null, null);
        Type localVarReturnType = new TypeToken<BaseAchResponseModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a list of Program ACH funding sources (asynchronously)
     * 
     * @param count Number of items to retrieve. Count can be between 1 - 10 items. (optional, default to 5)
     * @param startIndex Indicates from what row to start returning data. (optional, default to 0)
     * @param fields Comma delimited list of fields to return (e.g. field_1,field_2,..) (optional)
     * @param sortBy Sort order (optional, default to -lastModifiedTime)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllACHFundingSourcesAsync(Integer count, Integer startIndex, String fields, String sortBy, final ApiCallback<BaseAchResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllACHFundingSourcesValidateBeforeCall(count, startIndex, fields, sortBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseAchResponseModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFundingsourcesAchFundingsourcetoken
     * @param fundingSourceToken Funding account token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFundingsourcesAchFundingsourcetokenCall(String fundingSourceToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fundingsources/ach/{funding_source_token}"
            .replaceAll("\\{" + "funding_source_token" + "\\}", apiClient.escapeString(fundingSourceToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFundingsourcesAchFundingsourcetokenValidateBeforeCall(String fundingSourceToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fundingSourceToken' is set
        if (fundingSourceToken == null) {
            throw new ApiException("Missing the required parameter 'fundingSourceToken' when calling getFundingsourcesAchFundingsourcetoken(Async)");
        }
        

        com.squareup.okhttp.Call call = getFundingsourcesAchFundingsourcetokenCall(fundingSourceToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns a user ACH account
     * 
     * @param fundingSourceToken Funding account token (required)
     * @return AchResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AchResponseModel getFundingsourcesAchFundingsourcetoken(String fundingSourceToken) throws ApiException {
        ApiResponse<AchResponseModel> resp = getFundingsourcesAchFundingsourcetokenWithHttpInfo(fundingSourceToken);
        return resp.getData();
    }

    /**
     * Returns a user ACH account
     * 
     * @param fundingSourceToken Funding account token (required)
     * @return ApiResponse&lt;AchResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AchResponseModel> getFundingsourcesAchFundingsourcetokenWithHttpInfo(String fundingSourceToken) throws ApiException {
        com.squareup.okhttp.Call call = getFundingsourcesAchFundingsourcetokenValidateBeforeCall(fundingSourceToken, null, null);
        Type localVarReturnType = new TypeToken<AchResponseModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a user ACH account (asynchronously)
     * 
     * @param fundingSourceToken Funding account token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFundingsourcesAchFundingsourcetokenAsync(String fundingSourceToken, final ApiCallback<AchResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFundingsourcesAchFundingsourcetokenValidateBeforeCall(fundingSourceToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AchResponseModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFundingsourcesAchFundingsourcetokenVerificationamounts
     * @param fundingSourceToken Funding account token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFundingsourcesAchFundingsourcetokenVerificationamountsCall(String fundingSourceToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fundingsources/ach/{funding_source_token}/verificationamounts"
            .replaceAll("\\{" + "funding_source_token" + "\\}", apiClient.escapeString(fundingSourceToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFundingsourcesAchFundingsourcetokenVerificationamountsValidateBeforeCall(String fundingSourceToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fundingSourceToken' is set
        if (fundingSourceToken == null) {
            throw new ApiException("Missing the required parameter 'fundingSourceToken' when calling getFundingsourcesAchFundingsourcetokenVerificationamounts(Async)");
        }
        

        com.squareup.okhttp.Call call = getFundingsourcesAchFundingsourcetokenVerificationamountsCall(fundingSourceToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns the dollar amounts used to verify the ACH account
     * 
     * @param fundingSourceToken Funding account token (required)
     * @return AchVerificationModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AchVerificationModel getFundingsourcesAchFundingsourcetokenVerificationamounts(String fundingSourceToken) throws ApiException {
        ApiResponse<AchVerificationModel> resp = getFundingsourcesAchFundingsourcetokenVerificationamountsWithHttpInfo(fundingSourceToken);
        return resp.getData();
    }

    /**
     * Returns the dollar amounts used to verify the ACH account
     * 
     * @param fundingSourceToken Funding account token (required)
     * @return ApiResponse&lt;AchVerificationModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AchVerificationModel> getFundingsourcesAchFundingsourcetokenVerificationamountsWithHttpInfo(String fundingSourceToken) throws ApiException {
        com.squareup.okhttp.Call call = getFundingsourcesAchFundingsourcetokenVerificationamountsValidateBeforeCall(fundingSourceToken, null, null);
        Type localVarReturnType = new TypeToken<AchVerificationModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns the dollar amounts used to verify the ACH account (asynchronously)
     * 
     * @param fundingSourceToken Funding account token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFundingsourcesAchFundingsourcetokenVerificationamountsAsync(String fundingSourceToken, final ApiCallback<AchVerificationModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFundingsourcesAchFundingsourcetokenVerificationamountsValidateBeforeCall(fundingSourceToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AchVerificationModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFundingsourcesAddressesBusinessBusinesstoken
     * @param businessToken Business token (required)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFundingsourcesAddressesBusinessBusinesstokenCall(String businessToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fundingsources/addresses/business/{business_token}"
            .replaceAll("\\{" + "business_token" + "\\}", apiClient.escapeString(businessToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFundingsourcesAddressesBusinessBusinesstokenValidateBeforeCall(String businessToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'businessToken' is set
        if (businessToken == null) {
            throw new ApiException("Missing the required parameter 'businessToken' when calling getFundingsourcesAddressesBusinessBusinesstoken(Async)");
        }
        

        com.squareup.okhttp.Call call = getFundingsourcesAddressesBusinessBusinesstokenCall(businessToken, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lists all addresses for a business
     * 
     * @param businessToken Business token (required)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @return CardholderAddressListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CardholderAddressListResponse getFundingsourcesAddressesBusinessBusinesstoken(String businessToken, String fields) throws ApiException {
        ApiResponse<CardholderAddressListResponse> resp = getFundingsourcesAddressesBusinessBusinesstokenWithHttpInfo(businessToken, fields);
        return resp.getData();
    }

    /**
     * Lists all addresses for a business
     * 
     * @param businessToken Business token (required)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @return ApiResponse&lt;CardholderAddressListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CardholderAddressListResponse> getFundingsourcesAddressesBusinessBusinesstokenWithHttpInfo(String businessToken, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getFundingsourcesAddressesBusinessBusinesstokenValidateBeforeCall(businessToken, fields, null, null);
        Type localVarReturnType = new TypeToken<CardholderAddressListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists all addresses for a business (asynchronously)
     * 
     * @param businessToken Business token (required)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFundingsourcesAddressesBusinessBusinesstokenAsync(String businessToken, String fields, final ApiCallback<CardholderAddressListResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFundingsourcesAddressesBusinessBusinesstokenValidateBeforeCall(businessToken, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CardholderAddressListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFundingsourcesAddressesFundingsourceaddresstoken
     * @param fundingSourceAddressToken Funding source address token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFundingsourcesAddressesFundingsourceaddresstokenCall(String fundingSourceAddressToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fundingsources/addresses/{funding_source_address_token}"
            .replaceAll("\\{" + "funding_source_address_token" + "\\}", apiClient.escapeString(fundingSourceAddressToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFundingsourcesAddressesFundingsourceaddresstokenValidateBeforeCall(String fundingSourceAddressToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fundingSourceAddressToken' is set
        if (fundingSourceAddressToken == null) {
            throw new ApiException("Missing the required parameter 'fundingSourceAddressToken' when calling getFundingsourcesAddressesFundingsourceaddresstoken(Async)");
        }
        

        com.squareup.okhttp.Call call = getFundingsourcesAddressesFundingsourceaddresstokenCall(fundingSourceAddressToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns a user address for a funding source
     * 
     * @param fundingSourceAddressToken Funding source address token (required)
     * @return CardholderAddressResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CardholderAddressResponse getFundingsourcesAddressesFundingsourceaddresstoken(String fundingSourceAddressToken) throws ApiException {
        ApiResponse<CardholderAddressResponse> resp = getFundingsourcesAddressesFundingsourceaddresstokenWithHttpInfo(fundingSourceAddressToken);
        return resp.getData();
    }

    /**
     * Returns a user address for a funding source
     * 
     * @param fundingSourceAddressToken Funding source address token (required)
     * @return ApiResponse&lt;CardholderAddressResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CardholderAddressResponse> getFundingsourcesAddressesFundingsourceaddresstokenWithHttpInfo(String fundingSourceAddressToken) throws ApiException {
        com.squareup.okhttp.Call call = getFundingsourcesAddressesFundingsourceaddresstokenValidateBeforeCall(fundingSourceAddressToken, null, null);
        Type localVarReturnType = new TypeToken<CardholderAddressResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a user address for a funding source (asynchronously)
     * 
     * @param fundingSourceAddressToken Funding source address token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFundingsourcesAddressesFundingsourceaddresstokenAsync(String fundingSourceAddressToken, final ApiCallback<CardholderAddressResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFundingsourcesAddressesFundingsourceaddresstokenValidateBeforeCall(fundingSourceAddressToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CardholderAddressResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFundingsourcesAddressesUserUsertoken
     * @param userToken User token (required)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFundingsourcesAddressesUserUsertokenCall(String userToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fundingsources/addresses/user/{user_token}"
            .replaceAll("\\{" + "user_token" + "\\}", apiClient.escapeString(userToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFundingsourcesAddressesUserUsertokenValidateBeforeCall(String userToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userToken' is set
        if (userToken == null) {
            throw new ApiException("Missing the required parameter 'userToken' when calling getFundingsourcesAddressesUserUsertoken(Async)");
        }
        

        com.squareup.okhttp.Call call = getFundingsourcesAddressesUserUsertokenCall(userToken, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lists all addresses for a user
     * 
     * @param userToken User token (required)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @return CardholderAddressListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CardholderAddressListResponse getFundingsourcesAddressesUserUsertoken(String userToken, String fields) throws ApiException {
        ApiResponse<CardholderAddressListResponse> resp = getFundingsourcesAddressesUserUsertokenWithHttpInfo(userToken, fields);
        return resp.getData();
    }

    /**
     * Lists all addresses for a user
     * 
     * @param userToken User token (required)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @return ApiResponse&lt;CardholderAddressListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CardholderAddressListResponse> getFundingsourcesAddressesUserUsertokenWithHttpInfo(String userToken, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getFundingsourcesAddressesUserUsertokenValidateBeforeCall(userToken, fields, null, null);
        Type localVarReturnType = new TypeToken<CardholderAddressListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists all addresses for a user (asynchronously)
     * 
     * @param userToken User token (required)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFundingsourcesAddressesUserUsertokenAsync(String userToken, String fields, final ApiCallback<CardholderAddressListResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFundingsourcesAddressesUserUsertokenValidateBeforeCall(userToken, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CardholderAddressListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFundingsourcesBusinessBusinesstoken
     * @param businessToken Business token (required)
     * @param type Type, such as a payment card or ACH (optional)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFundingsourcesBusinessBusinesstokenCall(String businessToken, String type, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fundingsources/business/{business_token}"
            .replaceAll("\\{" + "business_token" + "\\}", apiClient.escapeString(businessToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFundingsourcesBusinessBusinesstokenValidateBeforeCall(String businessToken, String type, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'businessToken' is set
        if (businessToken == null) {
            throw new ApiException("Missing the required parameter 'businessToken' when calling getFundingsourcesBusinessBusinesstoken(Async)");
        }
        

        com.squareup.okhttp.Call call = getFundingsourcesBusinessBusinesstokenCall(businessToken, type, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lists all funding sources for a business
     * 
     * @param businessToken Business token (required)
     * @param type Type, such as a payment card or ACH (optional)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @return FundingAccountListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FundingAccountListResponse getFundingsourcesBusinessBusinesstoken(String businessToken, String type, String fields) throws ApiException {
        ApiResponse<FundingAccountListResponse> resp = getFundingsourcesBusinessBusinesstokenWithHttpInfo(businessToken, type, fields);
        return resp.getData();
    }

    /**
     * Lists all funding sources for a business
     * 
     * @param businessToken Business token (required)
     * @param type Type, such as a payment card or ACH (optional)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @return ApiResponse&lt;FundingAccountListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FundingAccountListResponse> getFundingsourcesBusinessBusinesstokenWithHttpInfo(String businessToken, String type, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getFundingsourcesBusinessBusinesstokenValidateBeforeCall(businessToken, type, fields, null, null);
        Type localVarReturnType = new TypeToken<FundingAccountListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists all funding sources for a business (asynchronously)
     * 
     * @param businessToken Business token (required)
     * @param type Type, such as a payment card or ACH (optional)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFundingsourcesBusinessBusinesstokenAsync(String businessToken, String type, String fields, final ApiCallback<FundingAccountListResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFundingsourcesBusinessBusinesstokenValidateBeforeCall(businessToken, type, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FundingAccountListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFundingsourcesPaymentcardFundingsourcetoken
     * @param fundingSourceToken Funding token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFundingsourcesPaymentcardFundingsourcetokenCall(String fundingSourceToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fundingsources/paymentcard/{funding_source_token}"
            .replaceAll("\\{" + "funding_source_token" + "\\}", apiClient.escapeString(fundingSourceToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFundingsourcesPaymentcardFundingsourcetokenValidateBeforeCall(String fundingSourceToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fundingSourceToken' is set
        if (fundingSourceToken == null) {
            throw new ApiException("Missing the required parameter 'fundingSourceToken' when calling getFundingsourcesPaymentcardFundingsourcetoken(Async)");
        }
        

        com.squareup.okhttp.Call call = getFundingsourcesPaymentcardFundingsourcetokenCall(fundingSourceToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns a specific payment card
     * 
     * @param fundingSourceToken Funding token (required)
     * @return PaymentCardResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PaymentCardResponseModel getFundingsourcesPaymentcardFundingsourcetoken(String fundingSourceToken) throws ApiException {
        ApiResponse<PaymentCardResponseModel> resp = getFundingsourcesPaymentcardFundingsourcetokenWithHttpInfo(fundingSourceToken);
        return resp.getData();
    }

    /**
     * Returns a specific payment card
     * 
     * @param fundingSourceToken Funding token (required)
     * @return ApiResponse&lt;PaymentCardResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PaymentCardResponseModel> getFundingsourcesPaymentcardFundingsourcetokenWithHttpInfo(String fundingSourceToken) throws ApiException {
        com.squareup.okhttp.Call call = getFundingsourcesPaymentcardFundingsourcetokenValidateBeforeCall(fundingSourceToken, null, null);
        Type localVarReturnType = new TypeToken<PaymentCardResponseModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a specific payment card (asynchronously)
     * 
     * @param fundingSourceToken Funding token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFundingsourcesPaymentcardFundingsourcetokenAsync(String fundingSourceToken, final ApiCallback<PaymentCardResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFundingsourcesPaymentcardFundingsourcetokenValidateBeforeCall(fundingSourceToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PaymentCardResponseModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFundingsourcesProgramToken
     * @param token Program funding source token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFundingsourcesProgramTokenCall(String token, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fundingsources/program/{token}"
            .replaceAll("\\{" + "token" + "\\}", apiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFundingsourcesProgramTokenValidateBeforeCall(String token, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getFundingsourcesProgramToken(Async)");
        }
        

        com.squareup.okhttp.Call call = getFundingsourcesProgramTokenCall(token, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns a specific program funding source
     * 
     * @param token Program funding source token (required)
     * @return ProgramFundingSourceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProgramFundingSourceResponse getFundingsourcesProgramToken(String token) throws ApiException {
        ApiResponse<ProgramFundingSourceResponse> resp = getFundingsourcesProgramTokenWithHttpInfo(token);
        return resp.getData();
    }

    /**
     * Returns a specific program funding source
     * 
     * @param token Program funding source token (required)
     * @return ApiResponse&lt;ProgramFundingSourceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProgramFundingSourceResponse> getFundingsourcesProgramTokenWithHttpInfo(String token) throws ApiException {
        com.squareup.okhttp.Call call = getFundingsourcesProgramTokenValidateBeforeCall(token, null, null);
        Type localVarReturnType = new TypeToken<ProgramFundingSourceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a specific program funding source (asynchronously)
     * 
     * @param token Program funding source token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFundingsourcesProgramTokenAsync(String token, final ApiCallback<ProgramFundingSourceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFundingsourcesProgramTokenValidateBeforeCall(token, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProgramFundingSourceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFundingsourcesProgramgatewayToken
     * @param token Gateway program funding source token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFundingsourcesProgramgatewayTokenCall(String token, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fundingsources/programgateway/{token}"
            .replaceAll("\\{" + "token" + "\\}", apiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFundingsourcesProgramgatewayTokenValidateBeforeCall(String token, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getFundingsourcesProgramgatewayToken(Async)");
        }
        

        com.squareup.okhttp.Call call = getFundingsourcesProgramgatewayTokenCall(token, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns a gateway program funding source
     * 
     * @param token Gateway program funding source token (required)
     * @return GatewayProgramFundingSourceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GatewayProgramFundingSourceResponse getFundingsourcesProgramgatewayToken(String token) throws ApiException {
        ApiResponse<GatewayProgramFundingSourceResponse> resp = getFundingsourcesProgramgatewayTokenWithHttpInfo(token);
        return resp.getData();
    }

    /**
     * Returns a gateway program funding source
     * 
     * @param token Gateway program funding source token (required)
     * @return ApiResponse&lt;GatewayProgramFundingSourceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GatewayProgramFundingSourceResponse> getFundingsourcesProgramgatewayTokenWithHttpInfo(String token) throws ApiException {
        com.squareup.okhttp.Call call = getFundingsourcesProgramgatewayTokenValidateBeforeCall(token, null, null);
        Type localVarReturnType = new TypeToken<GatewayProgramFundingSourceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a gateway program funding source (asynchronously)
     * 
     * @param token Gateway program funding source token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFundingsourcesProgramgatewayTokenAsync(String token, final ApiCallback<GatewayProgramFundingSourceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFundingsourcesProgramgatewayTokenValidateBeforeCall(token, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GatewayProgramFundingSourceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFundingsourcesUserUsertoken
     * @param userToken User token (required)
     * @param type Type, such as a payment card or ACH (optional)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFundingsourcesUserUsertokenCall(String userToken, String type, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fundingsources/user/{user_token}"
            .replaceAll("\\{" + "user_token" + "\\}", apiClient.escapeString(userToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFundingsourcesUserUsertokenValidateBeforeCall(String userToken, String type, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userToken' is set
        if (userToken == null) {
            throw new ApiException("Missing the required parameter 'userToken' when calling getFundingsourcesUserUsertoken(Async)");
        }
        

        com.squareup.okhttp.Call call = getFundingsourcesUserUsertokenCall(userToken, type, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lists all funding sources for a user
     * 
     * @param userToken User token (required)
     * @param type Type, such as a payment card or ACH (optional)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @return FundingAccountListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FundingAccountListResponse getFundingsourcesUserUsertoken(String userToken, String type, String fields) throws ApiException {
        ApiResponse<FundingAccountListResponse> resp = getFundingsourcesUserUsertokenWithHttpInfo(userToken, type, fields);
        return resp.getData();
    }

    /**
     * Lists all funding sources for a user
     * 
     * @param userToken User token (required)
     * @param type Type, such as a payment card or ACH (optional)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @return ApiResponse&lt;FundingAccountListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FundingAccountListResponse> getFundingsourcesUserUsertokenWithHttpInfo(String userToken, String type, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getFundingsourcesUserUsertokenValidateBeforeCall(userToken, type, fields, null, null);
        Type localVarReturnType = new TypeToken<FundingAccountListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists all funding sources for a user (asynchronously)
     * 
     * @param userToken User token (required)
     * @param type Type, such as a payment card or ACH (optional)
     * @param fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFundingsourcesUserUsertokenAsync(String userToken, String type, String fields, final ApiCallback<FundingAccountListResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFundingsourcesUserUsertokenValidateBeforeCall(userToken, type, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FundingAccountListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postFundingsourcesAch
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postFundingsourcesAchCall(AchModel body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/fundingsources/ach";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postFundingsourcesAchValidateBeforeCall(AchModel body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = postFundingsourcesAchCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Registers an ACH funding source
     * 
     * @param body  (optional)
     * @return AchResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AchResponseModel postFundingsourcesAch(AchModel body) throws ApiException {
        ApiResponse<AchResponseModel> resp = postFundingsourcesAchWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Registers an ACH funding source
     * 
     * @param body  (optional)
     * @return ApiResponse&lt;AchResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AchResponseModel> postFundingsourcesAchWithHttpInfo(AchModel body) throws ApiException {
        com.squareup.okhttp.Call call = postFundingsourcesAchValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<AchResponseModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Registers an ACH funding source (asynchronously)
     * 
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postFundingsourcesAchAsync(AchModel body, final ApiCallback<AchResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postFundingsourcesAchValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AchResponseModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postFundingsourcesAddresses
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postFundingsourcesAddressesCall(CardHolderAddressModel body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/fundingsources/addresses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postFundingsourcesAddressesValidateBeforeCall(CardHolderAddressModel body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = postFundingsourcesAddressesCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates an account holder address for a funding source
     * 
     * @param body  (optional)
     * @return CardholderAddressResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CardholderAddressResponse postFundingsourcesAddresses(CardHolderAddressModel body) throws ApiException {
        ApiResponse<CardholderAddressResponse> resp = postFundingsourcesAddressesWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Creates an account holder address for a funding source
     * 
     * @param body  (optional)
     * @return ApiResponse&lt;CardholderAddressResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CardholderAddressResponse> postFundingsourcesAddressesWithHttpInfo(CardHolderAddressModel body) throws ApiException {
        com.squareup.okhttp.Call call = postFundingsourcesAddressesValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<CardholderAddressResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates an account holder address for a funding source (asynchronously)
     * 
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postFundingsourcesAddressesAsync(CardHolderAddressModel body, final ApiCallback<CardholderAddressResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postFundingsourcesAddressesValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CardholderAddressResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postFundingsourcesPaymentcard
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postFundingsourcesPaymentcardCall(TokenRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/fundingsources/paymentcard";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postFundingsourcesPaymentcardValidateBeforeCall(TokenRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = postFundingsourcesPaymentcardCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Registers a payment card funding source
     * 
     * @param body  (optional)
     * @return PaymentCardResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PaymentCardResponseModel postFundingsourcesPaymentcard(TokenRequest body) throws ApiException {
        ApiResponse<PaymentCardResponseModel> resp = postFundingsourcesPaymentcardWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Registers a payment card funding source
     * 
     * @param body  (optional)
     * @return ApiResponse&lt;PaymentCardResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PaymentCardResponseModel> postFundingsourcesPaymentcardWithHttpInfo(TokenRequest body) throws ApiException {
        com.squareup.okhttp.Call call = postFundingsourcesPaymentcardValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<PaymentCardResponseModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Registers a payment card funding source (asynchronously)
     * 
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postFundingsourcesPaymentcardAsync(TokenRequest body, final ApiCallback<PaymentCardResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postFundingsourcesPaymentcardValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PaymentCardResponseModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postFundingsourcesProgram
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postFundingsourcesProgramCall(ProgramFundingSourceRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/fundingsources/program";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postFundingsourcesProgramValidateBeforeCall(ProgramFundingSourceRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = postFundingsourcesProgramCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates a program funding source
     * 
     * @param body  (optional)
     * @return ProgramFundingSourceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProgramFundingSourceResponse postFundingsourcesProgram(ProgramFundingSourceRequest body) throws ApiException {
        ApiResponse<ProgramFundingSourceResponse> resp = postFundingsourcesProgramWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Creates a program funding source
     * 
     * @param body  (optional)
     * @return ApiResponse&lt;ProgramFundingSourceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProgramFundingSourceResponse> postFundingsourcesProgramWithHttpInfo(ProgramFundingSourceRequest body) throws ApiException {
        com.squareup.okhttp.Call call = postFundingsourcesProgramValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<ProgramFundingSourceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a program funding source (asynchronously)
     * 
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postFundingsourcesProgramAsync(ProgramFundingSourceRequest body, final ApiCallback<ProgramFundingSourceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postFundingsourcesProgramValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProgramFundingSourceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postFundingsourcesProgramAch
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postFundingsourcesProgramAchCall(BaseAchRequestModel body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/fundingsources/program/ach";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postFundingsourcesProgramAchValidateBeforeCall(BaseAchRequestModel body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = postFundingsourcesProgramAchCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Registers an ACH funding source for a program
     * 
     * @param body  (optional)
     * @return BaseAchResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseAchResponseModel postFundingsourcesProgramAch(BaseAchRequestModel body) throws ApiException {
        ApiResponse<BaseAchResponseModel> resp = postFundingsourcesProgramAchWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Registers an ACH funding source for a program
     * 
     * @param body  (optional)
     * @return ApiResponse&lt;BaseAchResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseAchResponseModel> postFundingsourcesProgramAchWithHttpInfo(BaseAchRequestModel body) throws ApiException {
        com.squareup.okhttp.Call call = postFundingsourcesProgramAchValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<BaseAchResponseModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Registers an ACH funding source for a program (asynchronously)
     * 
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postFundingsourcesProgramAchAsync(BaseAchRequestModel body, final ApiCallback<BaseAchResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postFundingsourcesProgramAchValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseAchResponseModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postFundingsourcesProgramgateway
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postFundingsourcesProgramgatewayCall(GatewayProgramFundingSourceRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/fundingsources/programgateway";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postFundingsourcesProgramgatewayValidateBeforeCall(GatewayProgramFundingSourceRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = postFundingsourcesProgramgatewayCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates a gateway program funding source
     * 
     * @param body  (optional)
     * @return GatewayProgramFundingSourceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GatewayProgramFundingSourceResponse postFundingsourcesProgramgateway(GatewayProgramFundingSourceRequest body) throws ApiException {
        ApiResponse<GatewayProgramFundingSourceResponse> resp = postFundingsourcesProgramgatewayWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Creates a gateway program funding source
     * 
     * @param body  (optional)
     * @return ApiResponse&lt;GatewayProgramFundingSourceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GatewayProgramFundingSourceResponse> postFundingsourcesProgramgatewayWithHttpInfo(GatewayProgramFundingSourceRequest body) throws ApiException {
        com.squareup.okhttp.Call call = postFundingsourcesProgramgatewayValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<GatewayProgramFundingSourceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a gateway program funding source (asynchronously)
     * 
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postFundingsourcesProgramgatewayAsync(GatewayProgramFundingSourceRequest body, final ApiCallback<GatewayProgramFundingSourceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postFundingsourcesProgramgatewayValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GatewayProgramFundingSourceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putFundingsourcesAchFundingsourcetoken
     * @param fundingSourceToken  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putFundingsourcesAchFundingsourcetokenCall(String fundingSourceToken, AchVerificationModel body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/fundingsources/ach/{funding_source_token}"
            .replaceAll("\\{" + "funding_source_token" + "\\}", apiClient.escapeString(fundingSourceToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putFundingsourcesAchFundingsourcetokenValidateBeforeCall(String fundingSourceToken, AchVerificationModel body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fundingSourceToken' is set
        if (fundingSourceToken == null) {
            throw new ApiException("Missing the required parameter 'fundingSourceToken' when calling putFundingsourcesAchFundingsourcetoken(Async)");
        }
        

        com.squareup.okhttp.Call call = putFundingsourcesAchFundingsourcetokenCall(fundingSourceToken, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Verifies a bank account as a funding source
     * 
     * @param fundingSourceToken  (required)
     * @param body  (optional)
     * @return AchResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AchResponseModel putFundingsourcesAchFundingsourcetoken(String fundingSourceToken, AchVerificationModel body) throws ApiException {
        ApiResponse<AchResponseModel> resp = putFundingsourcesAchFundingsourcetokenWithHttpInfo(fundingSourceToken, body);
        return resp.getData();
    }

    /**
     * Verifies a bank account as a funding source
     * 
     * @param fundingSourceToken  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;AchResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AchResponseModel> putFundingsourcesAchFundingsourcetokenWithHttpInfo(String fundingSourceToken, AchVerificationModel body) throws ApiException {
        com.squareup.okhttp.Call call = putFundingsourcesAchFundingsourcetokenValidateBeforeCall(fundingSourceToken, body, null, null);
        Type localVarReturnType = new TypeToken<AchResponseModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Verifies a bank account as a funding source (asynchronously)
     * 
     * @param fundingSourceToken  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putFundingsourcesAchFundingsourcetokenAsync(String fundingSourceToken, AchVerificationModel body, final ApiCallback<AchResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putFundingsourcesAchFundingsourcetokenValidateBeforeCall(fundingSourceToken, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AchResponseModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putFundingsourcesAddressesFundingsourceaddresstoken
     * @param fundingSourceAddressToken Funding source address token (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putFundingsourcesAddressesFundingsourceaddresstokenCall(String fundingSourceAddressToken, CardHolderAddressUpdateModel body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/fundingsources/addresses/{funding_source_address_token}"
            .replaceAll("\\{" + "funding_source_address_token" + "\\}", apiClient.escapeString(fundingSourceAddressToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putFundingsourcesAddressesFundingsourceaddresstokenValidateBeforeCall(String fundingSourceAddressToken, CardHolderAddressUpdateModel body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fundingSourceAddressToken' is set
        if (fundingSourceAddressToken == null) {
            throw new ApiException("Missing the required parameter 'fundingSourceAddressToken' when calling putFundingsourcesAddressesFundingsourceaddresstoken(Async)");
        }
        

        com.squareup.okhttp.Call call = putFundingsourcesAddressesFundingsourceaddresstokenCall(fundingSourceAddressToken, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates the account holder address for a funding source
     * 
     * @param fundingSourceAddressToken Funding source address token (required)
     * @param body  (optional)
     * @return CardholderAddressResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CardholderAddressResponse putFundingsourcesAddressesFundingsourceaddresstoken(String fundingSourceAddressToken, CardHolderAddressUpdateModel body) throws ApiException {
        ApiResponse<CardholderAddressResponse> resp = putFundingsourcesAddressesFundingsourceaddresstokenWithHttpInfo(fundingSourceAddressToken, body);
        return resp.getData();
    }

    /**
     * Updates the account holder address for a funding source
     * 
     * @param fundingSourceAddressToken Funding source address token (required)
     * @param body  (optional)
     * @return ApiResponse&lt;CardholderAddressResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CardholderAddressResponse> putFundingsourcesAddressesFundingsourceaddresstokenWithHttpInfo(String fundingSourceAddressToken, CardHolderAddressUpdateModel body) throws ApiException {
        com.squareup.okhttp.Call call = putFundingsourcesAddressesFundingsourceaddresstokenValidateBeforeCall(fundingSourceAddressToken, body, null, null);
        Type localVarReturnType = new TypeToken<CardholderAddressResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates the account holder address for a funding source (asynchronously)
     * 
     * @param fundingSourceAddressToken Funding source address token (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putFundingsourcesAddressesFundingsourceaddresstokenAsync(String fundingSourceAddressToken, CardHolderAddressUpdateModel body, final ApiCallback<CardholderAddressResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putFundingsourcesAddressesFundingsourceaddresstokenValidateBeforeCall(fundingSourceAddressToken, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CardholderAddressResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putFundingsourcesFundingsourcetoken
     * @param fundingSourceToken Funding account token (required)
     * @param body Payment card (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putFundingsourcesFundingsourcetokenCall(String fundingSourceToken, TokenUpdateRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/fundingsources/paymentcard/{funding_source_token}"
            .replaceAll("\\{" + "funding_source_token" + "\\}", apiClient.escapeString(fundingSourceToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putFundingsourcesFundingsourcetokenValidateBeforeCall(String fundingSourceToken, TokenUpdateRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fundingSourceToken' is set
        if (fundingSourceToken == null) {
            throw new ApiException("Missing the required parameter 'fundingSourceToken' when calling putFundingsourcesFundingsourcetoken(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putFundingsourcesFundingsourcetoken(Async)");
        }
        

        com.squareup.okhttp.Call call = putFundingsourcesFundingsourcetokenCall(fundingSourceToken, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates a specific payment card 
     * 
     * @param fundingSourceToken Funding account token (required)
     * @param body Payment card (required)
     * @return PaymentCardResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PaymentCardResponseModel putFundingsourcesFundingsourcetoken(String fundingSourceToken, TokenUpdateRequest body) throws ApiException {
        ApiResponse<PaymentCardResponseModel> resp = putFundingsourcesFundingsourcetokenWithHttpInfo(fundingSourceToken, body);
        return resp.getData();
    }

    /**
     * Updates a specific payment card 
     * 
     * @param fundingSourceToken Funding account token (required)
     * @param body Payment card (required)
     * @return ApiResponse&lt;PaymentCardResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PaymentCardResponseModel> putFundingsourcesFundingsourcetokenWithHttpInfo(String fundingSourceToken, TokenUpdateRequest body) throws ApiException {
        com.squareup.okhttp.Call call = putFundingsourcesFundingsourcetokenValidateBeforeCall(fundingSourceToken, body, null, null);
        Type localVarReturnType = new TypeToken<PaymentCardResponseModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a specific payment card  (asynchronously)
     * 
     * @param fundingSourceToken Funding account token (required)
     * @param body Payment card (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putFundingsourcesFundingsourcetokenAsync(String fundingSourceToken, TokenUpdateRequest body, final ApiCallback<PaymentCardResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putFundingsourcesFundingsourcetokenValidateBeforeCall(fundingSourceToken, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PaymentCardResponseModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putFundingsourcesFundingsourcetokenDefault
     * @param fundingSourceToken Funding account (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putFundingsourcesFundingsourcetokenDefaultCall(String fundingSourceToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fundingsources/{funding_source_token}/default"
            .replaceAll("\\{" + "funding_source_token" + "\\}", apiClient.escapeString(fundingSourceToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "text/plain", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putFundingsourcesFundingsourcetokenDefaultValidateBeforeCall(String fundingSourceToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fundingSourceToken' is set
        if (fundingSourceToken == null) {
            throw new ApiException("Missing the required parameter 'fundingSourceToken' when calling putFundingsourcesFundingsourcetokenDefault(Async)");
        }
        

        com.squareup.okhttp.Call call = putFundingsourcesFundingsourcetokenDefaultCall(fundingSourceToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Configures a default funding source
     * 
     * @param fundingSourceToken Funding account (required)
     * @return PaymentCardResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PaymentCardResponseModel putFundingsourcesFundingsourcetokenDefault(String fundingSourceToken) throws ApiException {
        ApiResponse<PaymentCardResponseModel> resp = putFundingsourcesFundingsourcetokenDefaultWithHttpInfo(fundingSourceToken);
        return resp.getData();
    }

    /**
     * Configures a default funding source
     * 
     * @param fundingSourceToken Funding account (required)
     * @return ApiResponse&lt;PaymentCardResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PaymentCardResponseModel> putFundingsourcesFundingsourcetokenDefaultWithHttpInfo(String fundingSourceToken) throws ApiException {
        com.squareup.okhttp.Call call = putFundingsourcesFundingsourcetokenDefaultValidateBeforeCall(fundingSourceToken, null, null);
        Type localVarReturnType = new TypeToken<PaymentCardResponseModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Configures a default funding source (asynchronously)
     * 
     * @param fundingSourceToken Funding account (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putFundingsourcesFundingsourcetokenDefaultAsync(String fundingSourceToken, final ApiCallback<PaymentCardResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putFundingsourcesFundingsourcetokenDefaultValidateBeforeCall(fundingSourceToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PaymentCardResponseModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putFundingsourcesProgramToken
     * @param token Program funding source token (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putFundingsourcesProgramTokenCall(String token, ProgramFundingSourceUpdateRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/fundingsources/program/{token}"
            .replaceAll("\\{" + "token" + "\\}", apiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putFundingsourcesProgramTokenValidateBeforeCall(String token, ProgramFundingSourceUpdateRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling putFundingsourcesProgramToken(Async)");
        }
        

        com.squareup.okhttp.Call call = putFundingsourcesProgramTokenCall(token, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates a specific program funding source
     * 
     * @param token Program funding source token (required)
     * @param body  (optional)
     * @return ProgramFundingSourceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProgramFundingSourceResponse putFundingsourcesProgramToken(String token, ProgramFundingSourceUpdateRequest body) throws ApiException {
        ApiResponse<ProgramFundingSourceResponse> resp = putFundingsourcesProgramTokenWithHttpInfo(token, body);
        return resp.getData();
    }

    /**
     * Updates a specific program funding source
     * 
     * @param token Program funding source token (required)
     * @param body  (optional)
     * @return ApiResponse&lt;ProgramFundingSourceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProgramFundingSourceResponse> putFundingsourcesProgramTokenWithHttpInfo(String token, ProgramFundingSourceUpdateRequest body) throws ApiException {
        com.squareup.okhttp.Call call = putFundingsourcesProgramTokenValidateBeforeCall(token, body, null, null);
        Type localVarReturnType = new TypeToken<ProgramFundingSourceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a specific program funding source (asynchronously)
     * 
     * @param token Program funding source token (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putFundingsourcesProgramTokenAsync(String token, ProgramFundingSourceUpdateRequest body, final ApiCallback<ProgramFundingSourceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putFundingsourcesProgramTokenValidateBeforeCall(token, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProgramFundingSourceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putFundingsourcesProgramgatewayCustomHeaderToken
     * @param token Gateway program funding source token (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putFundingsourcesProgramgatewayCustomHeaderTokenCall(String token, GatewayProgramCustomHeaderUpdateRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/fundingsources/programgateway/customheaders/{token}"
            .replaceAll("\\{" + "token" + "\\}", apiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putFundingsourcesProgramgatewayCustomHeaderTokenValidateBeforeCall(String token, GatewayProgramCustomHeaderUpdateRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling putFundingsourcesProgramgatewayCustomHeaderToken(Async)");
        }
        

        com.squareup.okhttp.Call call = putFundingsourcesProgramgatewayCustomHeaderTokenCall(token, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates a specific gateway program funding source Custom headers
     * 
     * @param token Gateway program funding source token (required)
     * @param body  (optional)
     * @return GatewayProgramFundingSourceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GatewayProgramFundingSourceResponse putFundingsourcesProgramgatewayCustomHeaderToken(String token, GatewayProgramCustomHeaderUpdateRequest body) throws ApiException {
        ApiResponse<GatewayProgramFundingSourceResponse> resp = putFundingsourcesProgramgatewayCustomHeaderTokenWithHttpInfo(token, body);
        return resp.getData();
    }

    /**
     * Updates a specific gateway program funding source Custom headers
     * 
     * @param token Gateway program funding source token (required)
     * @param body  (optional)
     * @return ApiResponse&lt;GatewayProgramFundingSourceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GatewayProgramFundingSourceResponse> putFundingsourcesProgramgatewayCustomHeaderTokenWithHttpInfo(String token, GatewayProgramCustomHeaderUpdateRequest body) throws ApiException {
        com.squareup.okhttp.Call call = putFundingsourcesProgramgatewayCustomHeaderTokenValidateBeforeCall(token, body, null, null);
        Type localVarReturnType = new TypeToken<GatewayProgramFundingSourceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a specific gateway program funding source Custom headers (asynchronously)
     * 
     * @param token Gateway program funding source token (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putFundingsourcesProgramgatewayCustomHeaderTokenAsync(String token, GatewayProgramCustomHeaderUpdateRequest body, final ApiCallback<GatewayProgramFundingSourceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putFundingsourcesProgramgatewayCustomHeaderTokenValidateBeforeCall(token, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GatewayProgramFundingSourceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putFundingsourcesProgramgatewayToken
     * @param token Gateway program funding source token (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putFundingsourcesProgramgatewayTokenCall(String token, GatewayProgramFundingSourceUpdateRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/fundingsources/programgateway/{token}"
            .replaceAll("\\{" + "token" + "\\}", apiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putFundingsourcesProgramgatewayTokenValidateBeforeCall(String token, GatewayProgramFundingSourceUpdateRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling putFundingsourcesProgramgatewayToken(Async)");
        }
        

        com.squareup.okhttp.Call call = putFundingsourcesProgramgatewayTokenCall(token, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates a specific gateway program funding source
     * 
     * @param token Gateway program funding source token (required)
     * @param body  (optional)
     * @return GatewayProgramFundingSourceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GatewayProgramFundingSourceResponse putFundingsourcesProgramgatewayToken(String token, GatewayProgramFundingSourceUpdateRequest body) throws ApiException {
        ApiResponse<GatewayProgramFundingSourceResponse> resp = putFundingsourcesProgramgatewayTokenWithHttpInfo(token, body);
        return resp.getData();
    }

    /**
     * Updates a specific gateway program funding source
     * 
     * @param token Gateway program funding source token (required)
     * @param body  (optional)
     * @return ApiResponse&lt;GatewayProgramFundingSourceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GatewayProgramFundingSourceResponse> putFundingsourcesProgramgatewayTokenWithHttpInfo(String token, GatewayProgramFundingSourceUpdateRequest body) throws ApiException {
        com.squareup.okhttp.Call call = putFundingsourcesProgramgatewayTokenValidateBeforeCall(token, body, null, null);
        Type localVarReturnType = new TypeToken<GatewayProgramFundingSourceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a specific gateway program funding source (asynchronously)
     * 
     * @param token Gateway program funding source token (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putFundingsourcesProgramgatewayTokenAsync(String token, GatewayProgramFundingSourceUpdateRequest body, final ApiCallback<GatewayProgramFundingSourceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putFundingsourcesProgramgatewayTokenValidateBeforeCall(token, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GatewayProgramFundingSourceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
