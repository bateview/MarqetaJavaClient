/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * ChargebackUpdateRequest
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-06-07T21:08:00.979Z")
public class ChargebackUpdateRequest {
  /**
   * Either &#39;reason_description&#39; or &#39;reason_code&#39; is required
   */
  @JsonAdapter(ReasonDescriptionEnum.Adapter.class)
  public enum ReasonDescriptionEnum {
    SERVICE_NOT_PROVIDED_MERCHANDISE_NOT_RECEIVED("SERVICE_NOT_PROVIDED_MERCHANDISE_NOT_RECEIVED"),
    
    CANCELLED_RECURRING_TRANSACTION("CANCELLED_RECURRING_TRANSACTION"),
    
    NOT_AS_DESCRIBED_OR_DEFECTIVE_MERCHANDISE("NOT_AS_DESCRIBED_OR_DEFECTIVE_MERCHANDISE"),
    
    FRAUD_MULTIPLE_TRANSACTIONS("FRAUD_MULTIPLE_TRANSACTIONS"),
    
    FRAUD_TRANSACTION("FRAUD_TRANSACTION"),
    
    NO_AUTHORIZATION("NO_AUTHORIZATION"),
    
    LATE_PRESENTMENT("LATE_PRESENTMENT"),
    
    TRANSACTION_NOT_RECOGNIZED("TRANSACTION_NOT_RECOGNIZED"),
    
    INCORRECT_CURRENCY("INCORRECT_CURRENCY"),
    
    INCORRECT_TRANSACTION_CODE("INCORRECT_TRANSACTION_CODE"),
    
    INCORRECT_CURRENCY_OR_TRANSACTION_CODE("INCORRECT_CURRENCY_OR_TRANSACTION_CODE"),
    
    INCORRECT_TRANSACTION_AMOUNT("INCORRECT_TRANSACTION_AMOUNT"),
    
    INCORRECT_ACCOUNT_NUMBER("INCORRECT_ACCOUNT_NUMBER"),
    
    INCORRECT_TRANSACTION_AMOUNT_OR_ACCOUNT_NUMBER("INCORRECT_TRANSACTION_AMOUNT_OR_ACCOUNT_NUMBER"),
    
    NOT_AUTHORIZED_CARD_PRESENT("NOT_AUTHORIZED_CARD_PRESENT"),
    
    NOT_AUTHORIZED_CARD_ABSENT("NOT_AUTHORIZED_CARD_ABSENT"),
    
    CREDIT_NOT_PROCESSED("CREDIT_NOT_PROCESSED"),
    
    NON_RECEIPT_OF_CASH_OR_LOAD_TRANSACTION_VALUE_AT_ATM("NON_RECEIPT_OF_CASH_OR_LOAD_TRANSACTION_VALUE_AT_ATM");

    private String value;

    ReasonDescriptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReasonDescriptionEnum fromValue(String text) {
      for (ReasonDescriptionEnum b : ReasonDescriptionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ReasonDescriptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReasonDescriptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReasonDescriptionEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ReasonDescriptionEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("reason_description")
  private ReasonDescriptionEnum reasonDescription = null;

  @SerializedName("reason_code")
  private String reasonCode = null;

  public ChargebackUpdateRequest reasonDescription(ReasonDescriptionEnum reasonDescription) {
    this.reasonDescription = reasonDescription;
    return this;
  }

   /**
   * Either &#39;reason_description&#39; or &#39;reason_code&#39; is required
   * @return reasonDescription
  **/
  @ApiModelProperty(value = "Either 'reason_description' or 'reason_code' is required")
  public ReasonDescriptionEnum getReasonDescription() {
    return reasonDescription;
  }

  public void setReasonDescription(ReasonDescriptionEnum reasonDescription) {
    this.reasonDescription = reasonDescription;
  }

  public ChargebackUpdateRequest reasonCode(String reasonCode) {
    this.reasonCode = reasonCode;
    return this;
  }

   /**
   * Either &#39;reason_code&#39; or &#39;reason_description&#39; is required
   * @return reasonCode
  **/
  @ApiModelProperty(value = "Either 'reason_code' or 'reason_description' is required")
  public String getReasonCode() {
    return reasonCode;
  }

  public void setReasonCode(String reasonCode) {
    this.reasonCode = reasonCode;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChargebackUpdateRequest chargebackUpdateRequest = (ChargebackUpdateRequest) o;
    return Objects.equals(this.reasonDescription, chargebackUpdateRequest.reasonDescription) &&
        Objects.equals(this.reasonCode, chargebackUpdateRequest.reasonCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(reasonDescription, reasonCode);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChargebackUpdateRequest {\n");
    
    sb.append("    reasonDescription: ").append(toIndentedString(reasonDescription)).append("\n");
    sb.append("    reasonCode: ").append(toIndentedString(reasonCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

