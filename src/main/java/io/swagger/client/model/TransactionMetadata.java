/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.Airline;
import io.swagger.client.model.Transit;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;

/**
 * TransactionMetadata
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-06-07T21:08:00.979Z")
public class TransactionMetadata {
  /**
   * Gets or Sets transactionCategory
   */
  @JsonAdapter(TransactionCategoryEnum.Adapter.class)
  public enum TransactionCategoryEnum {
    RETAIL_SALE("RETAIL_SALE"),
    
    BILL_PAY("BILL_PAY"),
    
    HOTEL("HOTEL"),
    
    HEALTH_CARE("HEALTH_CARE"),
    
    RESTAURANT("RESTAURANT"),
    
    AUTO_RENTAL("AUTO_RENTAL"),
    
    AIRLINE("AIRLINE"),
    
    PAYMENT("PAYMENT"),
    
    HOSPITALIZATION_COLLEGE("HOSPITALIZATION_COLLEGE"),
    
    PHONE_MAIL_ECOMMERCE("PHONE_MAIL_ECOMMERCE"),
    
    ATM("ATM"),
    
    TRANSIT("TRANSIT");

    private String value;

    TransactionCategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TransactionCategoryEnum fromValue(String text) {
      for (TransactionCategoryEnum b : TransactionCategoryEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TransactionCategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransactionCategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TransactionCategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TransactionCategoryEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("transaction_category")
  private TransactionCategoryEnum transactionCategory = null;

  /**
   * Gets or Sets paymentChannel
   */
  @JsonAdapter(PaymentChannelEnum.Adapter.class)
  public enum PaymentChannelEnum {
    OTHER("OTHER"),
    
    ATM("ATM"),
    
    ECOMMERCE("ECOMMERCE"),
    
    MAIL("MAIL"),
    
    PHONE("PHONE");

    private String value;

    PaymentChannelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentChannelEnum fromValue(String text) {
      for (PaymentChannelEnum b : PaymentChannelEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PaymentChannelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentChannelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentChannelEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PaymentChannelEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("payment_channel")
  private PaymentChannelEnum paymentChannel = null;

  @SerializedName("cross_border_transaction")
  private Boolean crossBorderTransaction = false;

  @SerializedName("authorization_life_cycle")
  private Integer authorizationLifeCycle = null;

  @SerializedName("is_lodging_auto_rental")
  private Boolean isLodgingAutoRental = false;

  @SerializedName("lodging_auto_rental_start_date")
  private OffsetDateTime lodgingAutoRentalStartDate = null;

  @SerializedName("transit")
  private Transit transit = null;

  @SerializedName("airline")
  private Airline airline = null;

  public TransactionMetadata transactionCategory(TransactionCategoryEnum transactionCategory) {
    this.transactionCategory = transactionCategory;
    return this;
  }

   /**
   * Get transactionCategory
   * @return transactionCategory
  **/
  @ApiModelProperty(value = "")
  public TransactionCategoryEnum getTransactionCategory() {
    return transactionCategory;
  }

  public void setTransactionCategory(TransactionCategoryEnum transactionCategory) {
    this.transactionCategory = transactionCategory;
  }

  public TransactionMetadata paymentChannel(PaymentChannelEnum paymentChannel) {
    this.paymentChannel = paymentChannel;
    return this;
  }

   /**
   * Get paymentChannel
   * @return paymentChannel
  **/
  @ApiModelProperty(value = "")
  public PaymentChannelEnum getPaymentChannel() {
    return paymentChannel;
  }

  public void setPaymentChannel(PaymentChannelEnum paymentChannel) {
    this.paymentChannel = paymentChannel;
  }

  public TransactionMetadata crossBorderTransaction(Boolean crossBorderTransaction) {
    this.crossBorderTransaction = crossBorderTransaction;
    return this;
  }

   /**
   * Get crossBorderTransaction
   * @return crossBorderTransaction
  **/
  @ApiModelProperty(value = "")
  public Boolean isCrossBorderTransaction() {
    return crossBorderTransaction;
  }

  public void setCrossBorderTransaction(Boolean crossBorderTransaction) {
    this.crossBorderTransaction = crossBorderTransaction;
  }

  public TransactionMetadata authorizationLifeCycle(Integer authorizationLifeCycle) {
    this.authorizationLifeCycle = authorizationLifeCycle;
    return this;
  }

   /**
   * Get authorizationLifeCycle
   * @return authorizationLifeCycle
  **/
  @ApiModelProperty(value = "")
  public Integer getAuthorizationLifeCycle() {
    return authorizationLifeCycle;
  }

  public void setAuthorizationLifeCycle(Integer authorizationLifeCycle) {
    this.authorizationLifeCycle = authorizationLifeCycle;
  }

  public TransactionMetadata isLodgingAutoRental(Boolean isLodgingAutoRental) {
    this.isLodgingAutoRental = isLodgingAutoRental;
    return this;
  }

   /**
   * Get isLodgingAutoRental
   * @return isLodgingAutoRental
  **/
  @ApiModelProperty(value = "")
  public Boolean isIsLodgingAutoRental() {
    return isLodgingAutoRental;
  }

  public void setIsLodgingAutoRental(Boolean isLodgingAutoRental) {
    this.isLodgingAutoRental = isLodgingAutoRental;
  }

  public TransactionMetadata lodgingAutoRentalStartDate(OffsetDateTime lodgingAutoRentalStartDate) {
    this.lodgingAutoRentalStartDate = lodgingAutoRentalStartDate;
    return this;
  }

   /**
   * Get lodgingAutoRentalStartDate
   * @return lodgingAutoRentalStartDate
  **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getLodgingAutoRentalStartDate() {
    return lodgingAutoRentalStartDate;
  }

  public void setLodgingAutoRentalStartDate(OffsetDateTime lodgingAutoRentalStartDate) {
    this.lodgingAutoRentalStartDate = lodgingAutoRentalStartDate;
  }

  public TransactionMetadata transit(Transit transit) {
    this.transit = transit;
    return this;
  }

   /**
   * Get transit
   * @return transit
  **/
  @ApiModelProperty(value = "")
  public Transit getTransit() {
    return transit;
  }

  public void setTransit(Transit transit) {
    this.transit = transit;
  }

  public TransactionMetadata airline(Airline airline) {
    this.airline = airline;
    return this;
  }

   /**
   * Get airline
   * @return airline
  **/
  @ApiModelProperty(value = "")
  public Airline getAirline() {
    return airline;
  }

  public void setAirline(Airline airline) {
    this.airline = airline;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionMetadata transactionMetadata = (TransactionMetadata) o;
    return Objects.equals(this.transactionCategory, transactionMetadata.transactionCategory) &&
        Objects.equals(this.paymentChannel, transactionMetadata.paymentChannel) &&
        Objects.equals(this.crossBorderTransaction, transactionMetadata.crossBorderTransaction) &&
        Objects.equals(this.authorizationLifeCycle, transactionMetadata.authorizationLifeCycle) &&
        Objects.equals(this.isLodgingAutoRental, transactionMetadata.isLodgingAutoRental) &&
        Objects.equals(this.lodgingAutoRentalStartDate, transactionMetadata.lodgingAutoRentalStartDate) &&
        Objects.equals(this.transit, transactionMetadata.transit) &&
        Objects.equals(this.airline, transactionMetadata.airline);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transactionCategory, paymentChannel, crossBorderTransaction, authorizationLifeCycle, isLodgingAutoRental, lodgingAutoRentalStartDate, transit, airline);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionMetadata {\n");
    
    sb.append("    transactionCategory: ").append(toIndentedString(transactionCategory)).append("\n");
    sb.append("    paymentChannel: ").append(toIndentedString(paymentChannel)).append("\n");
    sb.append("    crossBorderTransaction: ").append(toIndentedString(crossBorderTransaction)).append("\n");
    sb.append("    authorizationLifeCycle: ").append(toIndentedString(authorizationLifeCycle)).append("\n");
    sb.append("    isLodgingAutoRental: ").append(toIndentedString(isLodgingAutoRental)).append("\n");
    sb.append("    lodgingAutoRentalStartDate: ").append(toIndentedString(lodgingAutoRentalStartDate)).append("\n");
    sb.append("    transit: ").append(toIndentedString(transit)).append("\n");
    sb.append("    airline: ").append(toIndentedString(airline)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

