/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * DigitalWalletTokenWalletProvider
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-06-07T21:08:00.979Z")
public class DigitalWalletTokenWalletProvider {
  @SerializedName("wallet_provider_cardholder_wallet_account_id")
  private String walletProviderCardholderWalletAccountId = null;

  /**
   * Gets or Sets walletProviderRiskAssessment
   */
  @JsonAdapter(WalletProviderRiskAssessmentEnum.Adapter.class)
  public enum WalletProviderRiskAssessmentEnum {
    GREEN("DECISION_GREEN"),
    
    YELLOW("DECISION_YELLOW"),
    
    RED("DECISION_RED");

    private String value;

    WalletProviderRiskAssessmentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WalletProviderRiskAssessmentEnum fromValue(String text) {
      for (WalletProviderRiskAssessmentEnum b : WalletProviderRiskAssessmentEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<WalletProviderRiskAssessmentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WalletProviderRiskAssessmentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WalletProviderRiskAssessmentEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return WalletProviderRiskAssessmentEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("wallet_provider_risk_assessment")
  private WalletProviderRiskAssessmentEnum walletProviderRiskAssessment = null;

  @SerializedName("wallet_provider_risk_assessment_version")
  private String walletProviderRiskAssessmentVersion = null;

  @SerializedName("wallet_provider_device_score")
  private String walletProviderDeviceScore = null;

  @SerializedName("wallet_provider_account_score")
  private String walletProviderAccountScore = null;

  /**
   * Gets or Sets walletProviderPanSource
   */
  @JsonAdapter(WalletProviderPanSourceEnum.Adapter.class)
  public enum WalletProviderPanSourceEnum {
    ON_FILE("ON_FILE"),
    
    KEY_ENTERED("KEY_ENTERED"),
    
    MOBILE_BANKING_APP("MOBILE_BANKING_APP");

    private String value;

    WalletProviderPanSourceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WalletProviderPanSourceEnum fromValue(String text) {
      for (WalletProviderPanSourceEnum b : WalletProviderPanSourceEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<WalletProviderPanSourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WalletProviderPanSourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WalletProviderPanSourceEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return WalletProviderPanSourceEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("wallet_provider_pan_source")
  private WalletProviderPanSourceEnum walletProviderPanSource = null;

  @SerializedName("wallet_provider_reason_code")
  private String walletProviderReasonCode = null;

  @SerializedName("recommendation_reasons")
  private List<String> recommendationReasons = null;

  @SerializedName("cardholder_wallet_account_email")
  private String cardholderWalletAccountEmail = null;

  public DigitalWalletTokenWalletProvider walletProviderCardholderWalletAccountId(String walletProviderCardholderWalletAccountId) {
    this.walletProviderCardholderWalletAccountId = walletProviderCardholderWalletAccountId;
    return this;
  }

   /**
   * Get walletProviderCardholderWalletAccountId
   * @return walletProviderCardholderWalletAccountId
  **/
  @ApiModelProperty(value = "")
  public String getWalletProviderCardholderWalletAccountId() {
    return walletProviderCardholderWalletAccountId;
  }

  public void setWalletProviderCardholderWalletAccountId(String walletProviderCardholderWalletAccountId) {
    this.walletProviderCardholderWalletAccountId = walletProviderCardholderWalletAccountId;
  }

  public DigitalWalletTokenWalletProvider walletProviderRiskAssessment(WalletProviderRiskAssessmentEnum walletProviderRiskAssessment) {
    this.walletProviderRiskAssessment = walletProviderRiskAssessment;
    return this;
  }

   /**
   * Get walletProviderRiskAssessment
   * @return walletProviderRiskAssessment
  **/
  @ApiModelProperty(value = "")
  public WalletProviderRiskAssessmentEnum getWalletProviderRiskAssessment() {
    return walletProviderRiskAssessment;
  }

  public void setWalletProviderRiskAssessment(WalletProviderRiskAssessmentEnum walletProviderRiskAssessment) {
    this.walletProviderRiskAssessment = walletProviderRiskAssessment;
  }

  public DigitalWalletTokenWalletProvider walletProviderRiskAssessmentVersion(String walletProviderRiskAssessmentVersion) {
    this.walletProviderRiskAssessmentVersion = walletProviderRiskAssessmentVersion;
    return this;
  }

   /**
   * Get walletProviderRiskAssessmentVersion
   * @return walletProviderRiskAssessmentVersion
  **/
  @ApiModelProperty(value = "")
  public String getWalletProviderRiskAssessmentVersion() {
    return walletProviderRiskAssessmentVersion;
  }

  public void setWalletProviderRiskAssessmentVersion(String walletProviderRiskAssessmentVersion) {
    this.walletProviderRiskAssessmentVersion = walletProviderRiskAssessmentVersion;
  }

  public DigitalWalletTokenWalletProvider walletProviderDeviceScore(String walletProviderDeviceScore) {
    this.walletProviderDeviceScore = walletProviderDeviceScore;
    return this;
  }

   /**
   * Get walletProviderDeviceScore
   * @return walletProviderDeviceScore
  **/
  @ApiModelProperty(value = "")
  public String getWalletProviderDeviceScore() {
    return walletProviderDeviceScore;
  }

  public void setWalletProviderDeviceScore(String walletProviderDeviceScore) {
    this.walletProviderDeviceScore = walletProviderDeviceScore;
  }

  public DigitalWalletTokenWalletProvider walletProviderAccountScore(String walletProviderAccountScore) {
    this.walletProviderAccountScore = walletProviderAccountScore;
    return this;
  }

   /**
   * Get walletProviderAccountScore
   * @return walletProviderAccountScore
  **/
  @ApiModelProperty(value = "")
  public String getWalletProviderAccountScore() {
    return walletProviderAccountScore;
  }

  public void setWalletProviderAccountScore(String walletProviderAccountScore) {
    this.walletProviderAccountScore = walletProviderAccountScore;
  }

  public DigitalWalletTokenWalletProvider walletProviderPanSource(WalletProviderPanSourceEnum walletProviderPanSource) {
    this.walletProviderPanSource = walletProviderPanSource;
    return this;
  }

   /**
   * Get walletProviderPanSource
   * @return walletProviderPanSource
  **/
  @ApiModelProperty(value = "")
  public WalletProviderPanSourceEnum getWalletProviderPanSource() {
    return walletProviderPanSource;
  }

  public void setWalletProviderPanSource(WalletProviderPanSourceEnum walletProviderPanSource) {
    this.walletProviderPanSource = walletProviderPanSource;
  }

  public DigitalWalletTokenWalletProvider walletProviderReasonCode(String walletProviderReasonCode) {
    this.walletProviderReasonCode = walletProviderReasonCode;
    return this;
  }

   /**
   * Get walletProviderReasonCode
   * @return walletProviderReasonCode
  **/
  @ApiModelProperty(value = "")
  public String getWalletProviderReasonCode() {
    return walletProviderReasonCode;
  }

  public void setWalletProviderReasonCode(String walletProviderReasonCode) {
    this.walletProviderReasonCode = walletProviderReasonCode;
  }

  public DigitalWalletTokenWalletProvider recommendationReasons(List<String> recommendationReasons) {
    this.recommendationReasons = recommendationReasons;
    return this;
  }

  public DigitalWalletTokenWalletProvider addRecommendationReasonsItem(String recommendationReasonsItem) {
    if (this.recommendationReasons == null) {
      this.recommendationReasons = new ArrayList<String>();
    }
    this.recommendationReasons.add(recommendationReasonsItem);
    return this;
  }

   /**
   * Get recommendationReasons
   * @return recommendationReasons
  **/
  @ApiModelProperty(value = "")
  public List<String> getRecommendationReasons() {
    return recommendationReasons;
  }

  public void setRecommendationReasons(List<String> recommendationReasons) {
    this.recommendationReasons = recommendationReasons;
  }

  public DigitalWalletTokenWalletProvider cardholderWalletAccountEmail(String cardholderWalletAccountEmail) {
    this.cardholderWalletAccountEmail = cardholderWalletAccountEmail;
    return this;
  }

   /**
   * Get cardholderWalletAccountEmail
   * @return cardholderWalletAccountEmail
  **/
  @ApiModelProperty(value = "")
  public String getCardholderWalletAccountEmail() {
    return cardholderWalletAccountEmail;
  }

  public void setCardholderWalletAccountEmail(String cardholderWalletAccountEmail) {
    this.cardholderWalletAccountEmail = cardholderWalletAccountEmail;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DigitalWalletTokenWalletProvider digitalWalletTokenWalletProvider = (DigitalWalletTokenWalletProvider) o;
    return Objects.equals(this.walletProviderCardholderWalletAccountId, digitalWalletTokenWalletProvider.walletProviderCardholderWalletAccountId) &&
        Objects.equals(this.walletProviderRiskAssessment, digitalWalletTokenWalletProvider.walletProviderRiskAssessment) &&
        Objects.equals(this.walletProviderRiskAssessmentVersion, digitalWalletTokenWalletProvider.walletProviderRiskAssessmentVersion) &&
        Objects.equals(this.walletProviderDeviceScore, digitalWalletTokenWalletProvider.walletProviderDeviceScore) &&
        Objects.equals(this.walletProviderAccountScore, digitalWalletTokenWalletProvider.walletProviderAccountScore) &&
        Objects.equals(this.walletProviderPanSource, digitalWalletTokenWalletProvider.walletProviderPanSource) &&
        Objects.equals(this.walletProviderReasonCode, digitalWalletTokenWalletProvider.walletProviderReasonCode) &&
        Objects.equals(this.recommendationReasons, digitalWalletTokenWalletProvider.recommendationReasons) &&
        Objects.equals(this.cardholderWalletAccountEmail, digitalWalletTokenWalletProvider.cardholderWalletAccountEmail);
  }

  @Override
  public int hashCode() {
    return Objects.hash(walletProviderCardholderWalletAccountId, walletProviderRiskAssessment, walletProviderRiskAssessmentVersion, walletProviderDeviceScore, walletProviderAccountScore, walletProviderPanSource, walletProviderReasonCode, recommendationReasons, cardholderWalletAccountEmail);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DigitalWalletTokenWalletProvider {\n");
    
    sb.append("    walletProviderCardholderWalletAccountId: ").append(toIndentedString(walletProviderCardholderWalletAccountId)).append("\n");
    sb.append("    walletProviderRiskAssessment: ").append(toIndentedString(walletProviderRiskAssessment)).append("\n");
    sb.append("    walletProviderRiskAssessmentVersion: ").append(toIndentedString(walletProviderRiskAssessmentVersion)).append("\n");
    sb.append("    walletProviderDeviceScore: ").append(toIndentedString(walletProviderDeviceScore)).append("\n");
    sb.append("    walletProviderAccountScore: ").append(toIndentedString(walletProviderAccountScore)).append("\n");
    sb.append("    walletProviderPanSource: ").append(toIndentedString(walletProviderPanSource)).append("\n");
    sb.append("    walletProviderReasonCode: ").append(toIndentedString(walletProviderReasonCode)).append("\n");
    sb.append("    recommendationReasons: ").append(toIndentedString(recommendationReasons)).append("\n");
    sb.append("    cardholderWalletAccountEmail: ").append(toIndentedString(cardholderWalletAccountEmail)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

