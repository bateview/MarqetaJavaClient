/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Transit
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-06-07T21:08:00.979Z")
public class Transit {
  /**
   * Gets or Sets transactionType
   */
  @JsonAdapter(TransactionTypeEnum.Adapter.class)
  public enum TransactionTypeEnum {
    PRE_FUNDED("PRE_FUNDED"),
    
    REAL_TIME_AUTHORIZED("REAL_TIME_AUTHORIZED"),
    
    POST_AUTHORIZED_AGGREGATED("POST_AUTHORIZED_AGGREGATED"),
    
    AUTHORIZED_AGGREGATED_SPLIT_CLEARING("AUTHORIZED_AGGREGATED_SPLIT_CLEARING"),
    
    OTHER("OTHER"),
    
    DEBIT_RECOVERY("DEBIT_RECOVERY");

    private String value;

    TransactionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TransactionTypeEnum fromValue(String text) {
      for (TransactionTypeEnum b : TransactionTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TransactionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransactionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TransactionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TransactionTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("transaction_type")
  private TransactionTypeEnum transactionType = null;

  /**
   * Gets or Sets transportationMode
   */
  @JsonAdapter(TransportationModeEnum.Adapter.class)
  public enum TransportationModeEnum {
    BUS("BUS"),
    
    TRAIN("TRAIN"),
    
    WATER_BORNE_VEHICLE("WATER_BORNE_VEHICLE"),
    
    TOLL("TOLL"),
    
    PARKING("PARKING"),
    
    TAXI("TAXI"),
    
    PARA_TRANSIT("PARA_TRANSIT"),
    
    SELF_DRIVE_VEHICLE("SELF_DRIVE_VEHICLE"),
    
    COACH("COACH"),
    
    LOCOMOTIVE("LOCOMOTIVE"),
    
    POWERED_MOTOR_VEHICLE("POWERED_MOTOR_VEHICLE"),
    
    TRAILER("TRAILER"),
    
    INTER_CITY("INTER_CITY"),
    
    CABLE_CAR("CABLE_CAR");

    private String value;

    TransportationModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TransportationModeEnum fromValue(String text) {
      for (TransportationModeEnum b : TransportationModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TransportationModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransportationModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TransportationModeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TransportationModeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("transportation_mode")
  private TransportationModeEnum transportationMode = null;

  public Transit transactionType(TransactionTypeEnum transactionType) {
    this.transactionType = transactionType;
    return this;
  }

   /**
   * Get transactionType
   * @return transactionType
  **/
  @ApiModelProperty(value = "")
  public TransactionTypeEnum getTransactionType() {
    return transactionType;
  }

  public void setTransactionType(TransactionTypeEnum transactionType) {
    this.transactionType = transactionType;
  }

  public Transit transportationMode(TransportationModeEnum transportationMode) {
    this.transportationMode = transportationMode;
    return this;
  }

   /**
   * Get transportationMode
   * @return transportationMode
  **/
  @ApiModelProperty(value = "")
  public TransportationModeEnum getTransportationMode() {
    return transportationMode;
  }

  public void setTransportationMode(TransportationModeEnum transportationMode) {
    this.transportationMode = transportationMode;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Transit transit = (Transit) o;
    return Objects.equals(this.transactionType, transit.transactionType) &&
        Objects.equals(this.transportationMode, transit.transportationMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transactionType, transportationMode);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Transit {\n");
    
    sb.append("    transactionType: ").append(toIndentedString(transactionType)).append("\n");
    sb.append("    transportationMode: ").append(toIndentedString(transportationMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

