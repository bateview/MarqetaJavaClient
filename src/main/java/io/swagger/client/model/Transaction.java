/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.InternalAddressVerificationRequest;
import java.io.IOException;

/**
 * Transaction
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-06-07T21:08:00.979Z")
public class Transaction {
  @SerializedName("international")
  private Boolean international = false;

  @SerializedName("address_verification")
  private InternalAddressVerificationRequest addressVerification = null;

  @SerializedName("is_international")
  private Boolean isInternational = false;

  /**
   * Gets or Sets network
   */
  @JsonAdapter(NetworkEnum.Adapter.class)
  public enum NetworkEnum {
    MASTERCARD("MASTERCARD"),
    
    DISCOVER("DISCOVER"),
    
    PULSE("PULSE"),
    
    VISA("VISA");

    private String value;

    NetworkEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NetworkEnum fromValue(String text) {
      for (NetworkEnum b : NetworkEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<NetworkEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NetworkEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NetworkEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return NetworkEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("network")
  private NetworkEnum network = null;

  @SerializedName("currency")
  private String currency = null;

  public Transaction international(Boolean international) {
    this.international = international;
    return this;
  }

   /**
   * Get international
   * @return international
  **/
  @ApiModelProperty(value = "")
  public Boolean isInternational() {
    return international;
  }

  public void setInternational(Boolean international) {
    this.international = international;
  }

  public Transaction addressVerification(InternalAddressVerificationRequest addressVerification) {
    this.addressVerification = addressVerification;
    return this;
  }

   /**
   * address verification
   * @return addressVerification
  **/
  @ApiModelProperty(value = "address verification")
  public InternalAddressVerificationRequest getAddressVerification() {
    return addressVerification;
  }

  public void setAddressVerification(InternalAddressVerificationRequest addressVerification) {
    this.addressVerification = addressVerification;
  }

  public Transaction isInternational(Boolean isInternational) {
    this.isInternational = isInternational;
    return this;
  }

   /**
   * Get isInternational
   * @return isInternational
  **/
  @ApiModelProperty(value = "")
  public Boolean isIsInternational() {
    return isInternational;
  }

  public void setIsInternational(Boolean isInternational) {
    this.isInternational = isInternational;
  }

  public Transaction network(NetworkEnum network) {
    this.network = network;
    return this;
  }

   /**
   * Get network
   * @return network
  **/
  @ApiModelProperty(required = true, value = "")
  public NetworkEnum getNetwork() {
    return network;
  }

  public void setNetwork(NetworkEnum network) {
    this.network = network;
  }

  public Transaction currency(String currency) {
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @ApiModelProperty(value = "")
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Transaction transaction = (Transaction) o;
    return Objects.equals(this.international, transaction.international) &&
        Objects.equals(this.addressVerification, transaction.addressVerification) &&
        Objects.equals(this.isInternational, transaction.isInternational) &&
        Objects.equals(this.network, transaction.network) &&
        Objects.equals(this.currency, transaction.currency);
  }

  @Override
  public int hashCode() {
    return Objects.hash(international, addressVerification, isInternational, network, currency);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Transaction {\n");
    
    sb.append("    international: ").append(toIndentedString(international)).append("\n");
    sb.append("    addressVerification: ").append(toIndentedString(addressVerification)).append("\n");
    sb.append("    isInternational: ").append(toIndentedString(isInternational)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

