/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.CardAcceptorModel;
import io.swagger.client.model.MoneyModel;
import io.swagger.client.model.NetworkFeeModel;
import io.swagger.client.model.OriginalDataElements;
import io.swagger.client.model.Webhook;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;

/**
 * ClearingRecordRequestModel
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-06-07T21:08:00.979Z")
public class ClearingRecordRequestModel {
  @SerializedName("network_fees")
  private List<NetworkFeeModel> networkFees = null;

  @SerializedName("webhook")
  private Webhook webhook = null;

  @SerializedName("mid")
  private String mid = null;

  @SerializedName("amount")
  private BigDecimal amount = null;

  @SerializedName("source_amount")
  private BigDecimal sourceAmount = null;

  @SerializedName("reconciliation_amount")
  private BigDecimal reconciliationAmount = null;

  @SerializedName("replacement_amount")
  private BigDecimal replacementAmount = null;

  @SerializedName("cardholder_billing_amount")
  private BigDecimal cardholderBillingAmount = null;

  @SerializedName("cashback")
  private BigDecimal cashback = null;

  @SerializedName("cardholder_billing_conversion_rate")
  private Double cardholderBillingConversionRate = null;

  @SerializedName("cardholder_billing_currency")
  private String cardholderBillingCurrency = null;

  @SerializedName("card_token")
  private String cardToken = null;

  @SerializedName("acquirer_reference_id")
  private String acquirerReferenceId = null;

  @SerializedName("rrn")
  private String rrn = null;

  @SerializedName("stan")
  private String stan = null;

  @SerializedName("processing_code")
  private String processingCode = null;

  @SerializedName("acquirer_fee")
  private MoneyModel acquirerFee = null;

  @SerializedName("issuer_fee")
  private MoneyModel issuerFee = null;

  @SerializedName("function_code")
  private String functionCode = null;

  @SerializedName("reason_code")
  private String reasonCode = null;

  @SerializedName("approval_code")
  private String approvalCode = null;

  @SerializedName("transaction_date")
  private OffsetDateTime transactionDate = null;

  @SerializedName("local_transaction_date")
  private OffsetDateTime localTransactionDate = null;

  @SerializedName("settlement_date")
  private OffsetDateTime settlementDate = null;

  @SerializedName("network_reference_id")
  private String networkReferenceId = null;

  @SerializedName("find_original_window_days")
  private Integer findOriginalWindowDays = null;

  @SerializedName("batch_number")
  private String batchNumber = null;

  @SerializedName("batch_file_name")
  private String batchFileName = null;

  @SerializedName("sequence_number")
  private String sequenceNumber = null;

  /**
   * Gets or Sets network
   */
  @JsonAdapter(NetworkEnum.Adapter.class)
  public enum NetworkEnum {
    DISCOVER("DISCOVER"),
    
    MASTERCARD("MASTERCARD"),
    
    PULSE("PULSE"),
    
    VISA("VISA");

    private String value;

    NetworkEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NetworkEnum fromValue(String text) {
      for (NetworkEnum b : NetworkEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<NetworkEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NetworkEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NetworkEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return NetworkEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("network")
  private NetworkEnum network = null;

  /**
   * Defaults to VISANET if network is VISA
   */
  @JsonAdapter(SubNetworkEnum.Adapter.class)
  public enum SubNetworkEnum {
    VISANET("VISANET"),
    
    VISANETDEBIT("VISANETDEBIT"),
    
    VISAINTERLINK("VISAINTERLINK"),
    
    VISAPLUS("VISAPLUS");

    private String value;

    SubNetworkEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SubNetworkEnum fromValue(String text) {
      for (SubNetworkEnum b : SubNetworkEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<SubNetworkEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SubNetworkEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SubNetworkEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SubNetworkEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("sub_network")
  private SubNetworkEnum subNetwork = null;

  @SerializedName("card_acceptor")
  private CardAcceptorModel cardAcceptor = null;

  @SerializedName("currency_code")
  private String currencyCode = null;

  @SerializedName("original_data_elements")
  private OriginalDataElements originalDataElements = null;

  @SerializedName("preceding_related_transaction_token")
  private String precedingRelatedTransactionToken = null;

  @SerializedName("send_expiration_date")
  private Boolean sendExpirationDate = false;

  @SerializedName("simulate_batch_for_clearing_record_hash")
  private Boolean simulateBatchForClearingRecordHash = false;

  /**
   * Gets or Sets crossBorderIndicator
   */
  @JsonAdapter(CrossBorderIndicatorEnum.Adapter.class)
  public enum CrossBorderIndicatorEnum {
    SINGLE_CURRENCY("SINGLE_CURRENCY"),
    
    MULTI_CURRENCY("MULTI_CURRENCY"),
    
    REBATE("REBATE"),
    
    UNKNOWN("UNKNOWN");

    private String value;

    CrossBorderIndicatorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CrossBorderIndicatorEnum fromValue(String text) {
      for (CrossBorderIndicatorEnum b : CrossBorderIndicatorEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<CrossBorderIndicatorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CrossBorderIndicatorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CrossBorderIndicatorEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CrossBorderIndicatorEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("cross_border_indicator")
  private CrossBorderIndicatorEnum crossBorderIndicator = null;

  @SerializedName("token_pan")
  private String tokenPan = null;

  /**
   * Gets or Sets mti
   */
  @JsonAdapter(MtiEnum.Adapter.class)
  public enum MtiEnum {
    _0220("0220"),
    
    _0420("0420");

    private String value;

    MtiEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MtiEnum fromValue(String text) {
      for (MtiEnum b : MtiEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<MtiEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MtiEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MtiEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return MtiEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("mti")
  private MtiEnum mti = MtiEnum._0220;

  public ClearingRecordRequestModel networkFees(List<NetworkFeeModel> networkFees) {
    this.networkFees = networkFees;
    return this;
  }

  public ClearingRecordRequestModel addNetworkFeesItem(NetworkFeeModel networkFeesItem) {
    if (this.networkFees == null) {
      this.networkFees = new ArrayList<NetworkFeeModel>();
    }
    this.networkFees.add(networkFeesItem);
    return this;
  }

   /**
   * Get networkFees
   * @return networkFees
  **/
  @ApiModelProperty(value = "")
  public List<NetworkFeeModel> getNetworkFees() {
    return networkFees;
  }

  public void setNetworkFees(List<NetworkFeeModel> networkFees) {
    this.networkFees = networkFees;
  }

  public ClearingRecordRequestModel webhook(Webhook webhook) {
    this.webhook = webhook;
    return this;
  }

   /**
   * Get webhook
   * @return webhook
  **/
  @ApiModelProperty(value = "")
  public Webhook getWebhook() {
    return webhook;
  }

  public void setWebhook(Webhook webhook) {
    this.webhook = webhook;
  }

  public ClearingRecordRequestModel mid(String mid) {
    this.mid = mid;
    return this;
  }

   /**
   * Get mid
   * @return mid
  **/
  @ApiModelProperty(value = "")
  public String getMid() {
    return mid;
  }

  public void setMid(String mid) {
    this.mid = mid;
  }

  public ClearingRecordRequestModel amount(BigDecimal amount) {
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @ApiModelProperty(required = true, value = "")
  public BigDecimal getAmount() {
    return amount;
  }

  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }

  public ClearingRecordRequestModel sourceAmount(BigDecimal sourceAmount) {
    this.sourceAmount = sourceAmount;
    return this;
  }

   /**
   * Get sourceAmount
   * @return sourceAmount
  **/
  @ApiModelProperty(required = true, value = "")
  public BigDecimal getSourceAmount() {
    return sourceAmount;
  }

  public void setSourceAmount(BigDecimal sourceAmount) {
    this.sourceAmount = sourceAmount;
  }

  public ClearingRecordRequestModel reconciliationAmount(BigDecimal reconciliationAmount) {
    this.reconciliationAmount = reconciliationAmount;
    return this;
  }

   /**
   * Get reconciliationAmount
   * @return reconciliationAmount
  **/
  @ApiModelProperty(required = true, value = "")
  public BigDecimal getReconciliationAmount() {
    return reconciliationAmount;
  }

  public void setReconciliationAmount(BigDecimal reconciliationAmount) {
    this.reconciliationAmount = reconciliationAmount;
  }

  public ClearingRecordRequestModel replacementAmount(BigDecimal replacementAmount) {
    this.replacementAmount = replacementAmount;
    return this;
  }

   /**
   * Get replacementAmount
   * @return replacementAmount
  **/
  @ApiModelProperty(value = "")
  public BigDecimal getReplacementAmount() {
    return replacementAmount;
  }

  public void setReplacementAmount(BigDecimal replacementAmount) {
    this.replacementAmount = replacementAmount;
  }

  public ClearingRecordRequestModel cardholderBillingAmount(BigDecimal cardholderBillingAmount) {
    this.cardholderBillingAmount = cardholderBillingAmount;
    return this;
  }

   /**
   * Get cardholderBillingAmount
   * @return cardholderBillingAmount
  **/
  @ApiModelProperty(value = "")
  public BigDecimal getCardholderBillingAmount() {
    return cardholderBillingAmount;
  }

  public void setCardholderBillingAmount(BigDecimal cardholderBillingAmount) {
    this.cardholderBillingAmount = cardholderBillingAmount;
  }

  public ClearingRecordRequestModel cashback(BigDecimal cashback) {
    this.cashback = cashback;
    return this;
  }

   /**
   * Get cashback
   * @return cashback
  **/
  @ApiModelProperty(value = "")
  public BigDecimal getCashback() {
    return cashback;
  }

  public void setCashback(BigDecimal cashback) {
    this.cashback = cashback;
  }

  public ClearingRecordRequestModel cardholderBillingConversionRate(Double cardholderBillingConversionRate) {
    this.cardholderBillingConversionRate = cardholderBillingConversionRate;
    return this;
  }

   /**
   * Get cardholderBillingConversionRate
   * @return cardholderBillingConversionRate
  **/
  @ApiModelProperty(value = "")
  public Double getCardholderBillingConversionRate() {
    return cardholderBillingConversionRate;
  }

  public void setCardholderBillingConversionRate(Double cardholderBillingConversionRate) {
    this.cardholderBillingConversionRate = cardholderBillingConversionRate;
  }

  public ClearingRecordRequestModel cardholderBillingCurrency(String cardholderBillingCurrency) {
    this.cardholderBillingCurrency = cardholderBillingCurrency;
    return this;
  }

   /**
   * Get cardholderBillingCurrency
   * @return cardholderBillingCurrency
  **/
  @ApiModelProperty(value = "")
  public String getCardholderBillingCurrency() {
    return cardholderBillingCurrency;
  }

  public void setCardholderBillingCurrency(String cardholderBillingCurrency) {
    this.cardholderBillingCurrency = cardholderBillingCurrency;
  }

  public ClearingRecordRequestModel cardToken(String cardToken) {
    this.cardToken = cardToken;
    return this;
  }

   /**
   * Get cardToken
   * @return cardToken
  **/
  @ApiModelProperty(required = true, value = "")
  public String getCardToken() {
    return cardToken;
  }

  public void setCardToken(String cardToken) {
    this.cardToken = cardToken;
  }

  public ClearingRecordRequestModel acquirerReferenceId(String acquirerReferenceId) {
    this.acquirerReferenceId = acquirerReferenceId;
    return this;
  }

   /**
   * Get acquirerReferenceId
   * @return acquirerReferenceId
  **/
  @ApiModelProperty(value = "")
  public String getAcquirerReferenceId() {
    return acquirerReferenceId;
  }

  public void setAcquirerReferenceId(String acquirerReferenceId) {
    this.acquirerReferenceId = acquirerReferenceId;
  }

  public ClearingRecordRequestModel rrn(String rrn) {
    this.rrn = rrn;
    return this;
  }

   /**
   * Get rrn
   * @return rrn
  **/
  @ApiModelProperty(value = "")
  public String getRrn() {
    return rrn;
  }

  public void setRrn(String rrn) {
    this.rrn = rrn;
  }

  public ClearingRecordRequestModel stan(String stan) {
    this.stan = stan;
    return this;
  }

   /**
   * Get stan
   * @return stan
  **/
  @ApiModelProperty(value = "")
  public String getStan() {
    return stan;
  }

  public void setStan(String stan) {
    this.stan = stan;
  }

  public ClearingRecordRequestModel processingCode(String processingCode) {
    this.processingCode = processingCode;
    return this;
  }

   /**
   * Get processingCode
   * @return processingCode
  **/
  @ApiModelProperty(value = "")
  public String getProcessingCode() {
    return processingCode;
  }

  public void setProcessingCode(String processingCode) {
    this.processingCode = processingCode;
  }

  public ClearingRecordRequestModel acquirerFee(MoneyModel acquirerFee) {
    this.acquirerFee = acquirerFee;
    return this;
  }

   /**
   * Get acquirerFee
   * @return acquirerFee
  **/
  @ApiModelProperty(value = "")
  public MoneyModel getAcquirerFee() {
    return acquirerFee;
  }

  public void setAcquirerFee(MoneyModel acquirerFee) {
    this.acquirerFee = acquirerFee;
  }

  public ClearingRecordRequestModel issuerFee(MoneyModel issuerFee) {
    this.issuerFee = issuerFee;
    return this;
  }

   /**
   * Get issuerFee
   * @return issuerFee
  **/
  @ApiModelProperty(value = "")
  public MoneyModel getIssuerFee() {
    return issuerFee;
  }

  public void setIssuerFee(MoneyModel issuerFee) {
    this.issuerFee = issuerFee;
  }

  public ClearingRecordRequestModel functionCode(String functionCode) {
    this.functionCode = functionCode;
    return this;
  }

   /**
   * Get functionCode
   * @return functionCode
  **/
  @ApiModelProperty(value = "")
  public String getFunctionCode() {
    return functionCode;
  }

  public void setFunctionCode(String functionCode) {
    this.functionCode = functionCode;
  }

  public ClearingRecordRequestModel reasonCode(String reasonCode) {
    this.reasonCode = reasonCode;
    return this;
  }

   /**
   * Get reasonCode
   * @return reasonCode
  **/
  @ApiModelProperty(value = "")
  public String getReasonCode() {
    return reasonCode;
  }

  public void setReasonCode(String reasonCode) {
    this.reasonCode = reasonCode;
  }

  public ClearingRecordRequestModel approvalCode(String approvalCode) {
    this.approvalCode = approvalCode;
    return this;
  }

   /**
   * Get approvalCode
   * @return approvalCode
  **/
  @ApiModelProperty(value = "")
  public String getApprovalCode() {
    return approvalCode;
  }

  public void setApprovalCode(String approvalCode) {
    this.approvalCode = approvalCode;
  }

  public ClearingRecordRequestModel transactionDate(OffsetDateTime transactionDate) {
    this.transactionDate = transactionDate;
    return this;
  }

   /**
   * yyyy-MM-dd, yyyy-MM-ddThh:mm:ssZ
   * @return transactionDate
  **/
  @ApiModelProperty(value = "yyyy-MM-dd, yyyy-MM-ddThh:mm:ssZ")
  public OffsetDateTime getTransactionDate() {
    return transactionDate;
  }

  public void setTransactionDate(OffsetDateTime transactionDate) {
    this.transactionDate = transactionDate;
  }

  public ClearingRecordRequestModel localTransactionDate(OffsetDateTime localTransactionDate) {
    this.localTransactionDate = localTransactionDate;
    return this;
  }

   /**
   * yyyy-MM-dd, yyyy-MM-ddThh:mm:ssZ
   * @return localTransactionDate
  **/
  @ApiModelProperty(value = "yyyy-MM-dd, yyyy-MM-ddThh:mm:ssZ")
  public OffsetDateTime getLocalTransactionDate() {
    return localTransactionDate;
  }

  public void setLocalTransactionDate(OffsetDateTime localTransactionDate) {
    this.localTransactionDate = localTransactionDate;
  }

  public ClearingRecordRequestModel settlementDate(OffsetDateTime settlementDate) {
    this.settlementDate = settlementDate;
    return this;
  }

   /**
   * yyyy-MM-dd, yyyy-MM-ddThh:mm:ssZ
   * @return settlementDate
  **/
  @ApiModelProperty(value = "yyyy-MM-dd, yyyy-MM-ddThh:mm:ssZ")
  public OffsetDateTime getSettlementDate() {
    return settlementDate;
  }

  public void setSettlementDate(OffsetDateTime settlementDate) {
    this.settlementDate = settlementDate;
  }

  public ClearingRecordRequestModel networkReferenceId(String networkReferenceId) {
    this.networkReferenceId = networkReferenceId;
    return this;
  }

   /**
   * Get networkReferenceId
   * @return networkReferenceId
  **/
  @ApiModelProperty(value = "")
  public String getNetworkReferenceId() {
    return networkReferenceId;
  }

  public void setNetworkReferenceId(String networkReferenceId) {
    this.networkReferenceId = networkReferenceId;
  }

  public ClearingRecordRequestModel findOriginalWindowDays(Integer findOriginalWindowDays) {
    this.findOriginalWindowDays = findOriginalWindowDays;
    return this;
  }

   /**
   * Get findOriginalWindowDays
   * @return findOriginalWindowDays
  **/
  @ApiModelProperty(value = "")
  public Integer getFindOriginalWindowDays() {
    return findOriginalWindowDays;
  }

  public void setFindOriginalWindowDays(Integer findOriginalWindowDays) {
    this.findOriginalWindowDays = findOriginalWindowDays;
  }

  public ClearingRecordRequestModel batchNumber(String batchNumber) {
    this.batchNumber = batchNumber;
    return this;
  }

   /**
   * Get batchNumber
   * @return batchNumber
  **/
  @ApiModelProperty(value = "")
  public String getBatchNumber() {
    return batchNumber;
  }

  public void setBatchNumber(String batchNumber) {
    this.batchNumber = batchNumber;
  }

  public ClearingRecordRequestModel batchFileName(String batchFileName) {
    this.batchFileName = batchFileName;
    return this;
  }

   /**
   * Get batchFileName
   * @return batchFileName
  **/
  @ApiModelProperty(value = "")
  public String getBatchFileName() {
    return batchFileName;
  }

  public void setBatchFileName(String batchFileName) {
    this.batchFileName = batchFileName;
  }

  public ClearingRecordRequestModel sequenceNumber(String sequenceNumber) {
    this.sequenceNumber = sequenceNumber;
    return this;
  }

   /**
   * Get sequenceNumber
   * @return sequenceNumber
  **/
  @ApiModelProperty(value = "")
  public String getSequenceNumber() {
    return sequenceNumber;
  }

  public void setSequenceNumber(String sequenceNumber) {
    this.sequenceNumber = sequenceNumber;
  }

  public ClearingRecordRequestModel network(NetworkEnum network) {
    this.network = network;
    return this;
  }

   /**
   * Get network
   * @return network
  **/
  @ApiModelProperty(value = "")
  public NetworkEnum getNetwork() {
    return network;
  }

  public void setNetwork(NetworkEnum network) {
    this.network = network;
  }

  public ClearingRecordRequestModel subNetwork(SubNetworkEnum subNetwork) {
    this.subNetwork = subNetwork;
    return this;
  }

   /**
   * Defaults to VISANET if network is VISA
   * @return subNetwork
  **/
  @ApiModelProperty(value = "Defaults to VISANET if network is VISA")
  public SubNetworkEnum getSubNetwork() {
    return subNetwork;
  }

  public void setSubNetwork(SubNetworkEnum subNetwork) {
    this.subNetwork = subNetwork;
  }

  public ClearingRecordRequestModel cardAcceptor(CardAcceptorModel cardAcceptor) {
    this.cardAcceptor = cardAcceptor;
    return this;
  }

   /**
   * Get cardAcceptor
   * @return cardAcceptor
  **/
  @ApiModelProperty(value = "")
  public CardAcceptorModel getCardAcceptor() {
    return cardAcceptor;
  }

  public void setCardAcceptor(CardAcceptorModel cardAcceptor) {
    this.cardAcceptor = cardAcceptor;
  }

  public ClearingRecordRequestModel currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * Get currencyCode
   * @return currencyCode
  **/
  @ApiModelProperty(required = true, value = "")
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }

  public ClearingRecordRequestModel originalDataElements(OriginalDataElements originalDataElements) {
    this.originalDataElements = originalDataElements;
    return this;
  }

   /**
   * Get originalDataElements
   * @return originalDataElements
  **/
  @ApiModelProperty(value = "")
  public OriginalDataElements getOriginalDataElements() {
    return originalDataElements;
  }

  public void setOriginalDataElements(OriginalDataElements originalDataElements) {
    this.originalDataElements = originalDataElements;
  }

  public ClearingRecordRequestModel precedingRelatedTransactionToken(String precedingRelatedTransactionToken) {
    this.precedingRelatedTransactionToken = precedingRelatedTransactionToken;
    return this;
  }

   /**
   * Get precedingRelatedTransactionToken
   * @return precedingRelatedTransactionToken
  **/
  @ApiModelProperty(value = "")
  public String getPrecedingRelatedTransactionToken() {
    return precedingRelatedTransactionToken;
  }

  public void setPrecedingRelatedTransactionToken(String precedingRelatedTransactionToken) {
    this.precedingRelatedTransactionToken = precedingRelatedTransactionToken;
  }

  public ClearingRecordRequestModel sendExpirationDate(Boolean sendExpirationDate) {
    this.sendExpirationDate = sendExpirationDate;
    return this;
  }

   /**
   * Get sendExpirationDate
   * @return sendExpirationDate
  **/
  @ApiModelProperty(value = "")
  public Boolean isSendExpirationDate() {
    return sendExpirationDate;
  }

  public void setSendExpirationDate(Boolean sendExpirationDate) {
    this.sendExpirationDate = sendExpirationDate;
  }

  public ClearingRecordRequestModel simulateBatchForClearingRecordHash(Boolean simulateBatchForClearingRecordHash) {
    this.simulateBatchForClearingRecordHash = simulateBatchForClearingRecordHash;
    return this;
  }

   /**
   * Get simulateBatchForClearingRecordHash
   * @return simulateBatchForClearingRecordHash
  **/
  @ApiModelProperty(value = "")
  public Boolean isSimulateBatchForClearingRecordHash() {
    return simulateBatchForClearingRecordHash;
  }

  public void setSimulateBatchForClearingRecordHash(Boolean simulateBatchForClearingRecordHash) {
    this.simulateBatchForClearingRecordHash = simulateBatchForClearingRecordHash;
  }

  public ClearingRecordRequestModel crossBorderIndicator(CrossBorderIndicatorEnum crossBorderIndicator) {
    this.crossBorderIndicator = crossBorderIndicator;
    return this;
  }

   /**
   * Get crossBorderIndicator
   * @return crossBorderIndicator
  **/
  @ApiModelProperty(value = "")
  public CrossBorderIndicatorEnum getCrossBorderIndicator() {
    return crossBorderIndicator;
  }

  public void setCrossBorderIndicator(CrossBorderIndicatorEnum crossBorderIndicator) {
    this.crossBorderIndicator = crossBorderIndicator;
  }

  public ClearingRecordRequestModel tokenPan(String tokenPan) {
    this.tokenPan = tokenPan;
    return this;
  }

   /**
   * Get tokenPan
   * @return tokenPan
  **/
  @ApiModelProperty(value = "")
  public String getTokenPan() {
    return tokenPan;
  }

  public void setTokenPan(String tokenPan) {
    this.tokenPan = tokenPan;
  }

  public ClearingRecordRequestModel mti(MtiEnum mti) {
    this.mti = mti;
    return this;
  }

   /**
   * Get mti
   * @return mti
  **/
  @ApiModelProperty(value = "")
  public MtiEnum getMti() {
    return mti;
  }

  public void setMti(MtiEnum mti) {
    this.mti = mti;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClearingRecordRequestModel clearingRecordRequestModel = (ClearingRecordRequestModel) o;
    return Objects.equals(this.networkFees, clearingRecordRequestModel.networkFees) &&
        Objects.equals(this.webhook, clearingRecordRequestModel.webhook) &&
        Objects.equals(this.mid, clearingRecordRequestModel.mid) &&
        Objects.equals(this.amount, clearingRecordRequestModel.amount) &&
        Objects.equals(this.sourceAmount, clearingRecordRequestModel.sourceAmount) &&
        Objects.equals(this.reconciliationAmount, clearingRecordRequestModel.reconciliationAmount) &&
        Objects.equals(this.replacementAmount, clearingRecordRequestModel.replacementAmount) &&
        Objects.equals(this.cardholderBillingAmount, clearingRecordRequestModel.cardholderBillingAmount) &&
        Objects.equals(this.cashback, clearingRecordRequestModel.cashback) &&
        Objects.equals(this.cardholderBillingConversionRate, clearingRecordRequestModel.cardholderBillingConversionRate) &&
        Objects.equals(this.cardholderBillingCurrency, clearingRecordRequestModel.cardholderBillingCurrency) &&
        Objects.equals(this.cardToken, clearingRecordRequestModel.cardToken) &&
        Objects.equals(this.acquirerReferenceId, clearingRecordRequestModel.acquirerReferenceId) &&
        Objects.equals(this.rrn, clearingRecordRequestModel.rrn) &&
        Objects.equals(this.stan, clearingRecordRequestModel.stan) &&
        Objects.equals(this.processingCode, clearingRecordRequestModel.processingCode) &&
        Objects.equals(this.acquirerFee, clearingRecordRequestModel.acquirerFee) &&
        Objects.equals(this.issuerFee, clearingRecordRequestModel.issuerFee) &&
        Objects.equals(this.functionCode, clearingRecordRequestModel.functionCode) &&
        Objects.equals(this.reasonCode, clearingRecordRequestModel.reasonCode) &&
        Objects.equals(this.approvalCode, clearingRecordRequestModel.approvalCode) &&
        Objects.equals(this.transactionDate, clearingRecordRequestModel.transactionDate) &&
        Objects.equals(this.localTransactionDate, clearingRecordRequestModel.localTransactionDate) &&
        Objects.equals(this.settlementDate, clearingRecordRequestModel.settlementDate) &&
        Objects.equals(this.networkReferenceId, clearingRecordRequestModel.networkReferenceId) &&
        Objects.equals(this.findOriginalWindowDays, clearingRecordRequestModel.findOriginalWindowDays) &&
        Objects.equals(this.batchNumber, clearingRecordRequestModel.batchNumber) &&
        Objects.equals(this.batchFileName, clearingRecordRequestModel.batchFileName) &&
        Objects.equals(this.sequenceNumber, clearingRecordRequestModel.sequenceNumber) &&
        Objects.equals(this.network, clearingRecordRequestModel.network) &&
        Objects.equals(this.subNetwork, clearingRecordRequestModel.subNetwork) &&
        Objects.equals(this.cardAcceptor, clearingRecordRequestModel.cardAcceptor) &&
        Objects.equals(this.currencyCode, clearingRecordRequestModel.currencyCode) &&
        Objects.equals(this.originalDataElements, clearingRecordRequestModel.originalDataElements) &&
        Objects.equals(this.precedingRelatedTransactionToken, clearingRecordRequestModel.precedingRelatedTransactionToken) &&
        Objects.equals(this.sendExpirationDate, clearingRecordRequestModel.sendExpirationDate) &&
        Objects.equals(this.simulateBatchForClearingRecordHash, clearingRecordRequestModel.simulateBatchForClearingRecordHash) &&
        Objects.equals(this.crossBorderIndicator, clearingRecordRequestModel.crossBorderIndicator) &&
        Objects.equals(this.tokenPan, clearingRecordRequestModel.tokenPan) &&
        Objects.equals(this.mti, clearingRecordRequestModel.mti);
  }

  @Override
  public int hashCode() {
    return Objects.hash(networkFees, webhook, mid, amount, sourceAmount, reconciliationAmount, replacementAmount, cardholderBillingAmount, cashback, cardholderBillingConversionRate, cardholderBillingCurrency, cardToken, acquirerReferenceId, rrn, stan, processingCode, acquirerFee, issuerFee, functionCode, reasonCode, approvalCode, transactionDate, localTransactionDate, settlementDate, networkReferenceId, findOriginalWindowDays, batchNumber, batchFileName, sequenceNumber, network, subNetwork, cardAcceptor, currencyCode, originalDataElements, precedingRelatedTransactionToken, sendExpirationDate, simulateBatchForClearingRecordHash, crossBorderIndicator, tokenPan, mti);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClearingRecordRequestModel {\n");
    
    sb.append("    networkFees: ").append(toIndentedString(networkFees)).append("\n");
    sb.append("    webhook: ").append(toIndentedString(webhook)).append("\n");
    sb.append("    mid: ").append(toIndentedString(mid)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    sourceAmount: ").append(toIndentedString(sourceAmount)).append("\n");
    sb.append("    reconciliationAmount: ").append(toIndentedString(reconciliationAmount)).append("\n");
    sb.append("    replacementAmount: ").append(toIndentedString(replacementAmount)).append("\n");
    sb.append("    cardholderBillingAmount: ").append(toIndentedString(cardholderBillingAmount)).append("\n");
    sb.append("    cashback: ").append(toIndentedString(cashback)).append("\n");
    sb.append("    cardholderBillingConversionRate: ").append(toIndentedString(cardholderBillingConversionRate)).append("\n");
    sb.append("    cardholderBillingCurrency: ").append(toIndentedString(cardholderBillingCurrency)).append("\n");
    sb.append("    cardToken: ").append(toIndentedString(cardToken)).append("\n");
    sb.append("    acquirerReferenceId: ").append(toIndentedString(acquirerReferenceId)).append("\n");
    sb.append("    rrn: ").append(toIndentedString(rrn)).append("\n");
    sb.append("    stan: ").append(toIndentedString(stan)).append("\n");
    sb.append("    processingCode: ").append(toIndentedString(processingCode)).append("\n");
    sb.append("    acquirerFee: ").append(toIndentedString(acquirerFee)).append("\n");
    sb.append("    issuerFee: ").append(toIndentedString(issuerFee)).append("\n");
    sb.append("    functionCode: ").append(toIndentedString(functionCode)).append("\n");
    sb.append("    reasonCode: ").append(toIndentedString(reasonCode)).append("\n");
    sb.append("    approvalCode: ").append(toIndentedString(approvalCode)).append("\n");
    sb.append("    transactionDate: ").append(toIndentedString(transactionDate)).append("\n");
    sb.append("    localTransactionDate: ").append(toIndentedString(localTransactionDate)).append("\n");
    sb.append("    settlementDate: ").append(toIndentedString(settlementDate)).append("\n");
    sb.append("    networkReferenceId: ").append(toIndentedString(networkReferenceId)).append("\n");
    sb.append("    findOriginalWindowDays: ").append(toIndentedString(findOriginalWindowDays)).append("\n");
    sb.append("    batchNumber: ").append(toIndentedString(batchNumber)).append("\n");
    sb.append("    batchFileName: ").append(toIndentedString(batchFileName)).append("\n");
    sb.append("    sequenceNumber: ").append(toIndentedString(sequenceNumber)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    subNetwork: ").append(toIndentedString(subNetwork)).append("\n");
    sb.append("    cardAcceptor: ").append(toIndentedString(cardAcceptor)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    originalDataElements: ").append(toIndentedString(originalDataElements)).append("\n");
    sb.append("    precedingRelatedTransactionToken: ").append(toIndentedString(precedingRelatedTransactionToken)).append("\n");
    sb.append("    sendExpirationDate: ").append(toIndentedString(sendExpirationDate)).append("\n");
    sb.append("    simulateBatchForClearingRecordHash: ").append(toIndentedString(simulateBatchForClearingRecordHash)).append("\n");
    sb.append("    crossBorderIndicator: ").append(toIndentedString(crossBorderIndicator)).append("\n");
    sb.append("    tokenPan: ").append(toIndentedString(tokenPan)).append("\n");
    sb.append("    mti: ").append(toIndentedString(mti)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

