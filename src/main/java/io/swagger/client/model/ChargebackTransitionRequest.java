/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

/**
 * ChargebackTransitionRequest
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-06-07T21:08:00.979Z")
public class ChargebackTransitionRequest {
  @SerializedName("token")
  private String token = null;

  /**
   * Gets or Sets state
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    REPRESENTMENT("REPRESENTMENT"),
    
    PREARBITRATION("PREARBITRATION"),
    
    ARBITRATION("ARBITRATION"),
    
    CASE_WON("CASE_WON"),
    
    CASE_LOST("CASE_LOST"),
    
    WRITTEN_OFF_ISSUER("WRITTEN_OFF_ISSUER"),
    
    WRITTEN_OFF_PROGRAM("WRITTEN_OFF_PROGRAM");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String text) {
      for (StateEnum b : StateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StateEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("state")
  private StateEnum state = null;

  @SerializedName("chargeback_token")
  private String chargebackToken = null;

  @SerializedName("reason")
  private String reason = null;

  @SerializedName("amount")
  private BigDecimal amount = null;

  public ChargebackTransitionRequest token(String token) {
    this.token = token;
    return this;
  }

   /**
   * Get token
   * @return token
  **/
  @ApiModelProperty(value = "")
  public String getToken() {
    return token;
  }

  public void setToken(String token) {
    this.token = token;
  }

  public ChargebackTransitionRequest state(StateEnum state) {
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @ApiModelProperty(required = true, value = "")
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }

  public ChargebackTransitionRequest chargebackToken(String chargebackToken) {
    this.chargebackToken = chargebackToken;
    return this;
  }

   /**
   * Get chargebackToken
   * @return chargebackToken
  **/
  @ApiModelProperty(required = true, value = "")
  public String getChargebackToken() {
    return chargebackToken;
  }

  public void setChargebackToken(String chargebackToken) {
    this.chargebackToken = chargebackToken;
  }

  public ChargebackTransitionRequest reason(String reason) {
    this.reason = reason;
    return this;
  }

   /**
   * Get reason
   * @return reason
  **/
  @ApiModelProperty(value = "")
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }

  public ChargebackTransitionRequest amount(BigDecimal amount) {
    this.amount = amount;
    return this;
  }

   /**
   * Representment or prearbitration amount; this is for transitioning to Representment or Prearbitration only
   * minimum: 0.01
   * @return amount
  **/
  @ApiModelProperty(value = "Representment or prearbitration amount; this is for transitioning to Representment or Prearbitration only")
  public BigDecimal getAmount() {
    return amount;
  }

  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChargebackTransitionRequest chargebackTransitionRequest = (ChargebackTransitionRequest) o;
    return Objects.equals(this.token, chargebackTransitionRequest.token) &&
        Objects.equals(this.state, chargebackTransitionRequest.state) &&
        Objects.equals(this.chargebackToken, chargebackTransitionRequest.chargebackToken) &&
        Objects.equals(this.reason, chargebackTransitionRequest.reason) &&
        Objects.equals(this.amount, chargebackTransitionRequest.amount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(token, state, chargebackToken, reason, amount);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChargebackTransitionRequest {\n");
    
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    chargebackToken: ").append(toIndentedString(chargebackToken)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

