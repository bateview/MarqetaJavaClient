/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.AddressVerificationModel;
import io.swagger.client.model.TransactionCardAcceptorViewModelV1;
import java.io.IOException;
import java.math.BigDecimal;
import org.threeten.bp.OffsetDateTime;

/**
 * FraudStreamRequest
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-06-07T21:08:00.979Z")
public class FraudStreamRequest {
  @SerializedName("program")
  private String program = null;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    GPA_CREDIT_PENDING("GPA_CREDIT_PENDING"),
    
    GPA_CREDIT_PENDING_REVERSAL("GPA_CREDIT_PENDING_REVERSAL"),
    
    GPA_CREDIT_REVERSAL("GPA_CREDIT_REVERSAL"),
    
    GPA_CREDIT("GPA_CREDIT"),
    
    GPA_DEBIT("GPA_DEBIT"),
    
    GPA_DEBIT_PENDING_REVERSAL("GPA_DEBIT_PENDING_REVERSAL"),
    
    GPA_DEBIT_REVERSAL("GPA_DEBIT_REVERSAL"),
    
    GPA_GRANT("GPA_GRANT"),
    
    GPA_CREDIT_NETWORK_LOAD("GPA_CREDIT_NETWORK_LOAD"),
    
    GPA_CREDIT_NETWORK_LOAD_CLEARING("GPA_CREDIT_NETWORK_LOAD_CLEARING"),
    
    GPA_CREDIT_NETWORK_LOAD_REVERSAL("GPA_CREDIT_NETWORK_LOAD_REVERSAL"),
    
    GPA_DEBIT_NETWORK_LOAD("GPA_DEBIT_NETWORK_LOAD"),
    
    GPA_DEBIT_NETWORK_LOAD_CLEARING("GPA_DEBIT_NETWORK_LOAD_CLEARING"),
    
    GPA_DEBIT_NETWORK_LOAD_REVERSAL("GPA_DEBIT_NETWORK_LOAD_REVERSAL"),
    
    ORIGINAL_CREDIT_AUTH("ORIGINAL_CREDIT_AUTH"),
    
    ORIGINAL_CREDIT_AUTH_CLEARING("ORIGINAL_CREDIT_AUTH_CLEARING"),
    
    ORIGINAL_CREDIT_AUTH_REVERSAL("ORIGINAL_CREDIT_AUTH_REVERSAL"),
    
    ORIGINAL_CREDIT_AUTH_CAPTURE("ORIGINAL_CREDIT_AUTH_CAPTURE"),
    
    ORIGINAL_CREDIT_AUTH_CAPTURE_REVERSAL("ORIGINAL_CREDIT_AUTH_CAPTURE_REVERSAL"),
    
    GPA_CREDIT_ISSUER_OPERATOR("GPA_CREDIT_ISSUER_OPERATOR"),
    
    GPA_DEBIT_ISSUER_OPERATOR("GPA_DEBIT_ISSUER_OPERATOR"),
    
    GPA_DEBIT_AUTHORIZATION("GPA_DEBIT_AUTHORIZATION"),
    
    GPA_CREDIT_AUTHORIZATION("GPA_CREDIT_AUTHORIZATION"),
    
    GPA_CREDIT_AUTHORIZATION_REVERSAL("GPA_CREDIT_AUTHORIZATION_REVERSAL"),
    
    GPA_CREDIT_CHARGEBACK("GPA_CREDIT_CHARGEBACK"),
    
    GPA_CREDIT_CHARGEBACK_REVERSAL("GPA_CREDIT_CHARGEBACK_REVERSAL"),
    
    GPA_CREDIT_BILLPAYMENT("GPA_CREDIT_BILLPAYMENT"),
    
    GPA_CREDIT_AUTHORIZATION_BILLPAYMENT("GPA_CREDIT_AUTHORIZATION_BILLPAYMENT"),
    
    GPA_CREDIT_AUTHORIZATION_BILLPAYMENT_REVERSAL("GPA_CREDIT_AUTHORIZATION_BILLPAYMENT_REVERSAL"),
    
    MSA_CREDIT_PENDING("MSA_CREDIT_PENDING"),
    
    MSA_CREDIT_PENDING_REVERSAL("MSA_CREDIT_PENDING_REVERSAL"),
    
    MSA_CREDIT_REVERSAL("MSA_CREDIT_REVERSAL"),
    
    MSA_CREDIT("MSA_CREDIT"),
    
    MSA_DEBIT_REVERSAL("MSA_DEBIT_REVERSAL"),
    
    MSA_DEBIT_PENDING_REVERSAL("MSA_DEBIT_PENDING_REVERSAL"),
    
    MSA_DEBIT("MSA_DEBIT"),
    
    MSA_CREDIT_AUTHORIZATION("MSA_CREDIT_AUTHORIZATION"),
    
    MSA_CREDIT_AUTHORIZATION_REVERSAL("MSA_CREDIT_AUTHORIZATION_REVERSAL"),
    
    MSA_CREDIT_CHARGEBACK("MSA_CREDIT_CHARGEBACK"),
    
    MSA_CREDIT_CHARGEBACK_REVERSAL("MSA_CREDIT_CHARGEBACK_REVERSAL"),
    
    AUTHORIZATION("AUTHORIZATION"),
    
    AUTHORIZATION_INCREMENTAL("AUTHORIZATION_INCREMENTAL"),
    
    AUTHORIZATION_ADVICE("AUTHORIZATION_ADVICE"),
    
    AUTHORIZATION_REVERSAL("AUTHORIZATION_REVERSAL"),
    
    AUTHORIZATION_CASHBACK("AUTHORIZATION_CASHBACK"),
    
    AUTHORIZATION_QUASI_CASH("AUTHORIZATION_QUASI_CASH"),
    
    AUTHORIZATION_ATM_WITHDRAWAL("AUTHORIZATION_ATM_WITHDRAWAL"),
    
    AUTHORIZATION_CLEARING("AUTHORIZATION_CLEARING"),
    
    AUTHORIZATION_CLEARING_NETWORK_FEE("AUTHORIZATION_CLEARING_NETWORK_FEE"),
    
    AUTHORIZATION_CLEARING_REPRESENTMENT("AUTHORIZATION_CLEARING_REPRESENTMENT"),
    
    AUTHORIZATION_REVERSAL_ISSUER_EXPIRATION("AUTHORIZATION_REVERSAL_ISSUER_EXPIRATION"),
    
    DISPUTE_CREDIT("DISPUTE_CREDIT"),
    
    DISPUTE_DEBIT("DISPUTE_DEBIT"),
    
    AUTHORIZATION_CLEARING_CHARGEBACK("AUTHORIZATION_CLEARING_CHARGEBACK"),
    
    AUTHORIZATION_CLEARING_CHARGEBACK_REVERSAL("AUTHORIZATION_CLEARING_CHARGEBACK_REVERSAL"),
    
    AUTHORIZATION_CLEARING_CHARGEBACK_COMPLETED("AUTHORIZATION_CLEARING_CHARGEBACK_COMPLETED"),
    
    AUTHORIZATION_CLEARING_CHARGEBACK_PROVISIONAL_CREDIT("AUTHORIZATION_CLEARING_CHARGEBACK_PROVISIONAL_CREDIT"),
    
    AUTHORIZATION_CLEARING_CHARGEBACK_PROVISIONAL_DEBIT("AUTHORIZATION_CLEARING_CHARGEBACK_PROVISIONAL_DEBIT"),
    
    AUTHORIZATION_CLEARING_CHARGEBACK_WRITEOFF("AUTHORIZATION_CLEARING_CHARGEBACK_WRITEOFF"),
    
    AUTHORIZATION_CLEARING_CASHBACK("AUTHORIZATION_CLEARING_CASHBACK"),
    
    AUTHORIZATION_CLEARING_QUASI_CASH("AUTHORIZATION_CLEARING_QUASI_CASH"),
    
    AUTHORIZATION_CLEARING_ATM_WITHDRAWAL("AUTHORIZATION_CLEARING_ATM_WITHDRAWAL"),
    
    ACCOUNT_FUNDING_AUTHORIZATION("ACCOUNT_FUNDING_AUTHORIZATION"),
    
    ACCOUNT_FUNDING_AUTHORIZATION_CLEARING("ACCOUNT_FUNDING_AUTHORIZATION_CLEARING"),
    
    ACCOUNT_FUNDING_PLUS_AUTH_CAPTURE("ACCOUNT_FUNDING_PLUS_AUTH_CAPTURE"),
    
    ACCOUNT_FUNDING_AUTHORIZATION_REVERSAL("ACCOUNT_FUNDING_AUTHORIZATION_REVERSAL"),
    
    ACCOUNT_FUNDING_PLUS_AUTH_CAPTURE_REVERSAL("ACCOUNT_FUNDING_PLUS_AUTH_CAPTURE_REVERSAL"),
    
    BALANCE_INQUIRY("BALANCE_INQUIRY"),
    
    REFUND("REFUND"),
    
    PIN_DEBIT_CREDIT_ADJUSTMENT("PIN_DEBIT_CREDIT_ADJUSTMENT"),
    
    PIN_DEBIT_DEBIT_ADJUSTMENT("PIN_DEBIT_DEBIT_ADJUSTMENT"),
    
    PIN_DEBIT_ATM_WITHDRAWAL("PIN_DEBIT_ATM_WITHDRAWAL"),
    
    PIN_DEBIT_QUASI_CASH("PIN_DEBIT_QUASI_CASH"),
    
    PIN_DEBIT_BALANCE_INQUIRY("PIN_DEBIT_BALANCE_INQUIRY"),
    
    PIN_DEBIT_CASHBACK("PIN_DEBIT_CASHBACK"),
    
    PIN_DEBIT_CHECK_AVS("PIN_DEBIT_CHECK_AVS"),
    
    PIN_DEBIT_FINANCIAL_DEPOSIT("PIN_DEBIT_FINANCIAL_DEPOSIT"),
    
    PIN_DEBIT_FINANCIAL_REFUND("PIN_DEBIT_FINANCIAL_REFUND"),
    
    PIN_DEBIT_FINANCIAL_REVERSAL("PIN_DEBIT_FINANCIAL_REVERSAL"),
    
    PIN_DEBIT_FINANCIAL_REFUND_REVERSAL("PIN_DEBIT_FINANCIAL_REFUND_REVERSAL"),
    
    PIN_DEBIT_TRANSFER("PIN_DEBIT_TRANSFER"),
    
    PIN_DEBIT("PIN_DEBIT"),
    
    PIN_DEBIT_REPRESENTMENT("PIN_DEBIT_REPRESENTMENT"),
    
    PIN_DEBIT_AUTHORIZATION("PIN_DEBIT_AUTHORIZATION"),
    
    PIN_DEBIT_AUTHORIZATION_CLEARING("PIN_DEBIT_AUTHORIZATION_CLEARING"),
    
    PIN_DEBIT_AUTHORIZATION_REVERSAL("PIN_DEBIT_AUTHORIZATION_REVERSAL"),
    
    PIN_DEBIT_AUTHORIZATION_REVERSAL_ISSUER_EXPIRATION("PIN_DEBIT_AUTHORIZATION_REVERSAL_ISSUER_EXPIRATION"),
    
    PIN_DEBIT_CHARGEBACK("PIN_DEBIT_CHARGEBACK"),
    
    PIN_DEBIT_CHARGEBACK_REVERSAL("PIN_DEBIT_CHARGEBACK_REVERSAL"),
    
    PIN_DEBIT_CHARGEBACK_COMPLETED("PIN_DEBIT_CHARGEBACK_COMPLETED"),
    
    PIN_DEBIT_CHARGEBACK_PROVISIONAL_CREDIT("PIN_DEBIT_CHARGEBACK_PROVISIONAL_CREDIT"),
    
    PIN_DEBIT_CHARGEBACK_PROVISIONAL_DEBIT("PIN_DEBIT_CHARGEBACK_PROVISIONAL_DEBIT"),
    
    PIN_DEBIT_CHARGEBACK_WRITEOFF("PIN_DEBIT_CHARGEBACK_WRITEOFF"),
    
    DIRECT_DEPOSIT_CREDIT("DIRECT_DEPOSIT_CREDIT"),
    
    DIRECT_DEPOSIT_DEBIT("DIRECT_DEPOSIT_DEBIT"),
    
    DIRECT_DEPOSIT_CREDIT_PENDING("DIRECT_DEPOSIT_CREDIT_PENDING"),
    
    DIRECT_DEPOSIT_DEBIT_PENDING("DIRECT_DEPOSIT_DEBIT_PENDING"),
    
    DIRECT_DEPOSIT_CREDIT_REJECT("DIRECT_DEPOSIT_CREDIT_REJECT"),
    
    DIRECT_DEPOSIT_DEBIT_REJECT("DIRECT_DEPOSIT_DEBIT_REJECT"),
    
    DIRECT_DEPOSIT_CREDIT_PENDING_REVERSAL("DIRECT_DEPOSIT_CREDIT_PENDING_REVERSAL"),
    
    DIRECT_DEPOSIT_DEBIT_PENDING_REVERSAL("DIRECT_DEPOSIT_DEBIT_PENDING_REVERSAL"),
    
    DIRECT_DEPOSIT_CREDIT_REVERSAL("DIRECT_DEPOSIT_CREDIT_REVERSAL"),
    
    DIRECT_DEPOSIT_DEBIT_REVERSAL("DIRECT_DEPOSIT_DEBIT_REVERSAL"),
    
    FEE_CHARGE_PENDING("FEE_CHARGE_PENDING"),
    
    FEE_CHARGE("FEE_CHARGE"),
    
    FEE_CHARGE_REFUND("FEE_CHARGE_REFUND"),
    
    FUNDS_EXPIRE("FUNDS_EXPIRE"),
    
    PROGRAMRESERVE_CREDIT("PROGRAMRESERVE_CREDIT"),
    
    PROGRAMRESERVE_DEBIT("PROGRAMRESERVE_DEBIT"),
    
    REWARD_EARN("REWARD_EARN"),
    
    TRANSFER_PEER("TRANSFER_PEER"),
    
    TRANSFER_FEE("TRANSFER_FEE"),
    
    ACCOUNT_CREDIT("ACCOUNT_CREDIT"),
    
    ACCOUNT_DEBIT("ACCOUNT_DEBIT"),
    
    TRANSFER_PROGRAM("TRANSFER_PROGRAM"),
    
    AUTHORIZATION_STANDIN("AUTHORIZATION_STANDIN"),
    
    PIN_DEBIT_STANDIN("PIN_DEBIT_STANDIN"),
    
    TOKEN_ACTIVATION_REQUEST("TOKEN_ACTIVATION_REQUEST"),
    
    TOKEN_ADVICE("TOKEN_ADVICE"),
    
    PTC_DEBIT("PTC_DEBIT"),
    
    PTC_PENDING_DB("PTC_PENDING_DB"),
    
    PTC_DB_REV("PTC_DB_REV"),
    
    BILLPAYMENT("BILLPAYMENT"),
    
    BILLPAYMENT_CLEARING("BILLPAYMENT_CLEARING"),
    
    BILLPAYMENT_REVERSAL("BILLPAYMENT_REVERSAL"),
    
    RETURN_AUTHORIZATION("RETURN_AUTHORIZATION"),
    
    RETURN_AUTHORIZATION_CLEARING("RETURN_AUTHORIZATION_CLEARING"),
    
    RETURN_AUTHORIZATION_REVERSAL("RETURN_AUTHORIZATION_REVERSAL"),
    
    ACH_PUSH_PENDING("ACH_PUSH_PENDING"),
    
    ACH_PULL_PENDING("ACH_PULL_PENDING"),
    
    ACH_PUSH("ACH_PUSH"),
    
    ACH_PULL("ACH_PULL"),
    
    UNKNOWN("UNKNOWN");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("type")
  private TypeEnum type = null;

  /**
   * Gets or Sets state
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    PENDING("PENDING"),
    
    CLEARED("CLEARED"),
    
    COMPLETION("COMPLETION"),
    
    DECLINED("DECLINED"),
    
    ERROR("ERROR"),
    
    ALL("ALL");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String text) {
      for (StateEnum b : StateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StateEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("state")
  private StateEnum state = null;

  @SerializedName("itc")
  private String itc = null;

  @SerializedName("token")
  private String token = null;

  @SerializedName("user_token")
  private String userToken = null;

  @SerializedName("acting_user_token")
  private String actingUserToken = null;

  @SerializedName("card_token")
  private String cardToken = null;

  @SerializedName("user_transaction_time")
  private OffsetDateTime userTransactionTime = null;

  @SerializedName("request_amount")
  private BigDecimal requestAmount = null;

  @SerializedName("amount")
  private BigDecimal amount = null;

  @SerializedName("currency_code")
  private String currencyCode = null;

  @SerializedName("network")
  private String network = null;

  @SerializedName("account_risk_score")
  private String accountRiskScore = null;

  @SerializedName("account_risk_score_reason_code")
  private String accountRiskScoreReasonCode = null;

  @SerializedName("transaction_risk_score")
  private Integer transactionRiskScore = null;

  @SerializedName("transaction_risk_score_reason_code")
  private String transactionRiskScoreReasonCode = null;

  @SerializedName("card_acceptor")
  private TransactionCardAcceptorViewModelV1 cardAcceptor = null;

  @SerializedName("address_verification")
  private AddressVerificationModel addressVerification = null;

  public FraudStreamRequest program(String program) {
    this.program = program;
    return this;
  }

   /**
   * Get program
   * @return program
  **/
  @ApiModelProperty(value = "")
  public String getProgram() {
    return program;
  }

  public void setProgram(String program) {
    this.program = program;
  }

  public FraudStreamRequest type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @ApiModelProperty(value = "")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public FraudStreamRequest state(StateEnum state) {
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @ApiModelProperty(value = "")
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }

  public FraudStreamRequest itc(String itc) {
    this.itc = itc;
    return this;
  }

   /**
   * Get itc
   * @return itc
  **/
  @ApiModelProperty(value = "")
  public String getItc() {
    return itc;
  }

  public void setItc(String itc) {
    this.itc = itc;
  }

  public FraudStreamRequest token(String token) {
    this.token = token;
    return this;
  }

   /**
   * Get token
   * @return token
  **/
  @ApiModelProperty(value = "")
  public String getToken() {
    return token;
  }

  public void setToken(String token) {
    this.token = token;
  }

  public FraudStreamRequest userToken(String userToken) {
    this.userToken = userToken;
    return this;
  }

   /**
   * Get userToken
   * @return userToken
  **/
  @ApiModelProperty(value = "")
  public String getUserToken() {
    return userToken;
  }

  public void setUserToken(String userToken) {
    this.userToken = userToken;
  }

  public FraudStreamRequest actingUserToken(String actingUserToken) {
    this.actingUserToken = actingUserToken;
    return this;
  }

   /**
   * Get actingUserToken
   * @return actingUserToken
  **/
  @ApiModelProperty(value = "")
  public String getActingUserToken() {
    return actingUserToken;
  }

  public void setActingUserToken(String actingUserToken) {
    this.actingUserToken = actingUserToken;
  }

  public FraudStreamRequest cardToken(String cardToken) {
    this.cardToken = cardToken;
    return this;
  }

   /**
   * Get cardToken
   * @return cardToken
  **/
  @ApiModelProperty(value = "")
  public String getCardToken() {
    return cardToken;
  }

  public void setCardToken(String cardToken) {
    this.cardToken = cardToken;
  }

  public FraudStreamRequest userTransactionTime(OffsetDateTime userTransactionTime) {
    this.userTransactionTime = userTransactionTime;
    return this;
  }

   /**
   * Get userTransactionTime
   * @return userTransactionTime
  **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getUserTransactionTime() {
    return userTransactionTime;
  }

  public void setUserTransactionTime(OffsetDateTime userTransactionTime) {
    this.userTransactionTime = userTransactionTime;
  }

  public FraudStreamRequest requestAmount(BigDecimal requestAmount) {
    this.requestAmount = requestAmount;
    return this;
  }

   /**
   * Get requestAmount
   * @return requestAmount
  **/
  @ApiModelProperty(value = "")
  public BigDecimal getRequestAmount() {
    return requestAmount;
  }

  public void setRequestAmount(BigDecimal requestAmount) {
    this.requestAmount = requestAmount;
  }

  public FraudStreamRequest amount(BigDecimal amount) {
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @ApiModelProperty(value = "")
  public BigDecimal getAmount() {
    return amount;
  }

  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }

  public FraudStreamRequest currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * Get currencyCode
   * @return currencyCode
  **/
  @ApiModelProperty(value = "")
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }

  public FraudStreamRequest network(String network) {
    this.network = network;
    return this;
  }

   /**
   * Get network
   * @return network
  **/
  @ApiModelProperty(value = "")
  public String getNetwork() {
    return network;
  }

  public void setNetwork(String network) {
    this.network = network;
  }

  public FraudStreamRequest accountRiskScore(String accountRiskScore) {
    this.accountRiskScore = accountRiskScore;
    return this;
  }

   /**
   * Get accountRiskScore
   * @return accountRiskScore
  **/
  @ApiModelProperty(value = "")
  public String getAccountRiskScore() {
    return accountRiskScore;
  }

  public void setAccountRiskScore(String accountRiskScore) {
    this.accountRiskScore = accountRiskScore;
  }

  public FraudStreamRequest accountRiskScoreReasonCode(String accountRiskScoreReasonCode) {
    this.accountRiskScoreReasonCode = accountRiskScoreReasonCode;
    return this;
  }

   /**
   * Get accountRiskScoreReasonCode
   * @return accountRiskScoreReasonCode
  **/
  @ApiModelProperty(value = "")
  public String getAccountRiskScoreReasonCode() {
    return accountRiskScoreReasonCode;
  }

  public void setAccountRiskScoreReasonCode(String accountRiskScoreReasonCode) {
    this.accountRiskScoreReasonCode = accountRiskScoreReasonCode;
  }

  public FraudStreamRequest transactionRiskScore(Integer transactionRiskScore) {
    this.transactionRiskScore = transactionRiskScore;
    return this;
  }

   /**
   * Get transactionRiskScore
   * @return transactionRiskScore
  **/
  @ApiModelProperty(value = "")
  public Integer getTransactionRiskScore() {
    return transactionRiskScore;
  }

  public void setTransactionRiskScore(Integer transactionRiskScore) {
    this.transactionRiskScore = transactionRiskScore;
  }

  public FraudStreamRequest transactionRiskScoreReasonCode(String transactionRiskScoreReasonCode) {
    this.transactionRiskScoreReasonCode = transactionRiskScoreReasonCode;
    return this;
  }

   /**
   * Get transactionRiskScoreReasonCode
   * @return transactionRiskScoreReasonCode
  **/
  @ApiModelProperty(value = "")
  public String getTransactionRiskScoreReasonCode() {
    return transactionRiskScoreReasonCode;
  }

  public void setTransactionRiskScoreReasonCode(String transactionRiskScoreReasonCode) {
    this.transactionRiskScoreReasonCode = transactionRiskScoreReasonCode;
  }

  public FraudStreamRequest cardAcceptor(TransactionCardAcceptorViewModelV1 cardAcceptor) {
    this.cardAcceptor = cardAcceptor;
    return this;
  }

   /**
   * Get cardAcceptor
   * @return cardAcceptor
  **/
  @ApiModelProperty(value = "")
  public TransactionCardAcceptorViewModelV1 getCardAcceptor() {
    return cardAcceptor;
  }

  public void setCardAcceptor(TransactionCardAcceptorViewModelV1 cardAcceptor) {
    this.cardAcceptor = cardAcceptor;
  }

  public FraudStreamRequest addressVerification(AddressVerificationModel addressVerification) {
    this.addressVerification = addressVerification;
    return this;
  }

   /**
   * Get addressVerification
   * @return addressVerification
  **/
  @ApiModelProperty(value = "")
  public AddressVerificationModel getAddressVerification() {
    return addressVerification;
  }

  public void setAddressVerification(AddressVerificationModel addressVerification) {
    this.addressVerification = addressVerification;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FraudStreamRequest fraudStreamRequest = (FraudStreamRequest) o;
    return Objects.equals(this.program, fraudStreamRequest.program) &&
        Objects.equals(this.type, fraudStreamRequest.type) &&
        Objects.equals(this.state, fraudStreamRequest.state) &&
        Objects.equals(this.itc, fraudStreamRequest.itc) &&
        Objects.equals(this.token, fraudStreamRequest.token) &&
        Objects.equals(this.userToken, fraudStreamRequest.userToken) &&
        Objects.equals(this.actingUserToken, fraudStreamRequest.actingUserToken) &&
        Objects.equals(this.cardToken, fraudStreamRequest.cardToken) &&
        Objects.equals(this.userTransactionTime, fraudStreamRequest.userTransactionTime) &&
        Objects.equals(this.requestAmount, fraudStreamRequest.requestAmount) &&
        Objects.equals(this.amount, fraudStreamRequest.amount) &&
        Objects.equals(this.currencyCode, fraudStreamRequest.currencyCode) &&
        Objects.equals(this.network, fraudStreamRequest.network) &&
        Objects.equals(this.accountRiskScore, fraudStreamRequest.accountRiskScore) &&
        Objects.equals(this.accountRiskScoreReasonCode, fraudStreamRequest.accountRiskScoreReasonCode) &&
        Objects.equals(this.transactionRiskScore, fraudStreamRequest.transactionRiskScore) &&
        Objects.equals(this.transactionRiskScoreReasonCode, fraudStreamRequest.transactionRiskScoreReasonCode) &&
        Objects.equals(this.cardAcceptor, fraudStreamRequest.cardAcceptor) &&
        Objects.equals(this.addressVerification, fraudStreamRequest.addressVerification);
  }

  @Override
  public int hashCode() {
    return Objects.hash(program, type, state, itc, token, userToken, actingUserToken, cardToken, userTransactionTime, requestAmount, amount, currencyCode, network, accountRiskScore, accountRiskScoreReasonCode, transactionRiskScore, transactionRiskScoreReasonCode, cardAcceptor, addressVerification);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FraudStreamRequest {\n");
    
    sb.append("    program: ").append(toIndentedString(program)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    itc: ").append(toIndentedString(itc)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    userToken: ").append(toIndentedString(userToken)).append("\n");
    sb.append("    actingUserToken: ").append(toIndentedString(actingUserToken)).append("\n");
    sb.append("    cardToken: ").append(toIndentedString(cardToken)).append("\n");
    sb.append("    userTransactionTime: ").append(toIndentedString(userTransactionTime)).append("\n");
    sb.append("    requestAmount: ").append(toIndentedString(requestAmount)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    accountRiskScore: ").append(toIndentedString(accountRiskScore)).append("\n");
    sb.append("    accountRiskScoreReasonCode: ").append(toIndentedString(accountRiskScoreReasonCode)).append("\n");
    sb.append("    transactionRiskScore: ").append(toIndentedString(transactionRiskScore)).append("\n");
    sb.append("    transactionRiskScoreReasonCode: ").append(toIndentedString(transactionRiskScoreReasonCode)).append("\n");
    sb.append("    cardAcceptor: ").append(toIndentedString(cardAcceptor)).append("\n");
    sb.append("    addressVerification: ").append(toIndentedString(addressVerification)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

