/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;

/**
 * DirectDepositTransitionResponse
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-06-07T21:08:00.979Z")
public class DirectDepositTransitionResponse {
  /**
   * Gets or Sets channel
   */
  @JsonAdapter(ChannelEnum.Adapter.class)
  public enum ChannelEnum {
    API("API"),
    
    IVR("IVR"),
    
    FRAUD("FRAUD"),
    
    ADMIN("ADMIN"),
    
    SYSTEM("SYSTEM"),
    
    NETWORK("NETWORK"),
    
    PROD_SUPPORT("PROD_SUPPORT"),
    
    UNSUPPORTED("UNSUPPORTED");

    private String value;

    ChannelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChannelEnum fromValue(String text) {
      for (ChannelEnum b : ChannelEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ChannelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChannelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChannelEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ChannelEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("channel")
  private ChannelEnum channel = null;

  @SerializedName("token")
  private String token = null;

  @SerializedName("reason")
  private String reason = null;

  @SerializedName("type")
  private String type = null;

  @SerializedName("direct_deposit_token")
  private String directDepositToken = null;

  @SerializedName("transaction_token")
  private String transactionToken = null;

  /**
   * Gets or Sets state
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    PENDING("PENDING"),
    
    APPLIED("APPLIED"),
    
    REVERSED("REVERSED"),
    
    REJECTED("REJECTED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String text) {
      for (StateEnum b : StateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StateEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("state")
  private StateEnum state = null;

  @SerializedName("reason_code")
  private String reasonCode = null;

  @SerializedName("created_time")
  private OffsetDateTime createdTime = null;

  @SerializedName("direct_deposit_account_token")
  private String directDepositAccountToken = null;

  public DirectDepositTransitionResponse channel(ChannelEnum channel) {
    this.channel = channel;
    return this;
  }

   /**
   * Get channel
   * @return channel
  **/
  @ApiModelProperty(value = "")
  public ChannelEnum getChannel() {
    return channel;
  }

  public void setChannel(ChannelEnum channel) {
    this.channel = channel;
  }

  public DirectDepositTransitionResponse token(String token) {
    this.token = token;
    return this;
  }

   /**
   * Get token
   * @return token
  **/
  @ApiModelProperty(value = "")
  public String getToken() {
    return token;
  }

  public void setToken(String token) {
    this.token = token;
  }

  public DirectDepositTransitionResponse reason(String reason) {
    this.reason = reason;
    return this;
  }

   /**
   * Get reason
   * @return reason
  **/
  @ApiModelProperty(value = "")
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }

  public DirectDepositTransitionResponse type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @ApiModelProperty(value = "")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public DirectDepositTransitionResponse directDepositToken(String directDepositToken) {
    this.directDepositToken = directDepositToken;
    return this;
  }

   /**
   * Get directDepositToken
   * @return directDepositToken
  **/
  @ApiModelProperty(value = "")
  public String getDirectDepositToken() {
    return directDepositToken;
  }

  public void setDirectDepositToken(String directDepositToken) {
    this.directDepositToken = directDepositToken;
  }

  public DirectDepositTransitionResponse transactionToken(String transactionToken) {
    this.transactionToken = transactionToken;
    return this;
  }

   /**
   * Get transactionToken
   * @return transactionToken
  **/
  @ApiModelProperty(value = "")
  public String getTransactionToken() {
    return transactionToken;
  }

  public void setTransactionToken(String transactionToken) {
    this.transactionToken = transactionToken;
  }

  public DirectDepositTransitionResponse state(StateEnum state) {
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @ApiModelProperty(value = "")
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }

  public DirectDepositTransitionResponse reasonCode(String reasonCode) {
    this.reasonCode = reasonCode;
    return this;
  }

   /**
   * Get reasonCode
   * @return reasonCode
  **/
  @ApiModelProperty(value = "")
  public String getReasonCode() {
    return reasonCode;
  }

  public void setReasonCode(String reasonCode) {
    this.reasonCode = reasonCode;
  }

  public DirectDepositTransitionResponse createdTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
    return this;
  }

   /**
   * Get createdTime
   * @return createdTime
  **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getCreatedTime() {
    return createdTime;
  }

  public void setCreatedTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
  }

  public DirectDepositTransitionResponse directDepositAccountToken(String directDepositAccountToken) {
    this.directDepositAccountToken = directDepositAccountToken;
    return this;
  }

   /**
   * Get directDepositAccountToken
   * @return directDepositAccountToken
  **/
  @ApiModelProperty(value = "")
  public String getDirectDepositAccountToken() {
    return directDepositAccountToken;
  }

  public void setDirectDepositAccountToken(String directDepositAccountToken) {
    this.directDepositAccountToken = directDepositAccountToken;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DirectDepositTransitionResponse directDepositTransitionResponse = (DirectDepositTransitionResponse) o;
    return Objects.equals(this.channel, directDepositTransitionResponse.channel) &&
        Objects.equals(this.token, directDepositTransitionResponse.token) &&
        Objects.equals(this.reason, directDepositTransitionResponse.reason) &&
        Objects.equals(this.type, directDepositTransitionResponse.type) &&
        Objects.equals(this.directDepositToken, directDepositTransitionResponse.directDepositToken) &&
        Objects.equals(this.transactionToken, directDepositTransitionResponse.transactionToken) &&
        Objects.equals(this.state, directDepositTransitionResponse.state) &&
        Objects.equals(this.reasonCode, directDepositTransitionResponse.reasonCode) &&
        Objects.equals(this.createdTime, directDepositTransitionResponse.createdTime) &&
        Objects.equals(this.directDepositAccountToken, directDepositTransitionResponse.directDepositAccountToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(channel, token, reason, type, directDepositToken, transactionToken, state, reasonCode, createdTime, directDepositAccountToken);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DirectDepositTransitionResponse {\n");
    
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    directDepositToken: ").append(toIndentedString(directDepositToken)).append("\n");
    sb.append("    transactionToken: ").append(toIndentedString(transactionToken)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    reasonCode: ").append(toIndentedString(reasonCode)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    directDepositAccountToken: ").append(toIndentedString(directDepositAccountToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

