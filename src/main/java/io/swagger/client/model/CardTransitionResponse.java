/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.CardMetadata;
import io.swagger.client.model.CardholderMetadata;
import io.swagger.client.model.Fulfillment;
import io.swagger.client.model.ValidationsResponse;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;

/**
 * CardTransitionResponse
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-06-07T21:08:00.979Z")
public class CardTransitionResponse {
  @SerializedName("token")
  private String token = null;

  @SerializedName("card_token")
  private String cardToken = null;

  @SerializedName("user_token")
  private String userToken = null;

  /**
   * Gets or Sets state
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    ACTIVE("ACTIVE"),
    
    SUSPENDED("SUSPENDED"),
    
    TERMINATED("TERMINATED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String text) {
      for (StateEnum b : StateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StateEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("state")
  private StateEnum state = null;

  @SerializedName("reason")
  private String reason = null;

  /**
   * Gets or Sets reasonCode
   */
  @JsonAdapter(ReasonCodeEnum.Adapter.class)
  public enum ReasonCodeEnum {
    _00("00"),
    
    _01("01"),
    
    _02("02"),
    
    _03("03"),
    
    _04("04"),
    
    _05("05"),
    
    _06("06"),
    
    _07("07"),
    
    _08("08"),
    
    _09("09"),
    
    _10("10"),
    
    _11("11"),
    
    _12("12"),
    
    _13("13"),
    
    _14("14"),
    
    _15("15"),
    
    _16("16"),
    
    _17("17"),
    
    _18("18"),
    
    _19("19"),
    
    _20("20"),
    
    _21("21");

    private String value;

    ReasonCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReasonCodeEnum fromValue(String text) {
      for (ReasonCodeEnum b : ReasonCodeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ReasonCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReasonCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReasonCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ReasonCodeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("reason_code")
  private ReasonCodeEnum reasonCode = null;

  /**
   * Gets or Sets channel
   */
  @JsonAdapter(ChannelEnum.Adapter.class)
  public enum ChannelEnum {
    API("API"),
    
    IVR("IVR"),
    
    FRAUD("FRAUD"),
    
    ADMIN("ADMIN"),
    
    SYSTEM("SYSTEM");

    private String value;

    ChannelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChannelEnum fromValue(String text) {
      for (ChannelEnum b : ChannelEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ChannelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChannelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChannelEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ChannelEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("channel")
  private ChannelEnum channel = null;

  /**
   * Gets or Sets fulfillmentStatus
   */
  @JsonAdapter(FulfillmentStatusEnum.Adapter.class)
  public enum FulfillmentStatusEnum {
    ISSUED("ISSUED"),
    
    ORDERED("ORDERED"),
    
    REJECTED("REJECTED"),
    
    SHIPPED("SHIPPED"),
    
    DELIVERED("DELIVERED"),
    
    DIGITALLY_PRESENTED("DIGITALLY_PRESENTED");

    private String value;

    FulfillmentStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FulfillmentStatusEnum fromValue(String text) {
      for (FulfillmentStatusEnum b : FulfillmentStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<FulfillmentStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FulfillmentStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FulfillmentStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return FulfillmentStatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("fulfillment_status")
  private FulfillmentStatusEnum fulfillmentStatus = null;

  @SerializedName("validations")
  private ValidationsResponse validations = null;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    FULFILLMENT_ISSUED("fulfillment.issued"),
    
    STATE_ACTIVATED("state.activated"),
    
    STATE_SUSPENDED("state.suspended"),
    
    STATE_REINSTATED("state.reinstated"),
    
    STATE_TERMINATED("state.terminated"),
    
    FULFILLMENT_ORDERED("fulfillment.ordered"),
    
    FULFILLMENT_REJECTED("fulfillment.rejected"),
    
    FULFILLMENT_SHIPPED("fulfillment.shipped"),
    
    FULFILLMENT_DELIVERED("fulfillment.delivered"),
    
    FULFILLMENT_DIGITALLY_PRESENTED("fulfillment.digitally_presented");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("created_time")
  private OffsetDateTime createdTime = null;

  @SerializedName("card_product_token")
  private String cardProductToken = null;

  /**
   * Gets or Sets lastFour
   */
  @JsonAdapter(LastFourEnum.Adapter.class)
  public enum LastFourEnum {
    TRUE("true"),
    
    FALSE("false");

    private String value;

    LastFourEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LastFourEnum fromValue(String text) {
      for (LastFourEnum b : LastFourEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<LastFourEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LastFourEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LastFourEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return LastFourEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("last_four")
  private LastFourEnum lastFour = null;

  @SerializedName("pan")
  private String pan = null;

  @SerializedName("expiration")
  private String expiration = null;

  @SerializedName("expiration_time")
  private String expirationTime = null;

  @SerializedName("barcode")
  private String barcode = null;

  @SerializedName("pin_is_set")
  private Boolean pinIsSet = false;

  @SerializedName("fulfillment")
  private Fulfillment fulfillment = null;

  @SerializedName("bulk_issuance_token")
  private String bulkIssuanceToken = null;

  @SerializedName("reissue_pan_from_card_token")
  private String reissuePanFromCardToken = null;

  @SerializedName("user")
  private CardholderMetadata user = null;

  @SerializedName("card")
  private CardMetadata card = null;

  @SerializedName("expedite")
  private Boolean expedite = false;

  public CardTransitionResponse token(String token) {
    this.token = token;
    return this;
  }

   /**
   * Get token
   * @return token
  **/
  @ApiModelProperty(required = true, value = "")
  public String getToken() {
    return token;
  }

  public void setToken(String token) {
    this.token = token;
  }

  public CardTransitionResponse cardToken(String cardToken) {
    this.cardToken = cardToken;
    return this;
  }

   /**
   * Get cardToken
   * @return cardToken
  **/
  @ApiModelProperty(required = true, value = "")
  public String getCardToken() {
    return cardToken;
  }

  public void setCardToken(String cardToken) {
    this.cardToken = cardToken;
  }

  public CardTransitionResponse userToken(String userToken) {
    this.userToken = userToken;
    return this;
  }

   /**
   * Get userToken
   * @return userToken
  **/
  @ApiModelProperty(required = true, value = "")
  public String getUserToken() {
    return userToken;
  }

  public void setUserToken(String userToken) {
    this.userToken = userToken;
  }

  public CardTransitionResponse state(StateEnum state) {
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @ApiModelProperty(required = true, value = "")
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }

  public CardTransitionResponse reason(String reason) {
    this.reason = reason;
    return this;
  }

   /**
   * Get reason
   * @return reason
  **/
  @ApiModelProperty(value = "")
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }

  public CardTransitionResponse reasonCode(ReasonCodeEnum reasonCode) {
    this.reasonCode = reasonCode;
    return this;
  }

   /**
   * Get reasonCode
   * @return reasonCode
  **/
  @ApiModelProperty(value = "")
  public ReasonCodeEnum getReasonCode() {
    return reasonCode;
  }

  public void setReasonCode(ReasonCodeEnum reasonCode) {
    this.reasonCode = reasonCode;
  }

  public CardTransitionResponse channel(ChannelEnum channel) {
    this.channel = channel;
    return this;
  }

   /**
   * Get channel
   * @return channel
  **/
  @ApiModelProperty(required = true, value = "")
  public ChannelEnum getChannel() {
    return channel;
  }

  public void setChannel(ChannelEnum channel) {
    this.channel = channel;
  }

  public CardTransitionResponse fulfillmentStatus(FulfillmentStatusEnum fulfillmentStatus) {
    this.fulfillmentStatus = fulfillmentStatus;
    return this;
  }

   /**
   * Get fulfillmentStatus
   * @return fulfillmentStatus
  **/
  @ApiModelProperty(required = true, value = "")
  public FulfillmentStatusEnum getFulfillmentStatus() {
    return fulfillmentStatus;
  }

  public void setFulfillmentStatus(FulfillmentStatusEnum fulfillmentStatus) {
    this.fulfillmentStatus = fulfillmentStatus;
  }

  public CardTransitionResponse validations(ValidationsResponse validations) {
    this.validations = validations;
    return this;
  }

   /**
   * Get validations
   * @return validations
  **/
  @ApiModelProperty(value = "")
  public ValidationsResponse getValidations() {
    return validations;
  }

  public void setValidations(ValidationsResponse validations) {
    this.validations = validations;
  }

  public CardTransitionResponse type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @ApiModelProperty(required = true, value = "")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public CardTransitionResponse createdTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
    return this;
  }

   /**
   * Get createdTime
   * @return createdTime
  **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getCreatedTime() {
    return createdTime;
  }

  public void setCreatedTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
  }

  public CardTransitionResponse cardProductToken(String cardProductToken) {
    this.cardProductToken = cardProductToken;
    return this;
  }

   /**
   * Get cardProductToken
   * @return cardProductToken
  **/
  @ApiModelProperty(required = true, value = "")
  public String getCardProductToken() {
    return cardProductToken;
  }

  public void setCardProductToken(String cardProductToken) {
    this.cardProductToken = cardProductToken;
  }

  public CardTransitionResponse lastFour(LastFourEnum lastFour) {
    this.lastFour = lastFour;
    return this;
  }

   /**
   * Get lastFour
   * @return lastFour
  **/
  @ApiModelProperty(required = true, value = "")
  public LastFourEnum getLastFour() {
    return lastFour;
  }

  public void setLastFour(LastFourEnum lastFour) {
    this.lastFour = lastFour;
  }

  public CardTransitionResponse pan(String pan) {
    this.pan = pan;
    return this;
  }

   /**
   * Get pan
   * @return pan
  **/
  @ApiModelProperty(required = true, value = "")
  public String getPan() {
    return pan;
  }

  public void setPan(String pan) {
    this.pan = pan;
  }

  public CardTransitionResponse expiration(String expiration) {
    this.expiration = expiration;
    return this;
  }

   /**
   * Get expiration
   * @return expiration
  **/
  @ApiModelProperty(required = true, value = "")
  public String getExpiration() {
    return expiration;
  }

  public void setExpiration(String expiration) {
    this.expiration = expiration;
  }

  public CardTransitionResponse expirationTime(String expirationTime) {
    this.expirationTime = expirationTime;
    return this;
  }

   /**
   * Get expirationTime
   * @return expirationTime
  **/
  @ApiModelProperty(required = true, value = "")
  public String getExpirationTime() {
    return expirationTime;
  }

  public void setExpirationTime(String expirationTime) {
    this.expirationTime = expirationTime;
  }

  public CardTransitionResponse barcode(String barcode) {
    this.barcode = barcode;
    return this;
  }

   /**
   * Get barcode
   * @return barcode
  **/
  @ApiModelProperty(required = true, value = "")
  public String getBarcode() {
    return barcode;
  }

  public void setBarcode(String barcode) {
    this.barcode = barcode;
  }

  public CardTransitionResponse pinIsSet(Boolean pinIsSet) {
    this.pinIsSet = pinIsSet;
    return this;
  }

   /**
   * Get pinIsSet
   * @return pinIsSet
  **/
  @ApiModelProperty(required = true, value = "")
  public Boolean isPinIsSet() {
    return pinIsSet;
  }

  public void setPinIsSet(Boolean pinIsSet) {
    this.pinIsSet = pinIsSet;
  }

  public CardTransitionResponse fulfillment(Fulfillment fulfillment) {
    this.fulfillment = fulfillment;
    return this;
  }

   /**
   * Get fulfillment
   * @return fulfillment
  **/
  @ApiModelProperty(value = "")
  public Fulfillment getFulfillment() {
    return fulfillment;
  }

  public void setFulfillment(Fulfillment fulfillment) {
    this.fulfillment = fulfillment;
  }

  public CardTransitionResponse bulkIssuanceToken(String bulkIssuanceToken) {
    this.bulkIssuanceToken = bulkIssuanceToken;
    return this;
  }

   /**
   * Get bulkIssuanceToken
   * @return bulkIssuanceToken
  **/
  @ApiModelProperty(value = "")
  public String getBulkIssuanceToken() {
    return bulkIssuanceToken;
  }

  public void setBulkIssuanceToken(String bulkIssuanceToken) {
    this.bulkIssuanceToken = bulkIssuanceToken;
  }

  public CardTransitionResponse reissuePanFromCardToken(String reissuePanFromCardToken) {
    this.reissuePanFromCardToken = reissuePanFromCardToken;
    return this;
  }

   /**
   * Get reissuePanFromCardToken
   * @return reissuePanFromCardToken
  **/
  @ApiModelProperty(value = "")
  public String getReissuePanFromCardToken() {
    return reissuePanFromCardToken;
  }

  public void setReissuePanFromCardToken(String reissuePanFromCardToken) {
    this.reissuePanFromCardToken = reissuePanFromCardToken;
  }

  public CardTransitionResponse user(CardholderMetadata user) {
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @ApiModelProperty(value = "")
  public CardholderMetadata getUser() {
    return user;
  }

  public void setUser(CardholderMetadata user) {
    this.user = user;
  }

  public CardTransitionResponse card(CardMetadata card) {
    this.card = card;
    return this;
  }

   /**
   * Get card
   * @return card
  **/
  @ApiModelProperty(value = "")
  public CardMetadata getCard() {
    return card;
  }

  public void setCard(CardMetadata card) {
    this.card = card;
  }

  public CardTransitionResponse expedite(Boolean expedite) {
    this.expedite = expedite;
    return this;
  }

   /**
   * Get expedite
   * @return expedite
  **/
  @ApiModelProperty(value = "")
  public Boolean isExpedite() {
    return expedite;
  }

  public void setExpedite(Boolean expedite) {
    this.expedite = expedite;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardTransitionResponse cardTransitionResponse = (CardTransitionResponse) o;
    return Objects.equals(this.token, cardTransitionResponse.token) &&
        Objects.equals(this.cardToken, cardTransitionResponse.cardToken) &&
        Objects.equals(this.userToken, cardTransitionResponse.userToken) &&
        Objects.equals(this.state, cardTransitionResponse.state) &&
        Objects.equals(this.reason, cardTransitionResponse.reason) &&
        Objects.equals(this.reasonCode, cardTransitionResponse.reasonCode) &&
        Objects.equals(this.channel, cardTransitionResponse.channel) &&
        Objects.equals(this.fulfillmentStatus, cardTransitionResponse.fulfillmentStatus) &&
        Objects.equals(this.validations, cardTransitionResponse.validations) &&
        Objects.equals(this.type, cardTransitionResponse.type) &&
        Objects.equals(this.createdTime, cardTransitionResponse.createdTime) &&
        Objects.equals(this.cardProductToken, cardTransitionResponse.cardProductToken) &&
        Objects.equals(this.lastFour, cardTransitionResponse.lastFour) &&
        Objects.equals(this.pan, cardTransitionResponse.pan) &&
        Objects.equals(this.expiration, cardTransitionResponse.expiration) &&
        Objects.equals(this.expirationTime, cardTransitionResponse.expirationTime) &&
        Objects.equals(this.barcode, cardTransitionResponse.barcode) &&
        Objects.equals(this.pinIsSet, cardTransitionResponse.pinIsSet) &&
        Objects.equals(this.fulfillment, cardTransitionResponse.fulfillment) &&
        Objects.equals(this.bulkIssuanceToken, cardTransitionResponse.bulkIssuanceToken) &&
        Objects.equals(this.reissuePanFromCardToken, cardTransitionResponse.reissuePanFromCardToken) &&
        Objects.equals(this.user, cardTransitionResponse.user) &&
        Objects.equals(this.card, cardTransitionResponse.card) &&
        Objects.equals(this.expedite, cardTransitionResponse.expedite);
  }

  @Override
  public int hashCode() {
    return Objects.hash(token, cardToken, userToken, state, reason, reasonCode, channel, fulfillmentStatus, validations, type, createdTime, cardProductToken, lastFour, pan, expiration, expirationTime, barcode, pinIsSet, fulfillment, bulkIssuanceToken, reissuePanFromCardToken, user, card, expedite);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardTransitionResponse {\n");
    
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    cardToken: ").append(toIndentedString(cardToken)).append("\n");
    sb.append("    userToken: ").append(toIndentedString(userToken)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    reasonCode: ").append(toIndentedString(reasonCode)).append("\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    fulfillmentStatus: ").append(toIndentedString(fulfillmentStatus)).append("\n");
    sb.append("    validations: ").append(toIndentedString(validations)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    cardProductToken: ").append(toIndentedString(cardProductToken)).append("\n");
    sb.append("    lastFour: ").append(toIndentedString(lastFour)).append("\n");
    sb.append("    pan: ").append(toIndentedString(pan)).append("\n");
    sb.append("    expiration: ").append(toIndentedString(expiration)).append("\n");
    sb.append("    expirationTime: ").append(toIndentedString(expirationTime)).append("\n");
    sb.append("    barcode: ").append(toIndentedString(barcode)).append("\n");
    sb.append("    pinIsSet: ").append(toIndentedString(pinIsSet)).append("\n");
    sb.append("    fulfillment: ").append(toIndentedString(fulfillment)).append("\n");
    sb.append("    bulkIssuanceToken: ").append(toIndentedString(bulkIssuanceToken)).append("\n");
    sb.append("    reissuePanFromCardToken: ").append(toIndentedString(reissuePanFromCardToken)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    card: ").append(toIndentedString(card)).append("\n");
    sb.append("    expedite: ").append(toIndentedString(expedite)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

