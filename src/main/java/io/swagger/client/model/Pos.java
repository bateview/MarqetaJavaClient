/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Pos
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-06-07T21:08:00.979Z")
public class Pos {
  /**
   * Gets or Sets panEntryMode
   */
  @JsonAdapter(PanEntryModeEnum.Adapter.class)
  public enum PanEntryModeEnum {
    MANUAL("MANUAL"),
    
    MAG_STRIPE("MAG_STRIPE"),
    
    MAG_STRIPE_CONTACTLESS("MAG_STRIPE_CONTACTLESS"),
    
    BAR_CODE("BAR_CODE"),
    
    OCR("OCR"),
    
    MICR("MICR"),
    
    CHIP("CHIP"),
    
    CHIP_CONTACTLESS("CHIP_CONTACTLESS"),
    
    CHIP_FALLBACK("CHIP_FALLBACK"),
    
    OTHER("OTHER");

    private String value;

    PanEntryModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PanEntryModeEnum fromValue(String text) {
      for (PanEntryModeEnum b : PanEntryModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PanEntryModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PanEntryModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PanEntryModeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PanEntryModeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("pan_entry_mode")
  private PanEntryModeEnum panEntryMode = null;

  /**
   * Gets or Sets pinEntryMode
   */
  @JsonAdapter(PinEntryModeEnum.Adapter.class)
  public enum PinEntryModeEnum {
    TRUE("TRUE"),
    
    FALSE("FALSE"),
    
    DEFECTIVE("DEFECTIVE");

    private String value;

    PinEntryModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PinEntryModeEnum fromValue(String text) {
      for (PinEntryModeEnum b : PinEntryModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PinEntryModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PinEntryModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PinEntryModeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PinEntryModeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("pin_entry_mode")
  private PinEntryModeEnum pinEntryMode = null;

  @SerializedName("terminal_id")
  private String terminalId = null;

  /**
   * Gets or Sets terminalAttendance
   */
  @JsonAdapter(TerminalAttendanceEnum.Adapter.class)
  public enum TerminalAttendanceEnum {
    UNSPECIFIED("UNSPECIFIED"),
    
    ATTENDED("ATTENDED"),
    
    UNATTENDED("UNATTENDED"),
    
    NO_TERMINAL("NO_TERMINAL");

    private String value;

    TerminalAttendanceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TerminalAttendanceEnum fromValue(String text) {
      for (TerminalAttendanceEnum b : TerminalAttendanceEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TerminalAttendanceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TerminalAttendanceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TerminalAttendanceEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TerminalAttendanceEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("terminal_attendance")
  private TerminalAttendanceEnum terminalAttendance = null;

  /**
   * Gets or Sets terminalLocation
   */
  @JsonAdapter(TerminalLocationEnum.Adapter.class)
  public enum TerminalLocationEnum {
    ON_PREMISE("ON_PREMISE"),
    
    OFF_PREMISE_MERCHANT("OFF_PREMISE_MERCHANT"),
    
    OFF_PREMISE_CARDHOLDER("OFF_PREMISE_CARDHOLDER"),
    
    NO_TERMINAL("NO_TERMINAL");

    private String value;

    TerminalLocationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TerminalLocationEnum fromValue(String text) {
      for (TerminalLocationEnum b : TerminalLocationEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TerminalLocationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TerminalLocationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TerminalLocationEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TerminalLocationEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("terminal_location")
  private TerminalLocationEnum terminalLocation = null;

  @SerializedName("card_holder_presence")
  private Boolean cardHolderPresence = false;

  /**
   * Gets or Sets cardholderAuthenticationMethod
   */
  @JsonAdapter(CardholderAuthenticationMethodEnum.Adapter.class)
  public enum CardholderAuthenticationMethodEnum {
    UNSPECIFIED("UNSPECIFIED"),
    
    NON_AUTHENTICATED("NON_AUTHENTICATED"),
    
    SIGNATURE("SIGNATURE"),
    
    PIN("PIN"),
    
    ID_VERIFIED("ID_VERIFIED");

    private String value;

    CardholderAuthenticationMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CardholderAuthenticationMethodEnum fromValue(String text) {
      for (CardholderAuthenticationMethodEnum b : CardholderAuthenticationMethodEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<CardholderAuthenticationMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CardholderAuthenticationMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CardholderAuthenticationMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CardholderAuthenticationMethodEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("cardholder_authentication_method")
  private CardholderAuthenticationMethodEnum cardholderAuthenticationMethod = null;

  @SerializedName("card_presence")
  private Boolean cardPresence = false;

  /**
   * Gets or Sets terminalType
   */
  @JsonAdapter(TerminalTypeEnum.Adapter.class)
  public enum TerminalTypeEnum {
    AUTO_DISPENSER_WITH_PIN("AUTO_DISPENSER_WITH_PIN"),
    
    SELF_SERVICE("SELF_SERVICE"),
    
    LIMITED_AMOUNT("LIMITED_AMOUNT"),
    
    IN_FLIGHT("IN_FLIGHT"),
    
    ECOMMERCE("ECOMMERCE"),
    
    TRANSPONDER("TRANSPONDER");

    private String value;

    TerminalTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TerminalTypeEnum fromValue(String text) {
      for (TerminalTypeEnum b : TerminalTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TerminalTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TerminalTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TerminalTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TerminalTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("terminal_type")
  private TerminalTypeEnum terminalType = null;

  /**
   * Gets or Sets cardDataInputCapability
   */
  @JsonAdapter(CardDataInputCapabilityEnum.Adapter.class)
  public enum CardDataInputCapabilityEnum {
    NO_TERMINAL("NO_TERMINAL"),
    
    MAG_STRIPE("MAG_STRIPE"),
    
    MAG_STRIPE_CONTACTLESS("MAG_STRIPE_CONTACTLESS"),
    
    MAG_STRIPE_KEY_ENTRY("MAG_STRIPE_KEY_ENTRY"),
    
    CHIP("CHIP"),
    
    CHIP_CONTACTLESS("CHIP_CONTACTLESS"),
    
    CHIP_MAG_STRIPE("CHIP_MAG_STRIPE"),
    
    CHIP_MAG_STRIPE_KEY_ENTRY("CHIP_MAG_STRIPE_KEY_ENTRY"),
    
    KEY_ENTRY("KEY_ENTRY"),
    
    OCR("OCR"),
    
    MICR("MICR");

    private String value;

    CardDataInputCapabilityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CardDataInputCapabilityEnum fromValue(String text) {
      for (CardDataInputCapabilityEnum b : CardDataInputCapabilityEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<CardDataInputCapabilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CardDataInputCapabilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CardDataInputCapabilityEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CardDataInputCapabilityEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("card_data_input_capability")
  private CardDataInputCapabilityEnum cardDataInputCapability = null;

  @SerializedName("country_code")
  private String countryCode = null;

  @SerializedName("zip")
  private String zip = null;

  @SerializedName("partial_approval_capable")
  private Boolean partialApprovalCapable = false;

  @SerializedName("purchase_amount_only")
  private Boolean purchaseAmountOnly = false;

  @SerializedName("is_recurring")
  private Boolean isRecurring = false;

  public Pos panEntryMode(PanEntryModeEnum panEntryMode) {
    this.panEntryMode = panEntryMode;
    return this;
  }

   /**
   * Get panEntryMode
   * @return panEntryMode
  **/
  @ApiModelProperty(value = "")
  public PanEntryModeEnum getPanEntryMode() {
    return panEntryMode;
  }

  public void setPanEntryMode(PanEntryModeEnum panEntryMode) {
    this.panEntryMode = panEntryMode;
  }

  public Pos pinEntryMode(PinEntryModeEnum pinEntryMode) {
    this.pinEntryMode = pinEntryMode;
    return this;
  }

   /**
   * Get pinEntryMode
   * @return pinEntryMode
  **/
  @ApiModelProperty(value = "")
  public PinEntryModeEnum getPinEntryMode() {
    return pinEntryMode;
  }

  public void setPinEntryMode(PinEntryModeEnum pinEntryMode) {
    this.pinEntryMode = pinEntryMode;
  }

  public Pos terminalId(String terminalId) {
    this.terminalId = terminalId;
    return this;
  }

   /**
   * Get terminalId
   * @return terminalId
  **/
  @ApiModelProperty(value = "")
  public String getTerminalId() {
    return terminalId;
  }

  public void setTerminalId(String terminalId) {
    this.terminalId = terminalId;
  }

  public Pos terminalAttendance(TerminalAttendanceEnum terminalAttendance) {
    this.terminalAttendance = terminalAttendance;
    return this;
  }

   /**
   * Get terminalAttendance
   * @return terminalAttendance
  **/
  @ApiModelProperty(value = "")
  public TerminalAttendanceEnum getTerminalAttendance() {
    return terminalAttendance;
  }

  public void setTerminalAttendance(TerminalAttendanceEnum terminalAttendance) {
    this.terminalAttendance = terminalAttendance;
  }

  public Pos terminalLocation(TerminalLocationEnum terminalLocation) {
    this.terminalLocation = terminalLocation;
    return this;
  }

   /**
   * Get terminalLocation
   * @return terminalLocation
  **/
  @ApiModelProperty(value = "")
  public TerminalLocationEnum getTerminalLocation() {
    return terminalLocation;
  }

  public void setTerminalLocation(TerminalLocationEnum terminalLocation) {
    this.terminalLocation = terminalLocation;
  }

  public Pos cardHolderPresence(Boolean cardHolderPresence) {
    this.cardHolderPresence = cardHolderPresence;
    return this;
  }

   /**
   * Get cardHolderPresence
   * @return cardHolderPresence
  **/
  @ApiModelProperty(value = "")
  public Boolean isCardHolderPresence() {
    return cardHolderPresence;
  }

  public void setCardHolderPresence(Boolean cardHolderPresence) {
    this.cardHolderPresence = cardHolderPresence;
  }

  public Pos cardholderAuthenticationMethod(CardholderAuthenticationMethodEnum cardholderAuthenticationMethod) {
    this.cardholderAuthenticationMethod = cardholderAuthenticationMethod;
    return this;
  }

   /**
   * Get cardholderAuthenticationMethod
   * @return cardholderAuthenticationMethod
  **/
  @ApiModelProperty(value = "")
  public CardholderAuthenticationMethodEnum getCardholderAuthenticationMethod() {
    return cardholderAuthenticationMethod;
  }

  public void setCardholderAuthenticationMethod(CardholderAuthenticationMethodEnum cardholderAuthenticationMethod) {
    this.cardholderAuthenticationMethod = cardholderAuthenticationMethod;
  }

  public Pos cardPresence(Boolean cardPresence) {
    this.cardPresence = cardPresence;
    return this;
  }

   /**
   * Get cardPresence
   * @return cardPresence
  **/
  @ApiModelProperty(value = "")
  public Boolean isCardPresence() {
    return cardPresence;
  }

  public void setCardPresence(Boolean cardPresence) {
    this.cardPresence = cardPresence;
  }

  public Pos terminalType(TerminalTypeEnum terminalType) {
    this.terminalType = terminalType;
    return this;
  }

   /**
   * Get terminalType
   * @return terminalType
  **/
  @ApiModelProperty(value = "")
  public TerminalTypeEnum getTerminalType() {
    return terminalType;
  }

  public void setTerminalType(TerminalTypeEnum terminalType) {
    this.terminalType = terminalType;
  }

  public Pos cardDataInputCapability(CardDataInputCapabilityEnum cardDataInputCapability) {
    this.cardDataInputCapability = cardDataInputCapability;
    return this;
  }

   /**
   * Get cardDataInputCapability
   * @return cardDataInputCapability
  **/
  @ApiModelProperty(value = "")
  public CardDataInputCapabilityEnum getCardDataInputCapability() {
    return cardDataInputCapability;
  }

  public void setCardDataInputCapability(CardDataInputCapabilityEnum cardDataInputCapability) {
    this.cardDataInputCapability = cardDataInputCapability;
  }

  public Pos countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

   /**
   * Get countryCode
   * @return countryCode
  **/
  @ApiModelProperty(value = "")
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }

  public Pos zip(String zip) {
    this.zip = zip;
    return this;
  }

   /**
   * Get zip
   * @return zip
  **/
  @ApiModelProperty(value = "")
  public String getZip() {
    return zip;
  }

  public void setZip(String zip) {
    this.zip = zip;
  }

  public Pos partialApprovalCapable(Boolean partialApprovalCapable) {
    this.partialApprovalCapable = partialApprovalCapable;
    return this;
  }

   /**
   * Get partialApprovalCapable
   * @return partialApprovalCapable
  **/
  @ApiModelProperty(value = "")
  public Boolean isPartialApprovalCapable() {
    return partialApprovalCapable;
  }

  public void setPartialApprovalCapable(Boolean partialApprovalCapable) {
    this.partialApprovalCapable = partialApprovalCapable;
  }

  public Pos purchaseAmountOnly(Boolean purchaseAmountOnly) {
    this.purchaseAmountOnly = purchaseAmountOnly;
    return this;
  }

   /**
   * Get purchaseAmountOnly
   * @return purchaseAmountOnly
  **/
  @ApiModelProperty(value = "")
  public Boolean isPurchaseAmountOnly() {
    return purchaseAmountOnly;
  }

  public void setPurchaseAmountOnly(Boolean purchaseAmountOnly) {
    this.purchaseAmountOnly = purchaseAmountOnly;
  }

  public Pos isRecurring(Boolean isRecurring) {
    this.isRecurring = isRecurring;
    return this;
  }

   /**
   * Get isRecurring
   * @return isRecurring
  **/
  @ApiModelProperty(value = "")
  public Boolean isIsRecurring() {
    return isRecurring;
  }

  public void setIsRecurring(Boolean isRecurring) {
    this.isRecurring = isRecurring;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Pos pos = (Pos) o;
    return Objects.equals(this.panEntryMode, pos.panEntryMode) &&
        Objects.equals(this.pinEntryMode, pos.pinEntryMode) &&
        Objects.equals(this.terminalId, pos.terminalId) &&
        Objects.equals(this.terminalAttendance, pos.terminalAttendance) &&
        Objects.equals(this.terminalLocation, pos.terminalLocation) &&
        Objects.equals(this.cardHolderPresence, pos.cardHolderPresence) &&
        Objects.equals(this.cardholderAuthenticationMethod, pos.cardholderAuthenticationMethod) &&
        Objects.equals(this.cardPresence, pos.cardPresence) &&
        Objects.equals(this.terminalType, pos.terminalType) &&
        Objects.equals(this.cardDataInputCapability, pos.cardDataInputCapability) &&
        Objects.equals(this.countryCode, pos.countryCode) &&
        Objects.equals(this.zip, pos.zip) &&
        Objects.equals(this.partialApprovalCapable, pos.partialApprovalCapable) &&
        Objects.equals(this.purchaseAmountOnly, pos.purchaseAmountOnly) &&
        Objects.equals(this.isRecurring, pos.isRecurring);
  }

  @Override
  public int hashCode() {
    return Objects.hash(panEntryMode, pinEntryMode, terminalId, terminalAttendance, terminalLocation, cardHolderPresence, cardholderAuthenticationMethod, cardPresence, terminalType, cardDataInputCapability, countryCode, zip, partialApprovalCapable, purchaseAmountOnly, isRecurring);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Pos {\n");
    
    sb.append("    panEntryMode: ").append(toIndentedString(panEntryMode)).append("\n");
    sb.append("    pinEntryMode: ").append(toIndentedString(pinEntryMode)).append("\n");
    sb.append("    terminalId: ").append(toIndentedString(terminalId)).append("\n");
    sb.append("    terminalAttendance: ").append(toIndentedString(terminalAttendance)).append("\n");
    sb.append("    terminalLocation: ").append(toIndentedString(terminalLocation)).append("\n");
    sb.append("    cardHolderPresence: ").append(toIndentedString(cardHolderPresence)).append("\n");
    sb.append("    cardholderAuthenticationMethod: ").append(toIndentedString(cardholderAuthenticationMethod)).append("\n");
    sb.append("    cardPresence: ").append(toIndentedString(cardPresence)).append("\n");
    sb.append("    terminalType: ").append(toIndentedString(terminalType)).append("\n");
    sb.append("    cardDataInputCapability: ").append(toIndentedString(cardDataInputCapability)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    zip: ").append(toIndentedString(zip)).append("\n");
    sb.append("    partialApprovalCapable: ").append(toIndentedString(partialApprovalCapable)).append("\n");
    sb.append("    purchaseAmountOnly: ").append(toIndentedString(purchaseAmountOnly)).append("\n");
    sb.append("    isRecurring: ").append(toIndentedString(isRecurring)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

