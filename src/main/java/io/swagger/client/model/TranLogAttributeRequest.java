/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * TranLogAttributeRequest
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-06-07T21:08:00.979Z")
public class TranLogAttributeRequest {
  @SerializedName("transaction_token")
  private String transactionToken = null;

  /**
   * Gets or Sets attributeName
   */
  @JsonAdapter(AttributeNameEnum.Adapter.class)
  public enum AttributeNameEnum {
    FUEL_TYPE("FUEL_TYPE"),
    
    NUM_GALLONS("NUM_GALLONS"),
    
    PRICE_PER_GALLON("PRICE_PER_GALLON"),
    
    EARN_CARDHOLDER_REWARD("EARN_CARDHOLDER_REWARD"),
    
    TRAN_LIFE_CYCLE("TRAN_LIFE_CYCLE"),
    
    MULTI_CLEARING_SEQ("MULTI_CLEARING_SEQ"),
    
    MULTI_CLEARING_FINAL_COMPLETION_ID("MULTI_CLEARING_FINAL_COMPLETION_ID"),
    
    POS_ENTRY_CODE("POS_ENTRY_CODE"),
    
    PROCESSING_CODE("PROCESSING_CODE"),
    
    INTERCHANGE_RATE_DESCRIPTOR("INTERCHANGE_RATE_DESCRIPTOR"),
    
    TERMINAL_TYPE("TERMINAL_TYPE"),
    
    SETTLEMENT_INDICATOR("SETTLEMENT_INDICATOR"),
    
    CARD_PRESENT("CARD_PRESENT"),
    
    CARD_HOLDER_PRESENT("CARD_HOLDER_PRESENT"),
    
    TRAN_ORIGIN("TRAN_ORIGIN"),
    
    FIND_ORIGINAL_FINDER("FIND_ORIGINAL_FINDER"),
    
    MANUAL_NOTE("MANUAL_NOTE"),
    
    POST_DATE_MODIFICATION("POST_DATE_MODIFICATION"),
    
    CLEARING_RECORD_HASH("CLEARING_RECORD_HASH"),
    
    CLEARING_RECORD_FILE_NAME("CLEARING_RECORD_FILE_NAME"),
    
    CLEARING_RECORD_SEQUENCE_NUMBER("CLEARING_RECORD_SEQUENCE_NUMBER"),
    
    TOKEN_ELAPSED_TIME_TO_LIVE_FOR_AN_LUK("TOKEN_ELAPSED_TIME_TO_LIVE_FOR_AN_LUK"),
    
    TOKEN_COUNT_OF_TRANSACTION_FOR_AN_LUK("TOKEN_COUNT_OF_TRANSACTION_FOR_AN_LUK"),
    
    TOKEN_CUMULATIVE_TOTAL_TRANSACTION_AMOUNT_FOR_AN_LUK("TOKEN_CUMULATIVE_TOTAL_TRANSACTION_AMOUNT_FOR_AN_LUK"),
    
    INCREMENTAL_CUMULATIVE_AMOUNT("INCREMENTAL_CUMULATIVE_AMOUNT"),
    
    FINAL_INCREMENTAL_AUTH("FINAL_INCREMENTAL_AUTH"),
    
    NETWORK_FEES_MODEL("NETWORK_FEES_MODEL"),
    
    ECOMMERCE_SECURITY_LEVEL_INDICATOR("ECOMMERCE_SECURITY_LEVEL_INDICATOR"),
    
    PAYMENT_CHANNEL("PAYMENT_CHANNEL"),
    
    PAYMENT_INSTRUMENT("PAYMENT_INSTRUMENT"),
    
    PIN_PRESENT("PIN_PRESENT"),
    
    TERMINAL_PARTIAL_APPROVAL_CAPABLE("TERMINAL_PARTIAL_APPROVAL_CAPABLE"),
    
    STIP_REASON_CODE("STIP_REASON_CODE"),
    
    IS_RECURRING("IS_RECURRING"),
    
    TRANSACTION_INTEGRITY_CLASS("TRANSACTION_INTEGRITY_CLASS"),
    
    DYNAMIC_CVV_ATC("DYNAMIC_CVV_ATC"),
    
    STANDIN_APPROVED_BY("STANDIN_APPROVED_BY"),
    
    STANDIN_BY("STANDIN_BY"),
    
    ORIGINAL_CURRENCY_CODE("ORIGINAL_CURRENCY_CODE"),
    
    CARDHOLDER_BILLING_CONVERSION_RATE("CARDHOLDER_BILLING_CONVERSION_RATE"),
    
    CARDHOLDER_BILLING_CONVERSION_DATE("CARDHOLDER_BILLING_CONVERSION_DATE"),
    
    IS_IT_STIP_APPROVAL("IS_IT_STIP_APPROVAL"),
    
    ECOMMERCE_AUTHENTICATION_DATA("ECOMMERCE_AUTHENTICATION_DATA"),
    
    CAVV_RESULT_CODE("CAVV_RESULT_CODE"),
    
    NETWORK_TRANSACTION_AMOUNT_DE_4("NETWORK_TRANSACTION_AMOUNT_DE_4"),
    
    NETWORK_SETTLEMENT_AMOUNT_DE_5("NETWORK_SETTLEMENT_AMOUNT_DE_5"),
    
    NETWORK_CARDHOLDER_BILLING_AMOUNT_DE_6("NETWORK_CARDHOLDER_BILLING_AMOUNT_DE_6"),
    
    NETWORK_FEE_AMOUNT_DE_28("NETWORK_FEE_AMOUNT_DE_28"),
    
    NETWORK_CASHBACK_AMOUNT_OTHER_DE_54("NETWORK_CASHBACK_AMOUNT_OTHER_DE_54"),
    
    NETWORK_REPLACEMENT_AMOUNT_OTHER_DE_61("NETWORK_REPLACEMENT_AMOUNT_OTHER_DE_61"),
    
    NETWORK_REPLACEMENT_AMOUNT_DE_95("NETWORK_REPLACEMENT_AMOUNT_DE_95"),
    
    ADVICE_DETAIL_CODE("ADVICE_DETAIL_CODE"),
    
    ASYNC_REQUEST_TOKEN("ASYNC_REQUEST_TOKEN"),
    
    TXN_MCC("TXN_MCC"),
    
    EXTRA_FIELDS("EXTRA_FIELDS"),
    
    SURCHARGE_FREE_ATM_NETWORK("SURCHARGE_FREE_ATM_NETWORK");

    private String value;

    AttributeNameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AttributeNameEnum fromValue(String text) {
      for (AttributeNameEnum b : AttributeNameEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<AttributeNameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AttributeNameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AttributeNameEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AttributeNameEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("attribute_name")
  private AttributeNameEnum attributeName = null;

  @SerializedName("attribute_value")
  private String attributeValue = null;

  public TranLogAttributeRequest transactionToken(String transactionToken) {
    this.transactionToken = transactionToken;
    return this;
  }

   /**
   * Get transactionToken
   * @return transactionToken
  **/
  @ApiModelProperty(required = true, value = "")
  public String getTransactionToken() {
    return transactionToken;
  }

  public void setTransactionToken(String transactionToken) {
    this.transactionToken = transactionToken;
  }

  public TranLogAttributeRequest attributeName(AttributeNameEnum attributeName) {
    this.attributeName = attributeName;
    return this;
  }

   /**
   * Get attributeName
   * @return attributeName
  **/
  @ApiModelProperty(required = true, value = "")
  public AttributeNameEnum getAttributeName() {
    return attributeName;
  }

  public void setAttributeName(AttributeNameEnum attributeName) {
    this.attributeName = attributeName;
  }

  public TranLogAttributeRequest attributeValue(String attributeValue) {
    this.attributeValue = attributeValue;
    return this;
  }

   /**
   * Get attributeValue
   * @return attributeValue
  **/
  @ApiModelProperty(required = true, value = "")
  public String getAttributeValue() {
    return attributeValue;
  }

  public void setAttributeValue(String attributeValue) {
    this.attributeValue = attributeValue;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TranLogAttributeRequest tranLogAttributeRequest = (TranLogAttributeRequest) o;
    return Objects.equals(this.transactionToken, tranLogAttributeRequest.transactionToken) &&
        Objects.equals(this.attributeName, tranLogAttributeRequest.attributeName) &&
        Objects.equals(this.attributeValue, tranLogAttributeRequest.attributeValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transactionToken, attributeName, attributeValue);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TranLogAttributeRequest {\n");
    
    sb.append("    transactionToken: ").append(toIndentedString(transactionToken)).append("\n");
    sb.append("    attributeName: ").append(toIndentedString(attributeName)).append("\n");
    sb.append("    attributeValue: ").append(toIndentedString(attributeValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

