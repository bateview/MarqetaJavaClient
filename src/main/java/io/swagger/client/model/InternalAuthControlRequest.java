/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.InternalCard;
import io.swagger.client.model.InternalUser;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * InternalAuthControlRequest
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-06-07T21:08:00.979Z")
public class InternalAuthControlRequest {
  @SerializedName("card")
  private InternalCard card = null;

  @SerializedName("cardholder")
  private InternalUser cardholder = null;

  @SerializedName("mid")
  private String mid = null;

  @SerializedName("mcc")
  private String mcc = null;

  @SerializedName("mcc_groups")
  private List<String> mccGroups = null;

  /**
   * Gets or Sets controlsIndicator
   */
  @JsonAdapter(ControlsIndicatorEnum.Adapter.class)
  public enum ControlsIndicatorEnum {
    LOAD("LOAD"),
    
    SPEND("SPEND");

    private String value;

    ControlsIndicatorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ControlsIndicatorEnum fromValue(String text) {
      for (ControlsIndicatorEnum b : ControlsIndicatorEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ControlsIndicatorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ControlsIndicatorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ControlsIndicatorEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ControlsIndicatorEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("controls_indicator")
  private ControlsIndicatorEnum controlsIndicator = null;

  public InternalAuthControlRequest card(InternalCard card) {
    this.card = card;
    return this;
  }

   /**
   * Get card
   * @return card
  **/
  @ApiModelProperty(required = true, value = "")
  public InternalCard getCard() {
    return card;
  }

  public void setCard(InternalCard card) {
    this.card = card;
  }

  public InternalAuthControlRequest cardholder(InternalUser cardholder) {
    this.cardholder = cardholder;
    return this;
  }

   /**
   * Get cardholder
   * @return cardholder
  **/
  @ApiModelProperty(required = true, value = "")
  public InternalUser getCardholder() {
    return cardholder;
  }

  public void setCardholder(InternalUser cardholder) {
    this.cardholder = cardholder;
  }

  public InternalAuthControlRequest mid(String mid) {
    this.mid = mid;
    return this;
  }

   /**
   * Get mid
   * @return mid
  **/
  @ApiModelProperty(value = "")
  public String getMid() {
    return mid;
  }

  public void setMid(String mid) {
    this.mid = mid;
  }

  public InternalAuthControlRequest mcc(String mcc) {
    this.mcc = mcc;
    return this;
  }

   /**
   * Get mcc
   * @return mcc
  **/
  @ApiModelProperty(value = "")
  public String getMcc() {
    return mcc;
  }

  public void setMcc(String mcc) {
    this.mcc = mcc;
  }

  public InternalAuthControlRequest mccGroups(List<String> mccGroups) {
    this.mccGroups = mccGroups;
    return this;
  }

  public InternalAuthControlRequest addMccGroupsItem(String mccGroupsItem) {
    if (this.mccGroups == null) {
      this.mccGroups = new ArrayList<String>();
    }
    this.mccGroups.add(mccGroupsItem);
    return this;
  }

   /**
   * Get mccGroups
   * @return mccGroups
  **/
  @ApiModelProperty(value = "")
  public List<String> getMccGroups() {
    return mccGroups;
  }

  public void setMccGroups(List<String> mccGroups) {
    this.mccGroups = mccGroups;
  }

  public InternalAuthControlRequest controlsIndicator(ControlsIndicatorEnum controlsIndicator) {
    this.controlsIndicator = controlsIndicator;
    return this;
  }

   /**
   * Get controlsIndicator
   * @return controlsIndicator
  **/
  @ApiModelProperty(required = true, value = "")
  public ControlsIndicatorEnum getControlsIndicator() {
    return controlsIndicator;
  }

  public void setControlsIndicator(ControlsIndicatorEnum controlsIndicator) {
    this.controlsIndicator = controlsIndicator;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InternalAuthControlRequest internalAuthControlRequest = (InternalAuthControlRequest) o;
    return Objects.equals(this.card, internalAuthControlRequest.card) &&
        Objects.equals(this.cardholder, internalAuthControlRequest.cardholder) &&
        Objects.equals(this.mid, internalAuthControlRequest.mid) &&
        Objects.equals(this.mcc, internalAuthControlRequest.mcc) &&
        Objects.equals(this.mccGroups, internalAuthControlRequest.mccGroups) &&
        Objects.equals(this.controlsIndicator, internalAuthControlRequest.controlsIndicator);
  }

  @Override
  public int hashCode() {
    return Objects.hash(card, cardholder, mid, mcc, mccGroups, controlsIndicator);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InternalAuthControlRequest {\n");
    
    sb.append("    card: ").append(toIndentedString(card)).append("\n");
    sb.append("    cardholder: ").append(toIndentedString(cardholder)).append("\n");
    sb.append("    mid: ").append(toIndentedString(mid)).append("\n");
    sb.append("    mcc: ").append(toIndentedString(mcc)).append("\n");
    sb.append("    mccGroups: ").append(toIndentedString(mccGroups)).append("\n");
    sb.append("    controlsIndicator: ").append(toIndentedString(controlsIndicator)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

