/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import org.threeten.bp.OffsetDateTime;

/**
 * ChargebackResponse
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-06-07T21:08:00.979Z")
public class ChargebackResponse {
  @SerializedName("token")
  private String token = null;

  @SerializedName("transaction_token")
  private String transactionToken = null;

  @SerializedName("amount")
  private BigDecimal amount = null;

  /**
   * Gets or Sets reasonDescription
   */
  @JsonAdapter(ReasonDescriptionEnum.Adapter.class)
  public enum ReasonDescriptionEnum {
    SERVICE_NOT_PROVIDED_MERCHANDISE_NOT_RECEIVED("SERVICE_NOT_PROVIDED_MERCHANDISE_NOT_RECEIVED"),
    
    CANCELLED_RECURRING_TRANSACTION("CANCELLED_RECURRING_TRANSACTION"),
    
    NOT_AS_DESCRIBED_OR_DEFECTIVE_MERCHANDISE("NOT_AS_DESCRIBED_OR_DEFECTIVE_MERCHANDISE"),
    
    FRAUD_MULTIPLE_TRANSACTIONS("FRAUD_MULTIPLE_TRANSACTIONS"),
    
    FRAUD_TRANSACTION("FRAUD_TRANSACTION"),
    
    NO_AUTHORIZATION("NO_AUTHORIZATION"),
    
    LATE_PRESENTMENT("LATE_PRESENTMENT"),
    
    TRANSACTION_NOT_RECOGNIZED("TRANSACTION_NOT_RECOGNIZED"),
    
    INCORRECT_CURRENCY_OR_TRANSACTION_CODE("INCORRECT_CURRENCY_OR_TRANSACTION_CODE"),
    
    INCORRECT_TRANSACTION_AMOUNT_OR_ACCOUNT_NUMBER("INCORRECT_TRANSACTION_AMOUNT_OR_ACCOUNT_NUMBER"),
    
    NOT_AUTHORIZED_CARD_PRESENT("NOT_AUTHORIZED_CARD_PRESENT"),
    
    NOT_AUTHORIZED_CARD_ABSENT("NOT_AUTHORIZED_CARD_ABSENT"),
    
    CREDIT_NOT_PROCESSED("CREDIT_NOT_PROCESSED"),
    
    NON_RECEIPT_OF_CASH_OR_LOAD_TRANSACTION_VALUE_AT_ATM("NON_RECEIPT_OF_CASH_OR_LOAD_TRANSACTION_VALUE_AT_ATM");

    private String value;

    ReasonDescriptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReasonDescriptionEnum fromValue(String text) {
      for (ReasonDescriptionEnum b : ReasonDescriptionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ReasonDescriptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReasonDescriptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReasonDescriptionEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ReasonDescriptionEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("reason_description")
  private ReasonDescriptionEnum reasonDescription = null;

  @SerializedName("reason_code")
  private String reasonCode = null;

  @SerializedName("memo")
  private String memo = null;

  /**
   * Gets or Sets state
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    INITIATED("INITIATED"),
    
    REPRESENTMENT("REPRESENTMENT"),
    
    PREARBITRATION("PREARBITRATION"),
    
    ARBITRATION("ARBITRATION"),
    
    CASE_WON("CASE_WON"),
    
    CASE_LOST("CASE_LOST"),
    
    NETWORK_REJECTED("NETWORK_REJECTED"),
    
    WITHDRAWN("WITHDRAWN");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String text) {
      for (StateEnum b : StateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StateEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("state")
  private StateEnum state = null;

  /**
   * Gets or Sets channel
   */
  @JsonAdapter(ChannelEnum.Adapter.class)
  public enum ChannelEnum {
    GATEWAY("GATEWAY"),
    
    GATEWAY_AUTOMATED("GATEWAY_AUTOMATED"),
    
    ISSUER("ISSUER"),
    
    ISSUER_AUTOMATED("ISSUER_AUTOMATED");

    private String value;

    ChannelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChannelEnum fromValue(String text) {
      for (ChannelEnum b : ChannelEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ChannelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChannelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChannelEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ChannelEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("channel")
  private ChannelEnum channel = null;

  /**
   * Gets or Sets network
   */
  @JsonAdapter(NetworkEnum.Adapter.class)
  public enum NetworkEnum {
    MARQETA("MARQETA"),
    
    DISCOVER("DISCOVER"),
    
    MASTERCARD("MASTERCARD"),
    
    PULSE("PULSE"),
    
    VISA("VISA");

    private String value;

    NetworkEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NetworkEnum fromValue(String text) {
      for (NetworkEnum b : NetworkEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<NetworkEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NetworkEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NetworkEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return NetworkEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("network")
  private NetworkEnum network = null;

  @SerializedName("network_case_id")
  private String networkCaseId = null;

  @SerializedName("credit_user")
  private Boolean creditUser = false;

  @SerializedName("created_time")
  private OffsetDateTime createdTime = null;

  @SerializedName("last_modified_time")
  private OffsetDateTime lastModifiedTime = null;

  public ChargebackResponse token(String token) {
    this.token = token;
    return this;
  }

   /**
   * Get token
   * @return token
  **/
  @ApiModelProperty(required = true, value = "")
  public String getToken() {
    return token;
  }

  public void setToken(String token) {
    this.token = token;
  }

  public ChargebackResponse transactionToken(String transactionToken) {
    this.transactionToken = transactionToken;
    return this;
  }

   /**
   * Get transactionToken
   * @return transactionToken
  **/
  @ApiModelProperty(required = true, value = "")
  public String getTransactionToken() {
    return transactionToken;
  }

  public void setTransactionToken(String transactionToken) {
    this.transactionToken = transactionToken;
  }

  public ChargebackResponse amount(BigDecimal amount) {
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * minimum: 0.01
   * @return amount
  **/
  @ApiModelProperty(required = true, value = "")
  public BigDecimal getAmount() {
    return amount;
  }

  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }

  public ChargebackResponse reasonDescription(ReasonDescriptionEnum reasonDescription) {
    this.reasonDescription = reasonDescription;
    return this;
  }

   /**
   * Get reasonDescription
   * @return reasonDescription
  **/
  @ApiModelProperty(value = "")
  public ReasonDescriptionEnum getReasonDescription() {
    return reasonDescription;
  }

  public void setReasonDescription(ReasonDescriptionEnum reasonDescription) {
    this.reasonDescription = reasonDescription;
  }

  public ChargebackResponse reasonCode(String reasonCode) {
    this.reasonCode = reasonCode;
    return this;
  }

   /**
   * Get reasonCode
   * @return reasonCode
  **/
  @ApiModelProperty(value = "")
  public String getReasonCode() {
    return reasonCode;
  }

  public void setReasonCode(String reasonCode) {
    this.reasonCode = reasonCode;
  }

  public ChargebackResponse memo(String memo) {
    this.memo = memo;
    return this;
  }

   /**
   * Get memo
   * @return memo
  **/
  @ApiModelProperty(value = "")
  public String getMemo() {
    return memo;
  }

  public void setMemo(String memo) {
    this.memo = memo;
  }

  public ChargebackResponse state(StateEnum state) {
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @ApiModelProperty(required = true, value = "")
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }

  public ChargebackResponse channel(ChannelEnum channel) {
    this.channel = channel;
    return this;
  }

   /**
   * Get channel
   * @return channel
  **/
  @ApiModelProperty(required = true, value = "")
  public ChannelEnum getChannel() {
    return channel;
  }

  public void setChannel(ChannelEnum channel) {
    this.channel = channel;
  }

  public ChargebackResponse network(NetworkEnum network) {
    this.network = network;
    return this;
  }

   /**
   * Get network
   * @return network
  **/
  @ApiModelProperty(required = true, value = "")
  public NetworkEnum getNetwork() {
    return network;
  }

  public void setNetwork(NetworkEnum network) {
    this.network = network;
  }

  public ChargebackResponse networkCaseId(String networkCaseId) {
    this.networkCaseId = networkCaseId;
    return this;
  }

   /**
   * Get networkCaseId
   * @return networkCaseId
  **/
  @ApiModelProperty(value = "")
  public String getNetworkCaseId() {
    return networkCaseId;
  }

  public void setNetworkCaseId(String networkCaseId) {
    this.networkCaseId = networkCaseId;
  }

  public ChargebackResponse creditUser(Boolean creditUser) {
    this.creditUser = creditUser;
    return this;
  }

   /**
   * Get creditUser
   * @return creditUser
  **/
  @ApiModelProperty(required = true, value = "")
  public Boolean isCreditUser() {
    return creditUser;
  }

  public void setCreditUser(Boolean creditUser) {
    this.creditUser = creditUser;
  }

  public ChargebackResponse createdTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
    return this;
  }

   /**
   * yyyy-MM-ddTHH:mm:ssZ
   * @return createdTime
  **/
  @ApiModelProperty(required = true, value = "yyyy-MM-ddTHH:mm:ssZ")
  public OffsetDateTime getCreatedTime() {
    return createdTime;
  }

  public void setCreatedTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
  }

  public ChargebackResponse lastModifiedTime(OffsetDateTime lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
    return this;
  }

   /**
   * yyyy-MM-ddTHH:mm:ssZ
   * @return lastModifiedTime
  **/
  @ApiModelProperty(required = true, value = "yyyy-MM-ddTHH:mm:ssZ")
  public OffsetDateTime getLastModifiedTime() {
    return lastModifiedTime;
  }

  public void setLastModifiedTime(OffsetDateTime lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChargebackResponse chargebackResponse = (ChargebackResponse) o;
    return Objects.equals(this.token, chargebackResponse.token) &&
        Objects.equals(this.transactionToken, chargebackResponse.transactionToken) &&
        Objects.equals(this.amount, chargebackResponse.amount) &&
        Objects.equals(this.reasonDescription, chargebackResponse.reasonDescription) &&
        Objects.equals(this.reasonCode, chargebackResponse.reasonCode) &&
        Objects.equals(this.memo, chargebackResponse.memo) &&
        Objects.equals(this.state, chargebackResponse.state) &&
        Objects.equals(this.channel, chargebackResponse.channel) &&
        Objects.equals(this.network, chargebackResponse.network) &&
        Objects.equals(this.networkCaseId, chargebackResponse.networkCaseId) &&
        Objects.equals(this.creditUser, chargebackResponse.creditUser) &&
        Objects.equals(this.createdTime, chargebackResponse.createdTime) &&
        Objects.equals(this.lastModifiedTime, chargebackResponse.lastModifiedTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(token, transactionToken, amount, reasonDescription, reasonCode, memo, state, channel, network, networkCaseId, creditUser, createdTime, lastModifiedTime);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChargebackResponse {\n");
    
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    transactionToken: ").append(toIndentedString(transactionToken)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    reasonDescription: ").append(toIndentedString(reasonDescription)).append("\n");
    sb.append("    reasonCode: ").append(toIndentedString(reasonCode)).append("\n");
    sb.append("    memo: ").append(toIndentedString(memo)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    networkCaseId: ").append(toIndentedString(networkCaseId)).append("\n");
    sb.append("    creditUser: ").append(toIndentedString(creditUser)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    lastModifiedTime: ").append(toIndentedString(lastModifiedTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

