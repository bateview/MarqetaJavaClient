/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.CardListResponse;
import io.swagger.client.model.CardRequest;
import io.swagger.client.model.CardResponse;
import io.swagger.client.model.CardUpdateRequest;
import io.swagger.client.model.MerchantCardRequest;
import io.swagger.client.model.PanRequest;
import io.swagger.client.model.PanResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CardsApi
 */
@Ignore
public class CardsApiTest {

    private final CardsApi api = new CardsApi();

    
    /**
     * Lists cards by the last 4 digits
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCardsTest() throws ApiException {
        String lastFour = null;
        Integer count = null;
        Integer startIndex = null;
        String fields = null;
        String sortBy = null;
        CardListResponse response = api.getCards(lastFour, count, startIndex, fields, sortBy);

        // TODO: test validations
    }
    
    /**
     * Returns a card&#39;s metadata
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCardsBarcodeBarcodeTest() throws ApiException {
        String barcode = null;
        String fields = null;
        CardResponse response = api.getCardsBarcodeBarcode(barcode, fields);

        // TODO: test validations
    }
    
    /**
     * Returns a merchant onboarding card
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCardsMerchantMerchanttokenTest() throws ApiException {
        String merchantToken = null;
        String fields = null;
        CardResponse response = api.getCardsMerchantMerchanttoken(merchantToken, fields);

        // TODO: test validations
    }
    
    /**
     * Returns a specific card - PAN visible
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCardsMerchantMerchanttokenShowpanTest() throws ApiException {
        String merchantToken = null;
        String fields = null;
        Boolean showCvvNumber = null;
        CardResponse response = api.getCardsMerchantMerchanttokenShowpan(merchantToken, fields, showCvvNumber);

        // TODO: test validations
    }
    
    /**
     * Returns a specific card
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCardsTokenTest() throws ApiException {
        String token = null;
        String fields = null;
        String expand = null;
        CardResponse response = api.getCardsToken(token, fields, expand);

        // TODO: test validations
    }
    
    /**
     * Returns a specific card - PAN visible
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCardsTokenShowpanTest() throws ApiException {
        String token = null;
        String fields = null;
        Boolean showCvvNumber = null;
        CardResponse response = api.getCardsTokenShowpan(token, fields, showCvvNumber);

        // TODO: test validations
    }
    
    /**
     * Lists all cards for a specific user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCardsUserTokenTest() throws ApiException {
        String token = null;
        Integer count = null;
        Integer startIndex = null;
        String fields = null;
        String sortBy = null;
        CardResponse response = api.getCardsUserToken(token, count, startIndex, fields, sortBy);

        // TODO: test validations
    }
    
    /**
     * Creates a card
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postCardsTest() throws ApiException {
        CardRequest body = null;
        Boolean showCvvNumber = null;
        Boolean showPan = null;
        CardResponse response = api.postCards(body, showCvvNumber, showPan);

        // TODO: test validations
    }
    
    /**
     * Returns user and card tokens for the specified PAN
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postCardsGetbypanTest() throws ApiException {
        PanRequest body = null;
        PanResponse response = api.postCardsGetbypan(body);

        // TODO: test validations
    }
    
    /**
     * Creates a merchant onboarding card
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postCardsMerchantMerchanttokenTest() throws ApiException {
        String merchantToken = null;
        MerchantCardRequest body = null;
        CardResponse response = api.postCardsMerchantMerchanttoken(merchantToken, body);

        // TODO: test validations
    }
    
    /**
     * Updates a specific card
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putCardsTokenTest() throws ApiException {
        String token = null;
        CardUpdateRequest body = null;
        CardResponse response = api.putCardsToken(token, body);

        // TODO: test validations
    }
    
}
