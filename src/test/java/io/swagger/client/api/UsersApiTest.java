/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.AccessTokenResponse;
import io.swagger.client.model.CardHolderModel;
import io.swagger.client.model.CardHolderNoteListResponse;
import io.swagger.client.model.CardholderNoteRequestModel;
import io.swagger.client.model.CardholderNoteResponseModel;
import io.swagger.client.model.CardholderNoteUpdateRequestModel;
import io.swagger.client.model.ClientAccessTokenRequest;
import io.swagger.client.model.ClientAccessTokenResponse;
import io.swagger.client.model.LoginRequestModel;
import io.swagger.client.model.LoginResponseModel;
import io.swagger.client.model.OneTimeRequestModel;
import io.swagger.client.model.PasswordUpdateModel;
import io.swagger.client.model.ResetUserPasswordEmailModel;
import io.swagger.client.model.ResetUserPasswordModel;
import io.swagger.client.model.SsnResponseModel;
import io.swagger.client.model.UserCardHolderListResponse;
import io.swagger.client.model.UserCardHolderResponse;
import io.swagger.client.model.UserCardHolderSearchModel;
import io.swagger.client.model.UserCardHolderUpdateModel;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Ignore
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    
    /**
     * Lists all users
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsersTest() throws ApiException {
        Integer count = null;
        Integer startIndex = null;
        String searchType = null;
        String fields = null;
        String sortBy = null;
        UserCardHolderListResponse response = api.getUsers(count, startIndex, searchType, fields, sortBy);

        // TODO: test validations
    }
    
    /**
     * Returns a client access token
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsersAuthClientaccesstokenTokenTest() throws ApiException {
        String token = null;
        String applicationToken = null;
        ClientAccessTokenResponse response = api.getUsersAuthClientaccesstokenToken(token, applicationToken);

        // TODO: test validations
    }
    
    /**
     * Lists all children of a parent user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsersParenttokenChildrenTest() throws ApiException {
        String parentToken = null;
        Integer count = null;
        Integer startIndex = null;
        String fields = null;
        String sortBy = null;
        UserCardHolderListResponse response = api.getUsersParenttokenChildren(parentToken, count, startIndex, fields, sortBy);

        // TODO: test validations
    }
    
    /**
     * Lists all users who match a phone number
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsersPhonenumberPhonenumberTest() throws ApiException {
        String phoneNumber = null;
        Integer count = null;
        Integer startIndex = null;
        String fields = null;
        String sortBy = null;
        UserCardHolderListResponse response = api.getUsersPhonenumberPhonenumber(phoneNumber, count, startIndex, fields, sortBy);

        // TODO: test validations
    }
    
    /**
     * Returns a specific user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsersTokenTest() throws ApiException {
        String token = null;
        String fields = null;
        UserCardHolderResponse response = api.getUsersToken(token, fields);

        // TODO: test validations
    }
    
    /**
     * Lists cardholder notes
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsersTokenNotesTest() throws ApiException {
        String token = null;
        Integer startIndex = null;
        Integer count = null;
        String createdBy = null;
        String createdByUserRole = null;
        Boolean includePrivate = null;
        String searchType = null;
        String fields = null;
        String sortBy = null;
        CardHolderNoteListResponse response = api.getUsersTokenNotes(token, startIndex, count, createdBy, createdByUserRole, includePrivate, searchType, fields, sortBy);

        // TODO: test validations
    }
    
    /**
     * Returns a specific user&#39;s SSN
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsersTokenSsnTest() throws ApiException {
        String token = null;
        Boolean fullSsn = null;
        SsnResponseModel response = api.getUsersTokenSsn(token, fullSsn);

        // TODO: test validations
    }
    
    /**
     * Creates a user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postUsersTest() throws ApiException {
        CardHolderModel body = null;
        UserCardHolderResponse response = api.postUsers(body);

        // TODO: test validations
    }
    
    /**
     * Updates a user password
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postUsersAuthChangepasswordTest() throws ApiException {
        PasswordUpdateModel body = null;
        api.postUsersAuthChangepassword(body);

        // TODO: test validations
    }
    
    /**
     * Creates a client access token
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postUsersAuthClientaccesstokenTest() throws ApiException {
        ClientAccessTokenRequest body = null;
        ClientAccessTokenResponse response = api.postUsersAuthClientaccesstoken(body);

        // TODO: test validations
    }
    
    /**
     * Logs in a user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postUsersAuthLoginTest() throws ApiException {
        LoginRequestModel body = null;
        LoginResponseModel response = api.postUsersAuthLogin(body);

        // TODO: test validations
    }
    
    /**
     * Logs out a user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postUsersAuthLogoutTest() throws ApiException {
        api.postUsersAuthLogout();

        // TODO: test validations
    }
    
    /**
     * Creates a one-time token
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postUsersAuthOnetimeTest() throws ApiException {
        OneTimeRequestModel body = null;
        AccessTokenResponse response = api.postUsersAuthOnetime(body);

        // TODO: test validations
    }
    
    /**
     * Generates a reset password email
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postUsersAuthResetpasswordTest() throws ApiException {
        ResetUserPasswordEmailModel body = null;
        api.postUsersAuthResetpassword(body);

        // TODO: test validations
    }
    
    /**
     * Resets a user password
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postUsersAuthResetpasswordTokenTest() throws ApiException {
        String token = null;
        ResetUserPasswordModel body = null;
        api.postUsersAuthResetpasswordToken(token, body);

        // TODO: test validations
    }
    
    /**
     * Generates an email verification request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postUsersAuthVerifyemailTest() throws ApiException {
        api.postUsersAuthVerifyemail();

        // TODO: test validations
    }
    
    /**
     * Verifies the email token
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postUsersAuthVerifyemailTokenTest() throws ApiException {
        String token = null;
        api.postUsersAuthVerifyemailToken(token);

        // TODO: test validations
    }
    
    /**
     * Lists all users
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postUsersLookupTest() throws ApiException {
        UserCardHolderSearchModel body = null;
        Integer count = null;
        Integer startIndex = null;
        String searchType = null;
        String fields = null;
        String sortBy = null;
        UserCardHolderListResponse response = api.postUsersLookup(body, count, startIndex, searchType, fields, sortBy);

        // TODO: test validations
    }
    
    /**
     * Creates a note for the cardholder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postUsersTokenNotesTest() throws ApiException {
        String token = null;
        CardholderNoteRequestModel body = null;
        CardholderNoteResponseModel response = api.postUsersTokenNotes(token, body);

        // TODO: test validations
    }
    
    /**
     * Updates a specific user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putUsersTokenTest() throws ApiException {
        String token = null;
        UserCardHolderUpdateModel body = null;
        CardHolderModel response = api.putUsersToken(token, body);

        // TODO: test validations
    }
    
    /**
     * Updates a specific note for a cardholder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putUsersTokenNotesNotestokenTest() throws ApiException {
        String token = null;
        String notesToken = null;
        CardholderNoteUpdateRequestModel body = null;
        CardholderNoteResponseModel response = api.putUsersTokenNotesNotestoken(token, notesToken, body);

        // TODO: test validations
    }
    
}
